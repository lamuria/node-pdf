{"version":"0.2.9","files":{"/Users/yunong/workspace/node-restify/test/client.test.js":{"stats":{"percentage":0.9722222222222222,"lines":[{"lineno":12},{"lineno":47},{"lineno":121},{"lineno":171},{"lineno":172},{"lineno":184},{"lineno":185},{"lineno":229},{"lineno":230},{"lineno":231},{"lineno":244},{"lineno":245},{"lineno":246},{"lineno":247},{"lineno":248},{"lineno":249},{"lineno":250},{"lineno":251},{"lineno":252},{"lineno":253},{"lineno":721},{"lineno":725},{"lineno":788},{"lineno":789}],"missing":24,"seen":840,"total":864,"coverage":{"12":{"partial":false,"source":"    delete require.cache[__dirname + '/lib/helper.js'];","missing":[{"startCol":4,"endCol":54},{"startCol":25,"endCol":34}]},"47":{"partial":false,"source":"                      undefined);","missing":[{"startCol":22,"endCol":31}]},"121":{"partial":false,"source":"                res.send(200, 'Not allowed');","missing":[{"startCol":16,"endCol":44}]},"171":{"partial":false,"source":"        console.error(e.stack);","missing":[{"startCol":8,"endCol":30}]},"172":{"partial":false,"source":"        process.exit(1);","missing":[{"startCol":8,"endCol":23}]},"184":{"partial":false,"source":"        console.error(e.stack);","missing":[{"startCol":8,"endCol":30}]},"185":{"partial":false,"source":"        process.exit(1);","missing":[{"startCol":8,"endCol":23}]},"229":{"partial":false,"source":"            t.ok(err);","missing":[{"startCol":12,"endCol":21}]},"230":{"partial":false,"source":"            t.equal(err.code, 'ECONNRESET');","missing":[{"startCol":12,"endCol":43}]},"231":{"partial":false,"source":"            t.end();","missing":[{"startCol":12,"endCol":19}]},"244":{"partial":false,"source":"    JSON_CLIENT.get('/' + uuid(), function (err, req, res, obj) {","missing":[{},{"startCol":20,"endCol":32},{"startCol":26,"endCol":32}]},"245":{"partial":false,"source":"        t.ok(err);","missing":[{},{"startCol":8,"endCol":18}]},"246":{"partial":false,"source":"        t.ok(err.message);","missing":[{"startCol":8,"endCol":25},{}]},"247":{"partial":false,"source":"        t.equal(err.statusCode, 404);","missing":[{},{"startCol":8,"endCol":36}]},"248":{"partial":false,"source":"        t.ok(req);","missing":[{},{"startCol":8,"endCol":17}]},"249":{"partial":false,"source":"        t.ok(res);","missing":[{},{"startCol":8,"endCol":17}]},"250":{"partial":false,"source":"        t.ok(obj);","missing":[{"startCol":8,"endCol":17},{}]},"251":{"partial":false,"source":"        t.equal(obj.code, 'ResourceNotFound');","missing":[{},{"startCol":8,"endCol":45}]},"252":{"partial":false,"source":"        t.ok(obj.message);","missing":[{},{"startCol":8,"endCol":25}]},"253":{"partial":false,"source":"        t.end();","missing":[{"startCol":8,"endCol":15},{}]},"254":{"partial":false,"source":"    });","missing":[{}]},"721":{"partial":false,"source":"            throw new Error('request must be an instance of ' +","missing":[{}]},"722":{"partial":false,"source":"                'http.ClientRequest');","missing":[{}]},"725":{"partial":false,"source":"            throw new Error('Gusty-Winds header was not ' +","missing":[{}]},"726":{"partial":false,"source":"                'present in request');","missing":[{}]},"788":{"partial":false,"source":"        t.ok(false, 'timed out');","missing":[{"startCol":8,"endCol":32}]},"789":{"partial":false,"source":"        t.end();","missing":[{"startCol":8,"endCol":15}]}},"source":"// Copyright 2012 Mark Cavage <mcavage@gmail.com> All rights reserved.\n\nvar http = require('http');\n\nvar crypto = require('crypto');\n\nvar uuid = require('node-uuid');\n\nvar restify = require('../lib');\n\nif (require.cache[__dirname + '/lib/helper.js'])\n    delete require.cache[__dirname + '/lib/helper.js'];\nvar helper = require('./lib/helper.js');\n\n\n///--- Globals\n\nvar after = helper.after;\nvar before = helper.before;\nvar test = helper.test;\n\nvar PORT = process.env.UNIT_TEST_PORT || 0;\nvar JSON_CLIENT;\nvar STR_CLIENT;\nvar RAW_CLIENT;\nvar TIMEOUT_CLIENT;\nvar SERVER;\n\n\n///--- Helpers\n\nfunction sendJson(req, res, next) {\n    res.send({hello: req.params.hello || req.params.name || null});\n    next();\n}\n\n\nfunction sendText(req, res, next) {\n    var text = 'hello ' + (req.params.hello || req.params.name || '');\n\n    if (req.headers['range']) {\n        /* JSSTYLED */\n        var matched = req.headers['range'].match(/bytes=([0-9]+)-([0-9]*)/);\n        var start = parseInt(matched[1], 10);\n        var length = ((matched[2]) ?\n                      parseInt(matched[2], 10) - start :\n                      undefined);\n        var hash = crypto.createHash('md5');\n        hash.update(text, 'utf8');\n        res.header('content-md5', hash.digest('base64'));\n        res.status(206);\n        text = text.substr(start, length);\n    }\n\n    res.send(text);\n    next();\n}\n\nfunction sendSignature(req, res, next) {\n    res.header('content-type', 'text/plain');\n    var hdr = req.header('Awesome-Signature');\n    if (!hdr) {\n        res.send('request NOT signed');\n    } else {\n        res.send('ok: ' + hdr);\n    }\n}\n\n\nfunction sendWhitespace(req, res, next) {\n    var body = ' ';\n    if (req.params.flavor === 'spaces') {\n        body = '   ';\n    } else if (req.params.flavor === 'tabs') {\n        body = ' \\t\\t  ';\n    }\n\n    // override contentType as otherwise the string is json-ified to\n    // include quotes. Don't want that for this test.\n    res.header('content-type', 'text/plain');\n    res.send(body);\n    next();\n}\n\nfunction requestThatTimesOut(req, res, next) {\n    setTimeout(function () {\n        res.send('OK');\n        next();\n    }, 170);\n}\n\n\n///--- Tests\n\nbefore(function (callback) {\n    try {\n        SERVER = restify.createServer({\n            dtrace: helper.dtrace,\n            log: helper.getLog('server')\n        });\n\n        SERVER.use(restify.acceptParser(['json', 'text/plain']));\n        SERVER.use(restify.jsonp()); // Added for GH-778\n        SERVER.use(restify.dateParser());\n        SERVER.use(restify.authorizationParser());\n        SERVER.use(restify.queryParser());\n        SERVER.use(restify.bodyParser());\n\n        SERVER.get('/signed', sendSignature);\n        SERVER.get('/whitespace/:flavor', sendWhitespace);\n\n        SERVER.get('/json/boom', function (req, res, next) {\n            res.set('content-type', 'text/html');\n            res.send(200, '<html><head/><body/></html>');\n            next();\n        });\n        SERVER.del('/contentLengthAllowed', function (req, res, next) {\n            if (req.header('content-length')) {\n                res.send(200, 'Allowed');\n            } else {\n                res.send(200, 'Not allowed');\n            }\n            next();\n        });\n\n        SERVER.get('/json/:name', sendJson);\n        SERVER.head('/json/:name', sendJson);\n        SERVER.put('/json/:name', sendJson);\n        SERVER.post('/json/:name', sendJson);\n        SERVER.patch('/json/:name', sendJson);\n\n        SERVER.get('/str/request_timeout', requestThatTimesOut);\n        SERVER.del('/str/:name', sendText);\n        SERVER.get('/str/:name', sendText);\n        SERVER.head('/str/:name', sendText);\n        SERVER.put('/str/:name', sendText);\n        SERVER.post('/str/:name', sendText);\n        SERVER.patch('/str/:name', sendText);\n\n        SERVER.listen(PORT, '127.0.0.1', function () {\n            PORT = SERVER.address().port;\n\n            JSON_CLIENT = restify.createJsonClient({\n                url: 'http://127.0.0.1:' + PORT,\n                dtrace: helper.dtrace,\n                retry: false\n            });\n            STR_CLIENT = restify.createStringClient({\n                url: 'http://127.0.0.1:' + PORT,\n                dtrace: helper.dtrace,\n                retry: false\n            });\n            RAW_CLIENT = restify.createClient({\n                url: 'http://127.0.0.1:' + PORT,\n                dtrace: helper.dtrace,\n                retry: false,\n                headers: {\n                    accept: 'text/plain'\n                }\n            });\n\n            TIMEOUT_CLIENT = restify.createStringClient({\n                url: 'http://127.0.0.1:' + PORT,\n                requestTimeout: 150,\n                retry: false\n            });\n\n            process.nextTick(callback);\n        });\n    } catch (e) {\n        console.error(e.stack);\n        process.exit(1);\n    }\n});\n\n\nafter(function (callback) {\n    try {\n        JSON_CLIENT.close();\n        STR_CLIENT.close();\n        RAW_CLIENT.close();\n        SERVER.close(callback);\n    } catch (e) {\n        console.error(e.stack);\n        process.exit(1);\n    }\n});\n\ntest('GET json', function (t) {\n    JSON_CLIENT.get('/json/mcavage', function (err, req, res, obj) {\n        t.ifError(err);\n        t.ok(req);\n        t.ok(res);\n        t.deepEqual(obj, {hello: 'mcavage'});\n        t.end();\n    });\n});\n\ntest('GH-778 GET jsonp', function (t) {\n    // Using variables here to keep lines under 80 chars\n    var jsonpUrl = '/json/jsonp?callback=testCallback';\n    var expectedResult = 'typeof testCallback === \\'function\\' && ' +\n                         'testCallback({\"hello\":\"jsonp\"});';\n\n    JSON_CLIENT.get(jsonpUrl, function (err, req, res) {\n        t.ifError(err);\n        t.ok(req);\n        t.ok(res);\n        t.equal(res.body, expectedResult);\n        t.end();\n    });\n});\n\ntest('GH-388 GET json, but really HTML', function (t) {\n    JSON_CLIENT.get('/json/boom', function (err, req, res, obj) {\n        t.ifError(err);\n        t.ok(req);\n        t.ok(res);\n        t.deepEqual(obj, {});\n        t.end();\n    });\n});\n\n\ntest('GH-115 GET path with spaces', function (t) {\n    // As of node v0.11, this throws, since it's never valid HTTP\n    try {\n        JSON_CLIENT.get('/json/foo bar', function (err, req, res, obj) {\n            t.ok(err);\n            t.equal(err.code, 'ECONNRESET');\n            t.end();\n        });\n    } catch (err) {\n        t.ok(err);\n        t.equal(err.constructor, TypeError);\n        t.equal(err.message,\n            'Request path contains unescaped characters.');\n        t.end();\n    }\n});\n\n\ntest('Check error (404)', function (t) {\n    JSON_CLIENT.get('/' + uuid(), function (err, req, res, obj) {\n        t.ok(err);\n        t.ok(err.message);\n        t.equal(err.statusCode, 404);\n        t.ok(req);\n        t.ok(res);\n        t.ok(obj);\n        t.equal(obj.code, 'ResourceNotFound');\n        t.ok(obj.message);\n        t.end();\n    });\n});\n\n\ntest('HEAD json', function (t) {\n    JSON_CLIENT.head('/json/mcavage', function (err, req, res) {\n        t.ifError(err);\n        t.ok(req);\n        t.ok(res);\n        t.end();\n    });\n});\n\n\ntest('POST json', function (t) {\n    var data = { hello: 'foo' };\n    JSON_CLIENT.post('/json/mcavage', data, function (err, req, res, obj) {\n        t.ifError(err);\n        t.ok(req);\n        t.ok(res);\n        t.deepEqual(obj, {hello: 'foo'});\n        t.end();\n    });\n});\n\n\ntest('POST json empty body object', function (t) {\n    var data = {};\n    JSON_CLIENT.post('/json/mcavage', data, function (err, req, res, obj) {\n        t.ifError(err);\n        t.ok(req);\n        t.ok(res);\n        t.deepEqual(obj, {hello: 'mcavage'});\n        t.end();\n    });\n});\n\n\ntest('PUT json', function (t) {\n    var data = { hello: 'foo' };\n    JSON_CLIENT.put('/json/mcavage', data, function (err, req, res, obj) {\n        t.ifError(err);\n        t.ok(req);\n        t.ok(res);\n        t.deepEqual(obj, {hello: 'foo'});\n        t.end();\n    });\n});\n\n\ntest('PATCH json', function (t) {\n    var data = { hello: 'foo' };\n    JSON_CLIENT.patch('/json/mcavage', data, function (err, req, res, obj) {\n        t.ifError(err);\n        t.ok(req);\n        t.ok(res);\n        t.deepEqual(obj, {hello: 'foo'});\n        t.end();\n    });\n});\n\n\ntest('GET text', function (t) {\n    STR_CLIENT.get('/str/mcavage', function (err, req, res, data) {\n        t.ifError(err);\n        t.ok(req);\n        t.ok(res);\n        t.equal(res.body, data);\n        t.equal(data, 'hello mcavage');\n        t.end();\n    });\n});\n\ntest('GET PARTIAL text', function (t) {\n    var opts = {\n        path: '/str/mcavage',\n        headers: {\n            Range: 'bytes=0-10'\n        }\n    };\n    STR_CLIENT.get(opts, function (err, req, res, data) {\n        t.ifError(err);\n        t.ok(req);\n        t.ok(res);\n        t.equal(res.body, data);\n        t.equal(data, 'hello mcav');\n        t.end();\n    });\n});\n\n\ntest('HEAD text', function (t) {\n    STR_CLIENT.head('/str/mcavage', function (err, req, res) {\n        t.ifError(err);\n        t.ok(req);\n        t.ok(res);\n        t.end();\n    });\n});\n\ntest('Check error (404)', function (t) {\n    STR_CLIENT.get('/' + uuid(), function (err, req, res, message) {\n        t.ok(err);\n        t.ok(err.message);\n        t.equal(err.statusCode, 404);\n        t.ok(req);\n        t.ok(res);\n        t.ok(message);\n        t.end();\n    });\n});\n\n\ntest('POST text', function (t) {\n    var body = 'hello=foo';\n    STR_CLIENT.post('/str/mcavage', body, function (err, req, res, data) {\n        t.ifError(err);\n        t.ok(req);\n        t.ok(res);\n        t.equal(res.body, data);\n        t.equal(data, 'hello foo');\n        t.end();\n    });\n});\n\n\ntest('PATCH text', function (t) {\n    var body = 'hello=foo';\n    STR_CLIENT.patch('/str/mcavage', body, function (err, req, res, data) {\n        t.ifError(err);\n        t.ok(req);\n        t.ok(res);\n        t.equal(res.body, data);\n        t.equal(data, 'hello foo');\n        t.end();\n    });\n});\n\n\ntest('POST text (object)', function (t) {\n    var body = {hello: 'foo'};\n    STR_CLIENT.post('/str/mcavage', body, function (err, req, res, data) {\n        t.ifError(err);\n        t.ok(req);\n        t.ok(res);\n        t.equal(res.body, data);\n        t.equal(data, 'hello foo');\n        t.end();\n    });\n});\n\n\ntest('POST text empty body string', function (t) {\n    var body = '';\n    STR_CLIENT.post('/str/mcavage', body, function (err, req, res, data) {\n        t.ifError(err);\n        t.ok(req);\n        t.ok(res);\n        t.equal(res.body, data);\n        t.equal(data, 'hello mcavage');\n        t.end();\n    });\n});\n\n\ntest('POST text null body', function (t) {\n    var body = null;\n    STR_CLIENT.post('/str/mcavage', body, function (err, req, res, data) {\n        t.ifError(err);\n        t.ok(req);\n        t.ok(res);\n        t.equal(res.body, data);\n        t.equal(data, 'hello mcavage');\n        t.end();\n    });\n});\n\n\ntest('POST text empty body object', function (t) {\n    var body = {};\n    STR_CLIENT.post('/str/mcavage', body, function (err, req, res, data) {\n        t.ifError(err);\n        t.ok(req);\n        t.ok(res);\n        t.equal(res.body, data);\n        t.equal(data, 'hello mcavage');\n        t.end();\n    });\n});\n\n\ntest('PUT text', function (t) {\n    var body = 'hello=foo';\n    STR_CLIENT.put('/str/mcavage', body, function (err, req, res, data) {\n        t.ifError(err);\n        t.ok(req);\n        t.ok(res);\n        t.equal(res.body, data);\n        t.equal(data, 'hello foo');\n        t.end();\n    });\n});\n\ntest('PUT text empty body string', function (t) {\n    var body = '';\n    STR_CLIENT.put('/str/mcavage', body, function (err, req, res, data) {\n        t.ifError(err);\n        t.ok(req);\n        t.ok(res);\n        t.equal(res.body, data);\n        t.equal(data, 'hello mcavage');\n        t.end();\n    });\n});\n\ntest('DELETE text', function (t) {\n    STR_CLIENT.del('/str/mcavage', function (err, req, res) {\n        t.ifError(err);\n        t.ok(req);\n        t.ok(res);\n        t.end();\n    });\n});\n\ntest('DELETE allows content-length', function (t) {\n    var opts = {\n        path: '/contentLengthAllowed',\n        headers: {\n            'content-length': '0'\n        }\n    };\n\n    STR_CLIENT.del(opts, function (err, req, res, obj) {\n        t.ifError(err);\n        t.ok(req);\n        t.ok(res);\n        t.deepEqual(obj, 'Allowed');\n        t.end();\n    });\n});\n\ntest('GET raw', function (t) {\n    RAW_CLIENT.get('/str/mcavage', function (connectErr, req) {\n        t.ifError(connectErr);\n        t.ok(req);\n\n        req.on('result', function (err, res) {\n            t.ifError(err);\n            res.body = '';\n            res.setEncoding('utf8');\n            res.on('data', function (chunk) {\n                res.body += chunk;\n            });\n\n            res.on('end', function () {\n                t.equal(res.body, 'hello mcavage');\n                t.end();\n            });\n        });\n    });\n});\n\n\ntest('POST raw', function (t) {\n    var opts = {\n        path: '/str/mcavage',\n        headers: {\n            'content-type': 'application/x-www-form-urlencoded'\n        }\n    };\n    RAW_CLIENT.post(opts, function (connectErr, req) {\n        t.ifError(connectErr);\n\n        req.write('hello=snoopy');\n        req.end();\n\n        req.on('result', function (err, res) {\n            t.ifError(err);\n            res.body = '';\n            res.setEncoding('utf8');\n            res.on('data', function (chunk) {\n                res.body += chunk;\n            });\n\n            res.on('end', function () {\n                t.equal(res.body, 'hello snoopy');\n                t.end();\n            });\n        });\n    });\n});\n\ntest('PR-726 Enable {agent: false} option override per request', function (t) {\n    var opts = {\n        path: '/str/noagent',\n        agent: false\n    };\n    RAW_CLIENT.get(opts, function (err, req, res) {\n        t.ifError(err);\n        t.notStrictEqual(req.agent, RAW_CLIENT.agent,\n            'request should not use client agent');\n        t.end();\n    });\n});\n\ntest('GH-20 connectTimeout', function (t) {\n    var client = restify.createClient({\n        url: 'http://169.254.1.10',\n        type: 'http',\n        accept: 'text/plain',\n        connectTimeout: 100,\n        retry: false,\n        agent: false\n    });\n\n    client.get('/foo', function (err, req) {\n        t.ok(err);\n        t.equal(err.name, 'ConnectTimeoutError');\n        t.end();\n    });\n});\n\ntest('requestTimeout', function (t) {\n    TIMEOUT_CLIENT.get('/str/request_timeout', function (err, req, res, obj) {\n        t.ok(err);\n        t.equal(err.name, 'RequestTimeoutError');\n        t.end();\n    });\n});\n\ntest('GH-169 PUT json Content-MD5', function (t) {\n    var msg = {\n        '_id': '4ff71172bc148900000010a3',\n        'userId': '4f711b377579dbf65e000001',\n        'courseId': '4f69021bff338faffa000001',\n        'createdByUserId': '4f711b377579dbf65e000001',\n        'dateFrom': '2012-06-04',\n        'dateTo': '2012-09-30',\n        'notes': 'Rates do not include tax & are subject to change ' +\n            'without notice\\\\nRental Clubs are available for $30 ' +\n            'per set\\\\nAll major credit cards accepted',\n        'updatedAt': '2012-07-06T17:59:08.581Z',\n        'periods': [\n            {\n                'name': 'morning',\n                'weekdayWalking': 1500,\n                'weekdayCart': 3000,\n                'weekendWalking': 2000,\n                'weekendCart': 3500,\n                'timeFrom': 0,\n                'timeTo': 780,\n                '_id': '4ff71172bc148900000010a4'\n            },\n            {\n                'timeFrom': 780,\n                'name': 'twilight',\n                'timeTo': 900,\n                'weekdayWalking': 1500,\n                'weekdayCart': 2500,\n                'weekendWalking': 1500,\n                'weekendCart': 3000,\n                '_id': '4ff7276cbc148900000010f4'\n            },\n            {\n                'timeFrom': 900,\n                'name': 'super twilight',\n                'weekdayWalking': 1200,\n                'weekdayCart': 2000,\n                'weekendWalking': 1200,\n                'weekendCart': 2500,\n                'timeTo': 1439,\n                '_id': '4ff7276cbc148900000010f3'\n            }\n        ],\n        'holidays': [\n            {\n                'country': 'US',\n                'name': 'Flag Day',\n                'start': 1339657200000,\n                'end': 1339743600000,\n                'date': '2012-06-14'\n            },\n            {\n                'country': 'US / MX',\n                'name': 'Father\\'s Day, Día del Padre ' +\n                    '(Father\\'s Day)',\n                'start': 1340262000000,\n                'end': 1340348400000,\n                'date': '2012-06-21'\n            },\n            {\n                'country': 'US',\n                'name': 'Independence Day',\n                'start': 1341385200000,\n                'end': 1341471600000,\n                'date': '2012-07-04'\n            },\n            {\n                'country': 'US',\n                'name': 'Labor Day',\n                'start': 1347001200000,\n                'end': 1347087600000,\n                'date': '2012-09-07'\n            }\n        ],\n        'weekdaySunday': false,\n        'weekdaySaturday': false,\n        'weekdayFriday': false,\n        'weekdayThursday': true,\n        'weekdayWednesday': true,\n        'weekdayTuesday': true,\n        'weekdayMonday': true\n    };\n\n    JSON_CLIENT.put('/json/md5', msg, function (err, req, res, obj) {\n        t.ifError(err);\n        t.ok(req);\n        t.ok(res);\n        t.end();\n    });\n});\n\n\ntest('GH-203 GET json, body is whitespace', function (t) {\n    JSON_CLIENT.get('/whitespace/spaces', function (err, req, res, obj) {\n        t.ifError(err);\n        t.ok(req);\n        t.ok(res);\n        t.deepEqual(obj, {});\n        t.end();\n    });\n});\n\n\ntest('GH-203 GET json, body is tabs', function (t) {\n    JSON_CLIENT.get('/whitespace/tabs', function (err, req, res, obj) {\n        t.ifError(err);\n        t.ok(req);\n        t.ok(res);\n        t.deepEqual(obj, {});\n        t.end();\n    });\n});\n\n\ntest('don\\'t sign a request', function (t) {\n    var client = restify.createClient({\n        url: 'http://127.0.0.1:' + PORT,\n        type: 'string',\n        accept: 'text/plain',\n        headers: { 'Gusty-Winds': 'May Exist' },\n        agent: false\n    });\n    client.get('/signed', function (err, req, res, data) {\n        t.ifError(err);\n        t.ok(data);\n        t.equal(data, 'request NOT signed');\n        t.end();\n    });\n});\n\n\ntest('sign a request', function (t) {\n    var called = 0;\n    var signer = function sign(request) {\n        called++;\n        if (!request || !(request instanceof http.ClientRequest))\n            throw new Error('request must be an instance of ' +\n                'http.ClientRequest');\n        var gw = request.getHeader('Gusty-Winds');\n        if (!gw)\n            throw new Error('Gusty-Winds header was not ' +\n                'present in request');\n        request.setHeader('Awesome-Signature', 'Gusty Winds ' + gw);\n    };\n    var client = restify.createClient({\n        url: 'http://127.0.0.1:' + PORT,\n        type: 'string',\n        accept: 'text/plain',\n        signRequest: signer,\n        headers: { 'Gusty-Winds': 'May Exist' },\n        agent: false\n    });\n    client.get('/signed', function (err, req, res, data) {\n        t.ifError(err);\n        t.ok(data);\n        t.equal(called, 1);\n        t.equal(data, 'ok: Gusty Winds May Exist');\n        t.end();\n    });\n});\n\n/* BEGIN JSSTYLED */\ntest('secure client connection with timeout', function (t) {\n    var server = restify.createServer({\n        certificate: '-----BEGIN CERTIFICATE-----\\n' +\n            'MIICgzCCAewCCQDutc3iIPK88jANBgkqhkiG9w0BAQUFADCBhTELMAkGA1UEBhMC\\n' +\n            'VVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDVNhbiBGcmFuY2lzY28x\\n' +\n            'FTATBgNVBAoMDEpveWVudCwgSW5jLjEPMA0GA1UECwwGUG9ydGFsMSEwHwYJKoZI\\n' +\n            'hvcNAQkBFhJzdXBwb3J0QGpveWVudC5jb20wHhcNMTMxMjAyMjI0NjU3WhcNMTQx\\n' +\n            'MjAyMjI0NjU3WjCBhTELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWEx\\n' +\n            'FjAUBgNVBAcMDVNhbiBGcmFuY2lzY28xFTATBgNVBAoMDEpveWVudCwgSW5jLjEP\\n' +\n            'MA0GA1UECwwGUG9ydGFsMSEwHwYJKoZIhvcNAQkBFhJzdXBwb3J0QGpveWVudC5j\\n' +\n            'b20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBANAWr+pYW+AEP4vC48fByPa2\\n' +\n            'Fw0h8FSSgVO2zHyibH9S6nSFaNSLeHRofFdK+cD7IRt4A6jxp57IItNwjFiNNMjF\\n' +\n            'CS5NXKIdPE6HMlb1X7ae+/nN3xRy5321Bi8yQZI6p6b9ATwP8mGBcvx4ta165YFt\\n' +\n            'M2FmaYWLSNbHIwCxTQMJAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAXFT1q/uB3/fg\\n' +\n            'Iq7iZ6R7q7tBYtd9ttQKp8by8jVToIXP4jUEWZ7vE9TZ1/Wm8ZHxlAPjZtN+rsmS\\n' +\n            'LvgDV22T/s0LgSrdbB/rpYgjsJarlAGfbUYQ6gZKvCMSiZI7oJfl89HDT3PgCtSx\\n' +\n            'RqHcNabt4hoSccUuACJ1FXkszJ312fA=\\n' +\n            '-----END CERTIFICATE-----',\n        key: '-----BEGIN RSA PRIVATE KEY-----\\n' +\n            'MIICXAIBAAKBgQDQFq/qWFvgBD+LwuPHwcj2thcNIfBUkoFTtsx8omx/Uup0hWjU\\n' +\n            'i3h0aHxXSvnA+yEbeAOo8aeeyCLTcIxYjTTIxQkuTVyiHTxOhzJW9V+2nvv5zd8U\\n' +\n            'cud9tQYvMkGSOqem/QE8D/JhgXL8eLWteuWBbTNhZmmFi0jWxyMAsU0DCQIDAQAB\\n' +\n            'AoGBAJvz9OHAWRMae/mmFYqXfKMSM1J/Vhw8NLrl7HmYTZJbNSYg+kEZSiyMRmwx\\n' +\n            '3963F8f7eVq7yfFhc2BeIIEZSy23J9QJCqVIqzl6m2URP4+Dw7ZS2iWIsiPyy+L8\\n' +\n            'v8CXPQhRGouOXxU6h7WHpfw+Xy+WPVmIVARMi4UpmmOE52eBAkEA6gui4nD841Ds\\n' +\n            'UEQDMuxNpCf+B20BWKkt8PNODY1HS4rBVCh81oMbaV7VDSabZM7Ba4wrmTAhb1Sc\\n' +\n            'm7bc/YOb0QJBAOObuVTMCbJ7WZhAPHVYhGS5ptuL9fkktj2BPDcf/3KyuDsM6oVw\\n' +\n            'Rs9kUfQrSV+w7YALqxWzNCUgzq+qLYPaGbkCQF5hKuIdph0UuPb1NkUGvZiA+BOO\\n' +\n            'hYh3UKtlsggM/L8dyTBi01S9sgQf1dJjyy4vohf4gmxX2GPIvw6cAynINMECQEjc\\n' +\n            '7TOMLf6JJmFrDu+x6pAkLppR7+hWLFD8Mj6ja69YL0oYFGurSb/Sqbm0scSEa0N2\\n' +\n            'eMp1l9fa7M+ndvKiu2ECQGv4W2+yqlbD3Q3Dr14hiWaiYss5350Ohr5HiZZw2L3i\\n' +\n            's35vQZaHqRxUVZjOi6/MTCZmqvg/RpaVQYHiJHvxGzw=\\n' +\n            '-----END RSA PRIVATE KEY-----'\n    });\n    server.get('/ping', function (req, res) {\n        res.end('pong');\n    });\n    server.listen(8443);\n\n    var client = restify.createStringClient({url: 'https://127.0.0.1:8443', connectTimeout: 2000, rejectUnauthorized: false});\n    var timeout = setTimeout(function () {\n        t.ok(false, 'timed out');\n        t.end();\n    }, 2050);\n\n    client.get('/ping', function (err, req, res, body) {\n        clearTimeout(timeout);\n        t.equal(body, 'pong');\n        client.close();\n        server.close();\n        t.end();\n    });\n});\n/* END JSSTYLED */\n\n\ntest('create JSON client with url instead of opts', function (t) {\n    var client = restify.createJsonClient('http://127.0.0.1:' + PORT);\n    client.agent = false;\n\n    client.get('/json/mcavage', function (err, req, res, obj) {\n        t.deepEqual(obj, {hello: 'mcavage'});\n        t.end();\n    });\n});\n\n\ntest('create string client with url instead of opts', function (t) {\n    var client = restify.createStringClient('http://127.0.0.1:' + PORT);\n    client.agent = false;\n\n    client.get('/str/mcavage', function (err, req, res, data) {\n        t.equal(data, 'hello mcavage');\n        t.end();\n    });\n});\n\n\ntest('create http client with url instead of opts', function (t) {\n    var client = restify.createHttpClient('http://127.0.0.1:' + PORT);\n    client.agent = false;\n\n    client.get('/str/mcavage', function (err, req) {\n        req.on('result', function (err2, res) {\n            res.body = '';\n            res.setEncoding('utf8');\n            res.on('data', function (chunk) {\n                res.body += chunk;\n            });\n\n            res.on('end', function () {\n                t.equal(res.body, '\"hello mcavage\"');\n                t.end();\n            });\n        });\n    });\n});\n\n\ntest('create base client with url instead of opts', function (t) {\n    var client = restify.createClient('http://127.0.0.1:' + PORT);\n    client.agent = false;\n\n    client.get('/str/mcavage', function (err, req) {\n        req.on('result', function (err2, res) {\n            res.body = '';\n            res.setEncoding('utf8');\n            res.on('data', function (chunk) {\n                res.body += chunk;\n            });\n\n            res.on('end', function () {\n                t.equal(res.body, '\"hello mcavage\"');\n                t.end();\n            });\n        });\n    });\n});","blocks":{"total":120,"seen":110,"missing":10,"percentage":0.9166666666666666}},"hash":"c4a23877ec2fdd807f14f4866702c0a6"},"/Users/yunong/workspace/node-restify/lib/index.js":{"stats":{"percentage":0.9672131147540983,"lines":[{"lineno":59},{"lineno":72},{"lineno":85},{"lineno":147},{"lineno":150},{"lineno":153}],"missing":6,"seen":177,"total":183,"coverage":{"59":{"partial":true,"source":"    options = options ? shallowCopy(options) : {};","missing":[{"startCol":47,"endCol":49}]},"72":{"partial":true,"source":"    options = options ? shallowCopy(options) : {};","missing":[{"startCol":47,"endCol":49}]},"85":{"partial":true,"source":"    options = options ? shallowCopy(options) : {};","missing":[{"startCol":47,"endCol":49}]},"147":{"partial":false,"source":"        return (require('./clients').HttpClient);","missing":[{"startCol":8,"endCol":49},{"startCol":16,"endCol":36}]},"150":{"partial":false,"source":"        return (require('./clients').JsonClient);","missing":[{"startCol":8,"endCol":49},{"startCol":16,"endCol":36}]},"153":{"partial":false,"source":"        return (require('./clients').StringClient);","missing":[{"startCol":8,"endCol":51},{"startCol":16,"endCol":36}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n//\n// Restify supports both a client and server API, and in the essence of not\n// loading the kitchen sink on clients, the exports here is chunked up into\n// client and server; note clients will have to opt in by setting the env\n// var \"RESTIFY_CLIENT_ONLY\", but if you're in that boat, it's not hard to do,\n// and enables much faster load times\n//\n\nvar shallowCopy = require('./utils').shallowCopy;\n\n\nfunction createClient(options) {\n    if (typeof (options) === 'string') {\n        options = {\n            url: options\n        };\n    }\n\n    var assert = require('assert-plus');\n    var bunyan = require('./bunyan_helper');\n    var clients = require('./clients');\n\n    assert.object(options, 'options');\n\n    var client;\n    var opts = shallowCopy(options);\n    opts.agent = options.agent;\n    opts.name = opts.name || 'restify';\n    opts.type = opts.type || 'application/octet-stream';\n    opts.log = opts.log || bunyan.createLogger(opts.name);\n\n    switch (opts.type) {\n        case 'json':\n            client = new clients.JsonClient(opts);\n            break;\n\n        case 'string':\n            client = new clients.StringClient(opts);\n            break;\n\n        case 'http':\n        default:\n            client = new clients.HttpClient(opts);\n            break;\n    }\n\n    return (client);\n}\n\n\nfunction createJsonClient(options) {\n    if (typeof (options) === 'string') {\n        options = {\n            url: options\n        };\n    }\n\n    options = options ? shallowCopy(options) : {};\n    options.type = 'json';\n    return (createClient(options));\n}\n\n\nfunction createStringClient(options) {\n    if (typeof (options) === 'string') {\n        options = {\n            url: options\n        };\n    }\n\n    options = options ? shallowCopy(options) : {};\n    options.type = 'string';\n    return (createClient(options));\n}\n\n\nfunction createHttpClient(options) {\n    if (typeof (options) === 'string') {\n        options = {\n            url: options\n        };\n    }\n\n    options = options ? shallowCopy(options) : {};\n    options.type = 'http';\n    return (createClient(options));\n}\n\n\nfunction createServer(options) {\n    var bunyan = require('./bunyan_helper');\n    var InternalError = require('./errors').InternalError;\n    var Router = require('./router');\n    var Server = require('./server');\n\n    var opts = shallowCopy(options || {});\n    var server;\n\n    opts.name = opts.name || 'restify';\n    opts.log = opts.log || bunyan.createLogger(opts.name);\n    opts.router = opts.router || new Router(opts);\n\n    server = new Server(opts);\n    server.on('uncaughtException', function (req, res, route, e) {\n        if (this.listeners('uncaughtException').length > 1 ||\n            res.headersSent) {\n            return (false);\n        }\n\n        res.send(new InternalError(e, e.message || 'unexpected error'));\n        return (true);\n    });\n\n    return (server);\n}\n\n\n/**\n * Returns a string representation of a URL pattern , with its\n * parameters filled in by the passed hash.\n *\n * If a key is not found in the hash for a param, it is left alone.\n *\n * @param {Object} a hash of parameter names to values for substitution.\n */\nfunction realizeUrl(pattern, params) {\n    var p = pattern.replace(/\\/:([^/]+)/g, function (match, k) {\n        return (params.hasOwnProperty(k) ? '/' + params[k] : match);\n    });\n\n\n    return (require('./utils').sanitizePath(p));\n}\n\n\n///--- Exports\n\nmodule.exports = {\n    // Client API\n    createClient: createClient,\n    createJsonClient: createJsonClient,\n    createJSONClient: createJsonClient,\n    createStringClient: createStringClient,\n    createHttpClient: createHttpClient,\n    get HttpClient() {\n        return (require('./clients').HttpClient);\n    },\n    get JsonClient() {\n        return (require('./clients').JsonClient);\n    },\n    get StringClient() {\n        return (require('./clients').StringClient);\n    },\n\n    // Miscellaneous API\n    get bunyan() {\n        return (require('./bunyan_helper'));\n    },\n\n    errors: {}\n\n};\n\nvar errors = require('./errors');\nObject.keys(errors).forEach(function (k) {\n    module.exports.errors[k] = errors[k];\n    module.exports[k] = errors[k];\n});\n\nif (!process.env.RESTIFY_CLIENT_ONLY) {\n\n    module.exports.createServer = createServer;\n    module.exports.httpDate = require('./http_date');\n    module.exports.realizeUrl = realizeUrl;\n    module.exports.formatters = require('./formatters');\n    module.exports.plugins = {};\n    var plugins = require('./plugins');\n    Object.keys(plugins).forEach(function (k) {\n        module.exports.plugins[k] = plugins[k];\n        module.exports[k] = plugins[k];\n    });\n}","blocks":{"total":23,"seen":20,"missing":3,"percentage":0.8695652173913043}},"hash":"d735d332d755ef5611eade857d3cdc8c"},"/Users/yunong/workspace/node-restify/lib/utils.js":{"stats":{"percentage":0.9347826086956522,"lines":[{"lineno":19},{"lineno":20},{"lineno":31}],"missing":3,"seen":43,"total":46,"coverage":{"19":{"partial":true,"source":"    if (path.lastIndexOf('/') === (path.length - 1) && path.length > 1)","missing":[{"startCol":55,"endCol":70}]},"20":{"partial":false,"source":"        path = path.substr(0, path.length - 1);","missing":[{"startCol":8,"endCol":47},{"startCol":15,"endCol":46},{"startCol":30,"endCol":45}]},"31":{"partial":false,"source":"        return (obj);","missing":[{"startCol":8,"endCol":21}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\n\n\n/**\n * Cleans up sloppy URL paths, like /foo////bar/// to /foo/bar.\n *\n * @param {String} path the HTTP resource path.\n * @return {String} Cleaned up form of path.\n */\nfunction sanitizePath(path) {\n    assert.ok(path);\n\n    // Be nice like apache and strip out any //my//foo//bar///blah\n    path = path.replace(/\\/\\/+/g, '/');\n\n    // Kill a trailing '/'\n    if (path.lastIndexOf('/') === (path.length - 1) && path.length > 1)\n        path = path.substr(0, path.length - 1);\n\n    return (path);\n}\n\n\n/**\n * Return a shallow copy of the given object;\n */\nfunction shallowCopy(obj) {\n    if (!obj) {\n        return (obj);\n    }\n    var copy = {};\n    Object.keys(obj).forEach(function (k) {\n        copy[k] = obj[k];\n    });\n    return (copy);\n}\n\n\n///--- Exports\n\nmodule.exports = {\n    sanitizePath: sanitizePath,\n    shallowCopy: shallowCopy\n};","blocks":{"total":5,"seen":3,"missing":2,"percentage":0.6}},"hash":"0f77b881b529607b3a306d8b9ff68d45"},"/Users/yunong/workspace/node-restify/lib/errors/index.js":{"stats":{"percentage":1,"lines":[],"missing":0,"seen":16,"total":16,"coverage":{},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar httpErrors = require('./http_error');\nvar restErrors = require('./rest_error');\n\n\nmodule.exports = {};\n\nObject.keys(httpErrors).forEach(function (k) {\n    module.exports[k] = httpErrors[k];\n});\n\n// Note some of the RestErrors overwrite plain HTTP errors.\nObject.keys(restErrors).forEach(function (k) {\n    module.exports[k] = restErrors[k];\n});","blocks":{"total":2,"seen":2,"missing":0,"percentage":1}},"hash":"9546762c9fe57f0be64d724d66dbe3d4"},"/Users/yunong/workspace/node-restify/lib/errors/http_error.js":{"stats":{"percentage":0.9765625,"lines":[{"lineno":106},{"lineno":107},{"lineno":113}],"missing":3,"seen":125,"total":128,"coverage":{"106":{"partial":false,"source":"            opts.cause = cause;","missing":[{"startCol":12,"endCol":31}]},"107":{"partial":false,"source":"            opts.constructorOpt = arguments.callee;","missing":[{"startCol":12,"endCol":51}]},"113":{"partial":true,"source":"            opts.statusCode = cause.statusCode || code;","missing":[{"startCol":50,"endCol":54}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar http = require('http');\nvar util = require('util');\n\nvar assert = require('assert-plus');\nvar WError = require('verror').WError;\n\n\n///--- Globals\n\nvar slice = Function.prototype.call.bind(Array.prototype.slice);\n\n\n///--- Helpers\n\nfunction codeToErrorName(code) {\n    code = parseInt(code, 10);\n    var status = http.STATUS_CODES[code];\n    if (!status)\n        return (false);\n\n\n    var pieces = status.split(/\\s+/);\n    var str = '';\n    pieces.forEach(function (s) {\n        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();\n    });\n\n    str = str.replace(/\\W+/g, '');\n    if (!/\\w+Error$/.test(str))\n        str += 'Error';\n\n    return (str);\n}\n\n\n///--- Error Base class\n\nfunction HttpError(options) {\n    assert.object(options, 'options');\n\n    options.constructorOpt = options.constructorOpt || HttpError;\n    WError.apply(this, arguments);\n\n    var self = this;\n    var code = parseInt((options.statusCode || 500), 10);\n    this.statusCode = code;\n    this.body = options.body || {\n        code: codeToErrorName(code),\n        message: options.message || self.message\n    };\n    this.message = options.message || self.message;\n}\nutil.inherits(HttpError, WError);\n\n\n///--- Exports\n\nmodule.exports = {\n\n    HttpError: HttpError,\n\n    codeToHttpError: function codeToHttpError(code, message, body) {\n        var err;\n        var name = codeToErrorName(code);\n\n        if (!name) {\n            err = new HttpError({\n                statusCode: code,\n                message: message,\n                body: body\n            });\n            err.name = 'Http' + code + 'Error';\n        } else {\n            err = new module.exports[name]({\n                body: body,\n                message: message,\n                constructorOpt: codeToHttpError,\n                statusCode: code\n            });\n        }\n\n        return (err);\n    }\n\n};\n\n\n// Export all the 4xx and 5xx HTTP Status codes as Errors\nvar codes = Object.keys(http.STATUS_CODES);\n\ncodes.forEach(function (code) {\n    if (code < 400)\n        return;\n\n    var name = codeToErrorName(code);\n\n    module.exports[name] = function (cause, message) {\n        var index = 1;\n        var opts = {\n            statusCode: code\n        };\n\n        if (cause && cause instanceof Error) {\n            opts.cause = cause;\n            opts.constructorOpt = arguments.callee;\n        } else if (typeof (cause) === 'object') {\n            opts.body = cause.body;\n            opts.cause = cause.cause;\n            opts.constructorOpt = cause.constructorOpt;\n            opts.message = cause.message;\n            opts.statusCode = cause.statusCode || code;\n        } else {\n            opts.constructorOpt = arguments.callee;\n            index = 0;\n        }\n\n        var args = slice(arguments, index);\n        args.unshift(opts);\n        HttpError.apply(this, args);\n    };\n    util.inherits(module.exports[name], HttpError);\n\n    module.exports[name].displayName =\n        module.exports[name].prototype.name =\n            name;\n});","blocks":{"total":14,"seen":13,"missing":1,"percentage":0.9285714285714286}},"hash":"155fd1dccb9bceaeaf2c5c58c0c56a95"},"/Users/yunong/workspace/node-restify/lib/errors/rest_error.js":{"stats":{"percentage":0.9565217391304348,"lines":[{"lineno":76},{"lineno":77},{"lineno":78},{"lineno":79}],"missing":4,"seen":88,"total":92,"coverage":{"76":{"partial":false,"source":"            opts.body = cause.body;","missing":[{"startCol":12,"endCol":35}]},"77":{"partial":false,"source":"            opts.cause = cause.cause;","missing":[{"startCol":12,"endCol":37}]},"78":{"partial":false,"source":"            opts.message = cause.message;","missing":[{"startCol":12,"endCol":41}]},"79":{"partial":false,"source":"            opts.statusCode = cause.statusCode || CODES[k];","missing":[{"startCol":12,"endCol":59},{"startCol":30,"endCol":58}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar util = require('util');\n\nvar assert = require('assert-plus');\n\nvar httpErrors = require('./http_error');\n\n\n///--- Globals\n\nvar slice = Function.prototype.call.bind(Array.prototype.slice);\n\nvar HttpError = httpErrors.HttpError;\n\nvar CODES = {\n    BadDigest: 400,\n    BadMethod: 405,\n    Internal: 500, // Don't have InternalErrorError\n    InvalidArgument: 409,\n    InvalidContent: 400,\n    InvalidCredentials: 401,\n    InvalidHeader: 400,\n    InvalidVersion: 400,\n    MissingParameter: 409,\n    NotAuthorized: 403,\n    PreconditionFailed: 412,\n    RequestExpired: 400,\n    RequestThrottled: 429,\n    ResourceNotFound: 404,\n    WrongAccept: 406\n};\n\n\n///--- API\n\nfunction RestError(options) {\n    assert.object(options, 'options');\n\n    options.constructorOpt = options.constructorOpt || RestError;\n    HttpError.apply(this, arguments);\n\n    var self = this;\n    this.restCode = options.restCode || 'Error';\n    this.body = options.body || {\n        code: self.restCode,\n        message: options.message || self.message\n    };\n}\nutil.inherits(RestError, HttpError);\n\n\n///--- Exports\n\nmodule.exports = {\n    RestError: RestError\n};\n\nObject.keys(CODES).forEach(function (k) {\n    var name = k;\n    if (!/\\w+Error$/.test(name))\n        name += 'Error';\n\n    module.exports[name] = function (cause, message) {\n        var index = 1;\n        var opts = {\n            restCode: (k === 'Internal' ? 'InternalError' : k),\n            statusCode: CODES[k]\n        };\n\n        opts.constructorOpt = arguments.callee;\n\n        if (cause && cause instanceof Error) {\n            opts.cause = cause;\n        } else if (typeof (cause) === 'object') {\n            opts.body = cause.body;\n            opts.cause = cause.cause;\n            opts.message = cause.message;\n            opts.statusCode = cause.statusCode || CODES[k];\n        } else {\n            index = 0;\n        }\n\n        var args = slice(arguments, index);\n        args.unshift(opts);\n        RestError.apply(this, args);\n    };\n    util.inherits(module.exports[name], RestError);\n    module.exports[name].displayName =\n        module.exports[name].prototype.name =\n            name;\n});","blocks":{"total":7,"seen":6,"missing":1,"percentage":0.8571428571428571}},"hash":"b30ca7991b03fd98bd582fa25cb84262"},"/Users/yunong/workspace/node-restify/lib/http_date.js":{"stats":{"percentage":1,"lines":[],"missing":0,"seen":8,"total":8,"coverage":{},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nmodule.exports = function httpDate(now) {\n    if (!now)\n        now = new Date();\n\n    return (now.toUTCString());\n};","blocks":{"total":2,"seen":2,"missing":0,"percentage":1}},"hash":"32deda8b8c97fbf3cd9d95b339ca2ece"},"/Users/yunong/workspace/node-restify/lib/formatters/index.js":{"stats":{"percentage":1,"lines":[],"missing":0,"seen":11,"total":11,"coverage":{},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\n\n///--- Exports\n\nmodule.exports = {\n    'application/javascript; q=0.1': require('./jsonp'),\n    'application/json; q=0.4': require('./json'),\n    'text/plain; q=0.3': require('./text'),\n    'application/octet-stream; q=0.2': require('./binary')\n};","blocks":{"total":0,"seen":0,"missing":0,"percentage":1}},"hash":"0c9118eefa9a5a0346d28ad079ebd493"},"/Users/yunong/workspace/node-restify/lib/formatters/jsonp.js":{"stats":{"percentage":0.8157894736842105,"lines":[{"lineno":8},{"lineno":9},{"lineno":13},{"lineno":14},{"lineno":16},{"lineno":23},{"lineno":31}],"missing":7,"seen":31,"total":38,"coverage":{"8":{"partial":false,"source":"        res.setHeader('Content-Length', 0);","missing":[{"startCol":8,"endCol":42}]},"9":{"partial":false,"source":"        return (null);","missing":[{"startCol":8,"endCol":22}]},"13":{"partial":false,"source":"        if ((body.restCode || body.httpCode) && body.body) {","missing":[{"startCol":12,"endCol":57},{"startCol":13,"endCol":43}]},"14":{"partial":false,"source":"            body = body.body;","missing":[{"startCol":12,"endCol":29}]},"16":{"partial":false,"source":"            body = {","missing":[{}]},"17":{"partial":false,"source":"                message: body.message","missing":[{}]},"18":{"partial":false,"source":"            };","missing":[{}]},"23":{"partial":false,"source":"        body = body.toString('base64');","missing":[{"startCol":8,"endCol":39},{"startCol":15,"endCol":38}]},"31":{"partial":false,"source":"        data = JSON.stringify(body);","missing":[{"startCol":8,"endCol":36},{"startCol":15,"endCol":35}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\n\n///--- Exports\n\nfunction formatJSONP(req, res, body) {\n    if (!body) {\n        res.setHeader('Content-Length', 0);\n        return (null);\n    }\n\n    if (body instanceof Error) {\n        if ((body.restCode || body.httpCode) && body.body) {\n            body = body.body;\n        } else {\n            body = {\n                message: body.message\n            };\n        }\n    }\n\n    if (Buffer.isBuffer(body))\n        body = body.toString('base64');\n\n    var cb = req.query.callback || req.query.jsonp;\n    var data;\n    if (cb) {\n        data = 'typeof ' + cb + ' === \\'function\\' && ' +\n                cb + '(' + JSON.stringify(body) + ');';\n    } else {\n        data = JSON.stringify(body);\n    }\n\n    res.setHeader('Content-Length', Buffer.byteLength(data));\n    return (data);\n}\n\nmodule.exports = formatJSONP;","blocks":{"total":8,"seen":2,"missing":6,"percentage":0.25}},"hash":"192d41d99a7b9eecd296239c960f54f4"},"/Users/yunong/workspace/node-restify/lib/formatters/json.js":{"stats":{"percentage":0.9655172413793104,"lines":[{"lineno":20}],"missing":1,"seen":28,"total":29,"coverage":{"20":{"partial":false,"source":"        body = body.toString('base64');","missing":[{"startCol":8,"endCol":39},{"startCol":15,"endCol":38}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\n\n///--- Exports\n\nfunction formatJSON(req, res, body) {\n    if (body instanceof Error) {\n        // snoop for RestError or HttpError, but don't rely on\n        // instanceof\n        res.statusCode = body.statusCode || 500;\n\n        if (body.body) {\n            body = body.body;\n        } else {\n            body = {\n                message: body.message\n            };\n        }\n    } else if (Buffer.isBuffer(body)) {\n        body = body.toString('base64');\n    }\n\n    var data = JSON.stringify(body);\n    res.setHeader('Content-Length', Buffer.byteLength(data));\n\n    return (data);\n}\n\nmodule.exports = formatJSON;","blocks":{"total":5,"seen":4,"missing":1,"percentage":0.8}},"hash":"ad8952f6f8fed0f876b962b3dc5201ae"},"/Users/yunong/workspace/node-restify/lib/formatters/text.js":{"stats":{"percentage":1,"lines":[],"missing":0,"seen":20,"total":20,"coverage":{},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\n\n///--- Exports\n\nfunction formatText(req, res, body) {\n    if (body instanceof Error) {\n        res.statusCode = body.statusCode || 500;\n        body = body.message;\n    } else if (typeof (body) === 'object') {\n        body = JSON.stringify(body);\n    } else {\n        body = body.toString();\n    }\n\n    res.setHeader('Content-Length', Buffer.byteLength(body));\n    return (body);\n}\n\nmodule.exports = formatText;","blocks":{"total":4,"seen":4,"missing":0,"percentage":1}},"hash":"84456786906c6a21ee53ef938eff4d6e"},"/Users/yunong/workspace/node-restify/lib/formatters/binary.js":{"stats":{"percentage":0.9411764705882353,"lines":[{"lineno":8}],"missing":1,"seen":16,"total":17,"coverage":{"8":{"partial":false,"source":"        res.statusCode = body.statusCode || 500;","missing":[{"startCol":8,"endCol":48},{"startCol":25,"endCol":47}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\n\n///--- Exports\n\nfunction formatBinary(req, res, body) {\n    if (body instanceof Error)\n        res.statusCode = body.statusCode || 500;\n\n    if (!Buffer.isBuffer(body))\n        body = new Buffer(body.toString());\n\n    res.setHeader('Content-Length', body.length);\n    return (body);\n}\n\nmodule.exports = formatBinary;","blocks":{"total":3,"seen":2,"missing":1,"percentage":0.6666666666666666}},"hash":"7ac1626ca5604b3417eb7fa58bd1cfcb"},"/Users/yunong/workspace/node-restify/lib/plugins/index.js":{"stats":{"percentage":1,"lines":[],"missing":0,"seen":30,"total":30,"coverage":{},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\n///--- Exports\n\nmodule.exports = {\n    acceptParser: require('./accept'),\n    auditLogger: require('./audit'),\n    authorizationParser: require('./authorization'),\n    bodyParser: require('./body_parser'),\n    conditionalRequest: require('./conditional_request'),\n    CORS: require('./cors'),\n    dateParser: require('./date'),\n    jsonp: require('./jsonp'),\n    urlEncodedBodyParser: require('./form_body_parser'),\n    requestLogger: require('./bunyan'),\n    gzipResponse: require('./gzip'),\n    fullResponse: require('./full_response'),\n    jsonBodyParser: require('./json_body_parser'),\n    multipartBodyParser: require('./multipart_parser'),\n    queryParser: require('./query'),\n    sanitizePath: require('./pre/pre_path'),\n    serveStatic: require('./static'),\n    throttle: require('./throttle'),\n\n    pre: {\n        pause: require('./pre/pause'),\n        sanitizePath: require('./pre/pre_path'),\n        userAgentConnection: require('./pre/user_agent')\n    }\n};","blocks":{"total":0,"seen":0,"missing":0,"percentage":1}},"hash":"2b9b4c9ff96c78109f735fc8f281e663"},"/Users/yunong/workspace/node-restify/lib/plugins/accept.js":{"stats":{"percentage":0.9791666666666666,"lines":[{"lineno":22}],"missing":1,"seen":47,"total":48,"coverage":{"22":{"partial":false,"source":"        acceptable = [acceptable];","missing":[{"startCol":8,"endCol":34}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar mime = require('mime');\n\nvar NotAcceptableError = require('../errors').NotAcceptableError;\n\n\n/**\n * Returns a plugin that will check the client's Accept header can be handled\n * by this server.\n *\n * Note you can get the set of types allowed from a restify server by doing\n * `server.acceptable`.\n *\n * @param {String} array of accept types.\n * @return {Function} restify handler.\n * @throws {TypeError} on bad input\n */\nfunction acceptParser(acceptable) {\n    if (!Array.isArray(acceptable))\n        acceptable = [acceptable];\n    assert.arrayOfString(acceptable, 'acceptable');\n\n    acceptable = acceptable.filter(function (a) {\n        return (a);\n    }).map(function (a) {\n            return ((a.indexOf('/') === -1) ? mime.lookup(a) : a);\n        }).filter(function (a) {\n            return (a);\n        });\n\n    var e = new NotAcceptableError('Server accepts: ' + acceptable.join());\n\n    function parseAccept(req, res, next) {\n        if (req.accepts(acceptable)) {\n            next();\n            return;\n        }\n\n        res.json(e);\n        next(false);\n    }\n\n    return (parseAccept);\n}\n\nmodule.exports = acceptParser;","blocks":{"total":7,"seen":6,"missing":1,"percentage":0.8571428571428571}},"hash":"dc081a2def28e52825354780ed3bb605"},"/Users/yunong/workspace/node-restify/lib/plugins/audit.js":{"stats":{"percentage":0.9363636363636364,"lines":[{"lineno":28},{"lineno":37},{"lineno":54},{"lineno":60},{"lineno":65},{"lineno":66},{"lineno":68}],"missing":7,"seen":103,"total":110,"coverage":{"28":{"partial":false,"source":"        errSerializer = options.log.serializers.err;","missing":[{"startCol":8,"endCol":52}]},"37":{"partial":false,"source":"                    return (false);","missing":[{"startCol":20,"endCol":35}]},"54":{"partial":true,"source":"                        req.body : undefined,","missing":[{"startCol":24,"endCol":32}]},"60":{"partial":false,"source":"                    return (false);","missing":[{"startCol":20,"endCol":35}]},"65":{"partial":false,"source":"                    if (res._body instanceof HttpError) {","missing":[{"startCol":24,"endCol":54},{"startCol":45,"endCol":54}]},"66":{"partial":false,"source":"                        body = res._body.body;","missing":[{"startCol":24,"endCol":46}]},"68":{"partial":false,"source":"                        body = res._body;","missing":[{"startCol":24,"endCol":41}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar bunyan = require('bunyan');\n\nvar HttpError = require('../errors').HttpError;\n\n\n///--- API\n\n/**\n * Returns a Bunyan audit logger suitable to be used in a server.on('after')\n * event.  I.e.:\n *\n * server.on('after', restify.auditLogger({ log: myAuditStream }));\n *\n * This logs at the INFO level.\n *\n * @param {Object} options at least a bunyan logger (log).\n * @return {Function} to be used in server.after.\n */\nfunction auditLogger(options) {\n    assert.object(options, 'options');\n    assert.object(options.log, 'options.log');\n    var errSerializer = bunyan.stdSerializers.err;\n\n    if (options.log.serializers && options.log.serializers.err) {\n        errSerializer = options.log.serializers.err;\n    }\n\n    var log = options.log.child({\n        audit: true,\n        serializers: {\n            err: errSerializer,\n            req: function auditRequestSerializer(req) {\n                if (!req)\n                    return (false);\n\n                var timers = {};\n                (req.timers || []).forEach(function (time) {\n                    var t = time.time;\n                    var _t = Math.floor((1000000 * t[0]) +\n                        (t[1] / 1000));\n                    timers[time.name] = _t;\n                });\n                return ({\n                    method: req.method,\n                    url: req.url,\n                    headers: req.headers,\n                    httpVersion: req.httpVersion,\n                    trailers: req.trailers,\n                    version: req.version(),\n                    body: options.body === true ?\n                        req.body : undefined,\n                    timers: timers\n                });\n            },\n            res: function auditResponseSerializer(res) {\n                if (!res)\n                    return (false);\n\n\n                var body;\n                if (options.body === true) {\n                    if (res._body instanceof HttpError) {\n                        body = res._body.body;\n                    } else {\n                        body = res._body;\n                    }\n                }\n\n                return ({\n                    statusCode: res.statusCode,\n                    headers: res._headers,\n                    trailer: res._trailer || false,\n                    body: body\n                });\n            }\n        }\n    });\n\n    function audit(req, res, route, err) {\n        var latency = res.get('Response-Time');\n        if (typeof (latency) !== 'number')\n            latency = Date.now() - req._time;\n\n        var obj = {\n            remoteAddress: req.connection.remoteAddress,\n            remotePort: req.connection.remotePort,\n            req_id: req.getId(),\n            req: req,\n            res: res,\n            err: err,\n            latency: latency,\n            secure: req.secure,\n            _audit: true\n        };\n\n        log.info(obj, 'handled: %d', res.statusCode);\n\n        return (true);\n    }\n\n    return (audit);\n}\n\n\n///-- Exports\n\nmodule.exports = auditLogger;","blocks":{"total":12,"seen":6,"missing":6,"percentage":0.5}},"hash":"638310b7593b5f38b6a999cd8dc170e7"},"/Users/yunong/workspace/node-restify/lib/plugins/authorization.js":{"stats":{"percentage":0.9057971014492754,"lines":[{"lineno":38},{"lineno":44},{"lineno":48},{"lineno":52},{"lineno":62},{"lineno":63},{"lineno":65},{"lineno":67},{"lineno":103},{"lineno":105},{"lineno":119},{"lineno":120},{"lineno":121}],"missing":13,"seen":125,"total":138,"coverage":{"38":{"partial":false,"source":"        pieces = [decoded];","missing":[{"startCol":8,"endCol":27}]},"44":{"partial":false,"source":"        throw new InvalidHeaderError('Authorization header invalid');","missing":[{"startCol":8,"endCol":69}]},"48":{"partial":false,"source":"        pieces[0] = null;","missing":[{"startCol":8,"endCol":25}]},"52":{"partial":false,"source":"        pieces[1] = null;","missing":[{"startCol":8,"endCol":25}]},"62":{"partial":false,"source":"    options = options || {};","missing":[{"startCol":4,"endCol":28},{"startCol":14,"endCol":21}]},"63":{"partial":false,"source":"    options.algorithms = OPTIONS.algorithms;","missing":[{"startCol":4,"endCol":44}]},"65":{"partial":false,"source":"        return (httpSignature.parseRequest(request, options));","missing":[{"startCol":8,"endCol":62},{"startCol":16,"endCol":60}]},"67":{"partial":false,"source":"        throw new InvalidHeaderError('Authorization header invalid: ' +","missing":[{}]},"68":{"partial":false,"source":"            e.message);","missing":[{}]},"103":{"partial":false,"source":"            var e = new InvalidHeaderError('BasicAuth content ' +","missing":[{}]},"104":{"partial":false,"source":"                'is invalid.');","missing":[{}]},"105":{"partial":false,"source":"            return (next(e));","missing":[{"startCol":12,"endCol":29},{"startCol":20,"endCol":27}]},"119":{"partial":false,"source":"                    req.authorization.signature =","missing":[{}]},"120":{"partial":false,"source":"                        parseSignature(req, options);","missing":[{"startCol":24,"endCol":52},{}]},"121":{"partial":false,"source":"                    req.username =","missing":[{}]},"122":{"partial":false,"source":"                        req.authorization.signature.keyId;","missing":[{}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar httpSignature = require('http-signature');\n\nvar errors = require('../errors');\n\n\n///--- Globals\n\nvar InvalidHeaderError = errors.InvalidHeaderError;\n\nvar OPTIONS = {\n    algorithms: [\n        'rsa-sha1',\n        'rsa-sha256',\n        'rsa-sha512',\n        'dsa-sha1',\n        'hmac-sha1',\n        'hmac-sha256',\n        'hmac-sha512'\n    ]\n};\n\n\n///--- Helpers\n\nfunction parseBasic(string) {\n    var decoded;\n    var index;\n    var pieces;\n\n    decoded = (new Buffer(string, 'base64')).toString('utf8');\n    if (!decoded)\n        throw new InvalidHeaderError('Authorization header invalid');\n\n    index = decoded.indexOf(':');\n    if (index === -1) {\n        pieces = [decoded];\n    } else {\n        pieces = [decoded.slice(0, index), decoded.slice(index + 1)];\n    }\n\n    if (!pieces || typeof (pieces[0]) !== 'string')\n        throw new InvalidHeaderError('Authorization header invalid');\n\n    // Allows for usernameless authentication\n    if (!pieces[0])\n        pieces[0] = null;\n\n    // Allows for passwordless authentication\n    if (!pieces[1])\n        pieces[1] = null;\n\n    return ({\n        username: pieces[0],\n        password: pieces[1]\n    });\n}\n\n\nfunction parseSignature(request, options) {\n    options = options || {};\n    options.algorithms = OPTIONS.algorithms;\n    try {\n        return (httpSignature.parseRequest(request, options));\n    } catch (e) {\n        throw new InvalidHeaderError('Authorization header invalid: ' +\n            e.message);\n    }\n}\n\n\n/**\n * Returns a plugin that will parse the client's Authorization header.\n *\n * Subsequent handlers will see `req.authorization`, which looks like:\n *\n * {\n *   scheme: <Basic|Signature|...>,\n *   credentials: <Undecoded value of header>,\n *   basic: {\n *     username: $user\n *     password: $password\n *   }\n * }\n *\n * `req.username` will also be set, and defaults to 'anonymous'.\n *\n * @return {Function} restify handler.\n * @throws {TypeError} on bad input\n */\nfunction authorizationParser(options) {\n\n    function parseAuthorization(req, res, next) {\n        req.authorization = {};\n        req.username = 'anonymous';\n\n        if (!req.headers.authorization)\n            return (next());\n\n        var pieces = req.headers.authorization.split(' ', 2);\n        if (!pieces || pieces.length !== 2) {\n            var e = new InvalidHeaderError('BasicAuth content ' +\n                'is invalid.');\n            return (next(e));\n        }\n\n        req.authorization.scheme = pieces[0];\n        req.authorization.credentials = pieces[1];\n\n        try {\n            switch (pieces[0].toLowerCase()) {\n                case 'basic':\n                    req.authorization.basic = parseBasic(pieces[1]);\n                    req.username = req.authorization.basic.username;\n                    break;\n\n                case 'signature':\n                    req.authorization.signature =\n                        parseSignature(req, options);\n                    req.username =\n                        req.authorization.signature.keyId;\n                    break;\n\n                default:\n                    break;\n            }\n        } catch (e2) {\n            return (next(e2));\n        }\n\n        return (next());\n    }\n\n    return (parseAuthorization);\n}\n\nmodule.exports = authorizationParser;","blocks":{"total":19,"seen":9,"missing":10,"percentage":0.47368421052631576}},"hash":"19ef45eeb285a1e020280d2e48a407f7"},"/Users/yunong/workspace/node-restify/lib/plugins/body_parser.js":{"stats":{"percentage":0.9775280898876404,"lines":[{"lineno":67},{"lineno":80}],"missing":2,"seen":87,"total":89,"coverage":{"67":{"partial":false,"source":"                parser = parseFieldedText;","missing":[{"startCol":16,"endCol":42}]},"80":{"partial":false,"source":"            next(new UnsupportedMediaTypeError(type));","missing":[{"startCol":12,"endCol":53}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\n\nvar errors = require('../errors');\n\nvar bodyReader = require('./body_reader');\nvar jsonParser = require('./json_body_parser');\nvar formParser = require('./form_body_parser');\nvar multipartParser = require('./multipart_parser');\nvar fieldedTextParser = require('./fielded_text_body_parser.js');\n\n\n///--- Globals\n\nvar UnsupportedMediaTypeError = errors.UnsupportedMediaTypeError;\n\n\n///--- API\n\nfunction bodyParser(options) {\n    assert.optionalObject(options, 'options');\n    options = options || {};\n    options.bodyReader = true;\n\n    var read = bodyReader(options);\n    var parseForm = formParser(options);\n    var parseJson = jsonParser(options);\n    var parseMultipart = multipartParser(options);\n    var parseFieldedText = fieldedTextParser(options);\n\n    function parseBody(req, res, next) {\n        // Allow use of 'requestBodyOnGet' flag to allow for merging of\n        // the request body of a GET request into req.params\n        if (req.method === 'HEAD') {\n            next();\n            return;\n        }\n        if (req.method === 'GET') {\n            if (!options.requestBodyOnGet) {\n                next();\n                return;\n            }\n        }\n\n        if (req.contentLength() === 0 && !req.isChunked()) {\n            next();\n            return;\n        }\n\n        var parser;\n        var type = req.contentType();\n        switch (type) {\n            case 'application/json':\n                parser = parseJson[0];\n                break;\n            case 'application/x-www-form-urlencoded':\n                parser = parseForm[0];\n                break;\n            case 'multipart/form-data':\n                parser = parseMultipart;\n                break;\n            case 'text/tsv':\n                parser = parseFieldedText;\n                break;\n            case 'text/tab-separated-values':\n                parser = parseFieldedText;\n                break;\n            case 'text/csv':\n                parser = parseFieldedText;\n                break;\n\n            default:\n                break;\n        }\n\n        if (parser) {\n            parser(req, res, next);\n        } else if (options && options.rejectUnknown) {\n            next(new UnsupportedMediaTypeError(type));\n        } else {\n            next();\n        }\n    }\n\n    return ([read, parseBody]);\n}\n\nmodule.exports = bodyParser;","blocks":{"total":16,"seen":14,"missing":2,"percentage":0.875}},"hash":"e91c3f45cd3975618b87140fe1269980"},"/Users/yunong/workspace/node-restify/lib/plugins/body_reader.js":{"stats":{"percentage":0.984375,"lines":[{"lineno":80},{"lineno":81}],"missing":2,"seen":126,"total":128,"coverage":{"80":{"partial":false,"source":"                next(new BadDigestError(MD5_MSG, md5, digest));","missing":[{"startCol":16,"endCol":62}]},"81":{"partial":false,"source":"                return;","missing":[{"startCol":16,"endCol":23}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar crypto = require('crypto');\nvar zlib = require('zlib');\n\nvar assert = require('assert-plus');\n\nvar errors = require('../errors');\n\n\n///--- Globals\n\nvar BadDigestError = errors.BadDigestError;\nvar InvalidContentError = errors.InvalidContentError;\nvar RequestEntityTooLargeError = errors.RequestEntityTooLargeError;\n\nvar MD5_MSG = 'Content-MD5 \\'%s\\' didn\\'t match \\'%s\\'';\n\n\n///--- Helpers\n\nfunction createBodyWriter(req) {\n    var buffers = [];\n\n    var contentType = req.contentType();\n    var isText = false;\n    if (!contentType ||\n        contentType === 'application/json' ||\n        contentType === 'application/x-www-form-urlencoded' ||\n        contentType === 'multipart/form-data' ||\n        contentType.substr(0, 5) === 'text/') {\n        isText = true;\n    }\n\n    req.body = new Buffer(0);\n    return {\n        write: function (chunk) { buffers.push(chunk); },\n        end: function () {\n            req.body = Buffer.concat(buffers);\n            if (isText)\n                req.body = req.body.toString('utf8');\n        }\n    };\n}\n\n\n///--- API\n\nfunction bodyReader(options) {\n    options = options || {};\n    assert.object(options, 'options');\n\n    var maxBodySize = options.maxBodySize || 0;\n\n    function readBody(req, res, next) {\n        if ((req.getContentLength() === 0 && !req.isChunked()) ||\n            req.contentType() === 'multipart/form-data' ||\n            req.contentType() === 'application/octet-stream') {\n            next();\n            return;\n        }\n        var bodyWriter = createBodyWriter(req);\n\n        function done() {\n            bodyWriter.end();\n\n            if (maxBodySize && bytesReceived > maxBodySize) {\n                var msg = 'Request body size exceeds ' +\n                    maxBodySize;\n                next(new RequestEntityTooLargeError(msg));\n                return;\n            }\n\n            if (!req.body.length) {\n                next();\n                return;\n            }\n\n            if (hash && md5 !== (digest = hash.digest('base64'))) {\n                next(new BadDigestError(MD5_MSG, md5, digest));\n                return;\n            }\n\n            next();\n        }\n\n        var bytesReceived = 0;\n        var digest;\n        var gz;\n        var hash;\n        var md5;\n        if ((md5 = req.headers['content-md5']))\n            hash = crypto.createHash('md5');\n\n        if (req.headers['content-encoding'] === 'gzip') {\n            gz = zlib.createGunzip();\n            gz.on('data', bodyWriter.write);\n            gz.once('end', done);\n            req.once('end', gz.end.bind(gz));\n        } else {\n            req.once('end', done);\n        }\n\n        req.on('data', function onRequestData(chunk) {\n            if (maxBodySize) {\n                bytesReceived += chunk.length;\n                if (bytesReceived > maxBodySize)\n                    return;\n            }\n\n            if (hash)\n                hash.update(chunk, 'binary');\n\n            if (gz) {\n                gz.write(chunk);\n            } else {\n                bodyWriter.write(chunk);\n            }\n        });\n\n        req.once('error', next);\n        req.resume();\n    }\n\n    return (readBody);\n}\n\nmodule.exports = bodyReader;","blocks":{"total":21,"seen":20,"missing":1,"percentage":0.9523809523809523}},"hash":"051ceb4e4c76567851d8c4dd3042a91c"},"/Users/yunong/workspace/node-restify/lib/plugins/json_body_parser.js":{"stats":{"percentage":0.9444444444444444,"lines":[{"lineno":29},{"lineno":30},{"lineno":37},{"lineno":39}],"missing":4,"seen":68,"total":72,"coverage":{"29":{"partial":false,"source":"            next();","missing":[{"startCol":12,"endCol":18}]},"30":{"partial":false,"source":"            return;","missing":[{"startCol":12,"endCol":19}]},"37":{"partial":false,"source":"            next(new errors.InvalidContentError('Invalid JSON: ' +","missing":[{}]},"38":{"partial":false,"source":"                e.message));","missing":[{}]},"39":{"partial":false,"source":"            return;","missing":[{"startCol":12,"endCol":19}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\n\nvar bodyReader = require('./body_reader');\nvar errors = require('../errors');\n\n\n///--- API\n\n/**\n * Returns a plugin that will parse the HTTP request body IFF the\n * contentType is application/json.\n *\n * If req.params already contains a given key, that key is skipped and an\n * error is logged.\n *\n * @return {Function} restify handler.\n * @throws {TypeError} on bad input\n */\nfunction jsonBodyParser(options) {\n    assert.optionalObject(options, 'options');\n    options = options || {};\n\n    var override = options.overrideParams;\n\n    function parseJson(req, res, next) {\n        if (req.getContentType() !== 'application/json' || !req.body) {\n            next();\n            return;\n        }\n\n        var params;\n        try {\n            params = JSON.parse(req.body);\n        } catch (e) {\n            next(new errors.InvalidContentError('Invalid JSON: ' +\n                e.message));\n            return;\n        }\n\n        if (options.mapParams !== false) {\n            if (Array.isArray(params)) {\n                req.params = params;\n            } else if (typeof (params) === 'object' && params !== null) {\n                Object.keys(params).forEach(function (k) {\n                    var p = req.params[k];\n                    if (p && !override)\n                        return (false);\n                    req.params[k] = params[k];\n                    return (true);\n                });\n            } else {\n                req.params = params || req.params;\n            }\n        } else {\n            req._body = req.body;\n        }\n\n        req.body = params;\n\n        next();\n    }\n\n    var chain = [];\n    if (!options.bodyReader)\n        chain.push(bodyReader(options));\n    chain.push(parseJson);\n    return (chain);\n}\n\nmodule.exports = jsonBodyParser;","blocks":{"total":13,"seen":11,"missing":2,"percentage":0.8461538461538461}},"hash":"906f42360fae4150c439483656d31c4d"},"/Users/yunong/workspace/node-restify/lib/plugins/form_body_parser.js":{"stats":{"percentage":0.958904109589041,"lines":[{"lineno":58},{"lineno":59},{"lineno":68}],"missing":3,"seen":70,"total":73,"coverage":{"58":{"partial":false,"source":"            next(new errors.InvalidContentError(e.message));","missing":[{"startCol":12,"endCol":59}]},"59":{"partial":false,"source":"            return;","missing":[{"startCol":12,"endCol":19}]},"68":{"partial":false,"source":"        chain.push(bodyReader(options));","missing":[{"startCol":8,"endCol":39},{"startCol":19,"endCol":38}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar crypto = require('crypto');\n\nvar assert = require('assert-plus');\nvar querystring = require('qs');\n\nvar bodyReader = require('./body_reader');\nvar errors = require('../errors');\n\n\n///--- Globals\n\nvar MIME_TYPE = 'application/x-www-form-urlencoded';\n\n\n///--- API\n\n/**\n * Returns a plugin that will parse the HTTP request body IFF the\n * contentType is application/x-www-form-urlencoded.\n *\n * If req.params already contains a given key, that key is skipped and an\n * error is logged.\n *\n * @return {Function} restify handler.\n * @throws {TypeError} on bad input\n */\nfunction urlEncodedBodyParser(options) {\n    options = options || {};\n    assert.object(options, 'options');\n\n    var override = options.overrideParams;\n\n    function parseUrlEncodedBody(req, res, next) {\n        if (req.getContentType() !== MIME_TYPE || !req.body) {\n            next();\n            return;\n        }\n\n        try {\n            var params = querystring.parse(req.body);\n            if (options.mapParams !== false) {\n                var keys = Object.keys(params);\n                keys.forEach(function (k) {\n                    var p = req.params[k];\n                    if (p && !override)\n                        return (false);\n\n                    req.params[k] = params[k];\n                    return (true);\n                });\n            } else {\n                req._body = req.body;\n                req.body = params;\n            }\n        } catch (e) {\n            next(new errors.InvalidContentError(e.message));\n            return;\n        }\n\n        req.log.trace('req.params now: %j', req.params);\n        next();\n    }\n\n    var chain = [];\n    if (!options.bodyReader)\n        chain.push(bodyReader(options));\n    chain.push(parseUrlEncodedBody);\n    return (chain);\n}\n\nmodule.exports = urlEncodedBodyParser;","blocks":{"total":10,"seen":8,"missing":2,"percentage":0.8}},"hash":"c72331bf261594357b3a0d747e57d6a6"},"/Users/yunong/workspace/node-restify/lib/plugins/multipart_parser.js":{"stats":{"percentage":0.8217821782178217,"lines":[{"lineno":28},{"lineno":35},{"lineno":36},{"lineno":42},{"lineno":44},{"lineno":46},{"lineno":59},{"lineno":66},{"lineno":67},{"lineno":74},{"lineno":75},{"lineno":76},{"lineno":77},{"lineno":78},{"lineno":82},{"lineno":83},{"lineno":85},{"lineno":86}],"missing":18,"seen":83,"total":101,"coverage":{"28":{"partial":false,"source":"        options = {};","missing":[{"startCol":8,"endCol":21}]},"35":{"partial":true,"source":"            (req.getContentLength() === 0 && !req.isChunked()))","missing":[{"startCol":45,"endCol":61},{"startCol":46,"endCol":61}]},"36":{"partial":false,"source":"            return (next());","missing":[{"startCol":12,"endCol":28},{"startCol":20,"endCol":26}]},"42":{"partial":true,"source":"        form.keepExtensions = options.keepExtensions ? true : false;","missing":[{"startCol":55,"endCol":59}]},"44":{"partial":false,"source":"            form.uploadDir = options.uploadDir;","missing":[{"startCol":12,"endCol":47}]},"46":{"partial":false,"source":"            form.maxFieldsSize = options.maxFieldsSize;","missing":[{"startCol":12,"endCol":55}]},"59":{"partial":false,"source":"                return (next(new BadRequestError(err.message)));","missing":[{"startCol":16,"endCol":64},{"startCol":24,"endCol":62}]},"66":{"partial":true,"source":"                    if (req.params[k] && !override)","missing":[{"startCol":41,"endCol":50},{"startCol":42,"endCol":50}]},"67":{"partial":false,"source":"                        return (false);","missing":[{"startCol":24,"endCol":39}]},"74":{"partial":false,"source":"                    Object.keys(files).forEach(function (f) {","missing":[{},{"startCol":20,"endCol":38}]},"75":{"partial":false,"source":"                        if (req.params[f] && !override)","missing":[{"startCol":28,"endCol":54},{"startCol":45,"endCol":54},{},{"startCol":46,"endCol":54}]},"76":{"partial":false,"source":"                            return (false);","missing":[{},{"startCol":28,"endCol":43}]},"77":{"partial":false,"source":"                        var fs = require('fs');","missing":[{},{"startCol":24,"endCol":47},{"startCol":33,"endCol":46}]},"78":{"partial":false,"source":"                        return fs.readFile(","missing":[{}]},"79":{"partial":false,"source":"                            files[f].path,","missing":[{}]},"80":{"partial":false,"source":"                            'utf8',","missing":[{}]},"81":{"partial":false,"source":"                            function (ex, data) {","missing":[{}]},"82":{"partial":false,"source":"                                if (ex) {","missing":[{},{"startCol":36,"endCol":38}]},"83":{"partial":false,"source":"                                    return (false);","missing":[{"startCol":36,"endCol":51},{}]},"84":{"partial":false,"source":"                                }","missing":[{}]},"85":{"partial":false,"source":"                                req.params[f] = data;","missing":[{},{"startCol":32,"endCol":53}]},"86":{"partial":false,"source":"                                return (true);","missing":[{},{"startCol":32,"endCol":46}]},"87":{"partial":false,"source":"                            });","missing":[{}]},"88":{"partial":false,"source":"                    });","missing":[{}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar formidable = require('formidable');\n\nvar errors = require('../errors');\n\n\n///--- Globals\n\nvar BadRequestError = errors.BadRequestError;\n\n\n///--- API\n\n/**\n * Returns a plugin that will parse the HTTP request body IFF the\n * contentType is multipart/form-data\n *\n * If req.params already contains a given key, that key is skipped and an\n * error is logged.\n *\n * @return {Function} restify handler.\n * @throws {TypeError} on bad input\n */\nfunction multipartBodyParser(options) {\n    if (!options)\n        options = {};\n    assert.object(options, 'options');\n\n    var override = options.overrideParams;\n\n    function parseMultipartBody(req, res, next) {\n        if (req.getContentType() !== 'multipart/form-data' ||\n            (req.getContentLength() === 0 && !req.isChunked()))\n            return (next());\n\n        var form = new formidable.IncomingForm();\n        // enable multiple files on a single upload field\n        // (html5 multiple attribute)\n        form.multiples = options.multiples || false;\n        form.keepExtensions = options.keepExtensions ? true : false;\n        if (options.uploadDir)\n            form.uploadDir = options.uploadDir;\n        if (options.maxFieldsSize)\n            form.maxFieldsSize = options.maxFieldsSize;\n\n        form.onPart = function onPart(part) {\n            if (part.filename && options.multipartFileHandler)\n                options.multipartFileHandler(part, req);\n            else if (!part.filename && options.multipartHandler)\n                options.multipartHandler(part, req);\n            else\n                form.handlePart(part);\n        };\n\n        form.parse(req, function (err, fields, files) {\n            if (err)\n                return (next(new BadRequestError(err.message)));\n\n            req.body = fields;\n            req.files = files;\n\n            if (options.mapParams !== false) {\n                Object.keys(fields).forEach(function (k) {\n                    if (req.params[k] && !override)\n                        return (false);\n\n                    req.params[k] = fields[k];\n                    return (true);\n                });\n\n                if (options.mapFiles) {\n                    Object.keys(files).forEach(function (f) {\n                        if (req.params[f] && !override)\n                            return (false);\n                        var fs = require('fs');\n                        return fs.readFile(\n                            files[f].path,\n                            'utf8',\n                            function (ex, data) {\n                                if (ex) {\n                                    return (false);\n                                }\n                                req.params[f] = data;\n                                return (true);\n                            });\n                    });\n                }\n            }\n\n            return (next());\n        });\n\n        return (false);\n    }\n\n    return (parseMultipartBody);\n}\n\nmodule.exports = multipartBodyParser;","blocks":{"total":20,"seen":9,"missing":11,"percentage":0.45}},"hash":"c8042a5b793929568ff7d2327e66c0f8"},"/Users/yunong/workspace/node-restify/lib/plugins/fielded_text_body_parser.js":{"stats":{"percentage":0.8918918918918919,"lines":[{"lineno":31},{"lineno":32},{"lineno":33},{"lineno":44},{"lineno":45},{"lineno":46},{"lineno":47},{"lineno":58}],"missing":8,"seen":66,"total":74,"coverage":{"31":{"partial":true,"source":"            contentType !== 'text/tab-separated-values' || !req.body) {","missing":[{"startCol":12,"endCol":23}]},"32":{"partial":false,"source":"            next();","missing":[{"startCol":12,"endCol":18}]},"33":{"partial":false,"source":"            return;","missing":[{"startCol":12,"endCol":19}]},"44":{"partial":true,"source":"        delimiter = (hDelimiter) ? hDelimiter : delimiter;","missing":[{"startCol":35,"endCol":45}]},"45":{"partial":true,"source":"        var escape = (hEscape) ? hEscape : '\\\\';","missing":[{"startCol":33,"endCol":40}]},"46":{"partial":true,"source":"        var quote = (hQuote) ? hQuote : '\"';","missing":[{"startCol":31,"endCol":37}]},"47":{"partial":true,"source":"        var columns = (hColumns) ? hColumns : true;","missing":[{"startCol":35,"endCol":43}]},"58":{"partial":false,"source":"                return (next(err));","missing":[{"startCol":16,"endCol":35},{"startCol":24,"endCol":33}]}},"source":"/**\n * Dependencies\n */\n\nvar csv = require('csv');\nvar assert = require('assert-plus');\nvar bodyReader = require('./body_reader');\nvar errors = require('../errors');\n\n///--- API\n\n/**\n * Returns a plugin that will parse the HTTP request body if the\n * contentType is `text/csv` or `text/tsv`\n *\n * @return {Function} restify handler.\n * @throws {TypeError} on bad input\n */\n\nfunction fieldedTextParser(options) {\n\n    assert.optionalObject(options, 'options');\n    options = options || {};\n\n    function parseFieldedText(req, res, next) {\n\n        var contentType = req.getContentType();\n\n        if (contentType !== 'text/csv' &&\n            contentType !== 'text/tsv' &&\n            contentType !== 'text/tab-separated-values' || !req.body) {\n            next();\n            return;\n        }\n\n\n        var hDelimiter = req.headers['x-content-delimiter'];\n        var hEscape = req.headers['x-content-escape'];\n        var hQuote = req.headers['x-content-quote'];\n        var hColumns = req.headers['x-content-columns'];\n\n\n        var delimiter = (contentType === 'text/tsv') ? '\\t' : ',';\n        delimiter = (hDelimiter) ? hDelimiter : delimiter;\n        var escape = (hEscape) ? hEscape : '\\\\';\n        var quote = (hQuote) ? hQuote : '\"';\n        var columns = (hColumns) ? hColumns : true;\n\n        var parserOptions = {\n            delimiter: delimiter,\n            quote: quote,\n            escape: escape,\n            columns: columns\n        };\n\n        csv.parse(req.body, parserOptions, function (err, parsedBody) {\n            if (err) {\n                return (next(err));\n            }\n            // Add an \"index\" property to every row\n            parsedBody.forEach(function (row, index) {\n                row.index = index;\n            });\n            req.body = parsedBody;\n            return (next());\n        });\n\n    }\n\n    return (parseFieldedText);\n\n}\n\nmodule.exports = fieldedTextParser;","blocks":{"total":6,"seen":4,"missing":2,"percentage":0.6666666666666666}},"hash":"72627126d08923d080b3b85b2552494b"},"/Users/yunong/workspace/node-restify/lib/plugins/conditional_request.js":{"stats":{"percentage":0.9479166666666666,"lines":[{"lineno":68},{"lineno":83},{"lineno":128},{"lineno":135},{"lineno":136},{"lineno":145},{"lineno":155},{"lineno":156},{"lineno":166},{"lineno":167}],"missing":10,"seen":182,"total":192,"coverage":{"68":{"partial":true,"source":"        for (var i = 0; i < clientETags.length; i++) {","missing":[{"startCol":48,"endCol":51}]},"83":{"partial":false,"source":"            return (next());","missing":[{"startCol":12,"endCol":28},{"startCol":20,"endCol":26}]},"128":{"partial":false,"source":"                    err = new PreconditionFailedError(IF_MOD_FAIL,","missing":[{}]},"129":{"partial":false,"source":"                        mtime,","missing":[{}]},"130":{"partial":false,"source":"                        ctime);","missing":[{}]},"135":{"partial":false,"source":"        next(new BadRequestError(e.message));","missing":[{"startCol":8,"endCol":44}]},"136":{"partial":false,"source":"        return;","missing":[{"startCol":8,"endCol":15}]},"145":{"partial":false,"source":"    next(err);","missing":[{"startCol":4,"endCol":13}]},"155":{"partial":false,"source":"        next();","missing":[{"startCol":8,"endCol":14}]},"156":{"partial":false,"source":"        return;","missing":[{"startCol":8,"endCol":15}]},"166":{"partial":false,"source":"        next(new BadRequestError(e.message));","missing":[{"startCol":8,"endCol":44}]},"167":{"partial":false,"source":"        return;","missing":[{"startCol":8,"endCol":15}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar errors = require('../errors');\n\n\n///--- Globals\n\nvar BadRequestError = errors.BadRequestError;\nvar PreconditionFailedError = errors.PreconditionFailedError;\n\nvar IF_MATCH_FAIL = 'if-match \\'%s\\' didn\\'t match etag \\'%s\\'';\nvar IF_NO_MATCH_FAIL = 'if-none-match \\'%s\\' matched etag \\'%s\\'';\nvar IF_MOD_FAIL = 'object was modified at \\'%s\\'; if-modified-since \\'%s\\'';\nvar IF_UNMOD_FAIL = 'object was modified at \\'%s\\'; if-unmodified-since \\'%s\\'';\n\n\n///--- API\n// Reference RFC2616 section 14 for an explanation of what this all does.\n\nfunction checkIfMatch(req, res, next) {\n    var clientETags;\n    var cur;\n    var etag = res.etag || res.getHeader('etag') || '';\n    var ifMatch;\n    var matched = false;\n\n    if ((ifMatch = req.headers['if-match'])) {\n        /* JSSTYLED */\n        clientETags = ifMatch.split(/\\s*,\\s*/);\n\n        for (var i = 0; i < clientETags.length; i++) {\n            cur = clientETags[i];\n            // only strong comparison\n            /* JSSTYLED */\n            cur = cur.replace(/^W\\//, '');\n            /* JSSTYLED */\n            cur = cur.replace(/^\"(\\w*)\"$/, '$1');\n\n            if (cur === '*' || cur === etag) {\n                matched = true;\n                break;\n            }\n        }\n\n        if (!matched) {\n            var err = new PreconditionFailedError(IF_MATCH_FAIL,\n                ifMatch,\n                etag);\n            return (next(err));\n        }\n    }\n\n    return (next());\n}\n\n\nfunction checkIfNoneMatch(req, res, next) {\n    var clientETags;\n    var cur;\n    var etag = res.etag || res.getHeader('etag') || '';\n    var ifNoneMatch;\n    var matched = false;\n\n    if ((ifNoneMatch = req.headers['if-none-match'])) {\n        /* JSSTYLED */\n        clientETags = ifNoneMatch.split(/\\s*,\\s*/);\n\n        for (var i = 0; i < clientETags.length; i++) {\n            cur = clientETags[i];\n            // ignore weak validation\n            /* JSSTYLED */\n            cur = cur.replace(/^W\\//, '');\n            /* JSSTYLED */\n            cur = cur.replace(/^\"(\\w*)\"$/, '$1');\n\n            if (cur === '*' || cur === etag) {\n                matched = true;\n                break;\n            }\n        }\n\n        if (!matched)\n            return (next());\n\n        if (req.method !== 'GET' && req.method !== 'HEAD') {\n            var err = new PreconditionFailedError(IF_NO_MATCH_FAIL,\n                ifNoneMatch,\n                etag);\n            return (next(err));\n        }\n\n        res.send(304);\n        return (next(false));\n    }\n\n    return (next());\n}\n\n\nfunction checkIfModified(req, res, next) {\n    var code;\n    var err;\n    var ctime = req.header('if-modified-since');\n    var mtime = res.mtime || res.header('Last-Modified') || '';\n\n    if (!mtime || !ctime) {\n        next();\n        return;\n    }\n\n    try {\n        //\n        // TODO handle Range header modifications\n        //\n        // Note: this is not technically correct as per 2616 -\n        // 2616 only specifies semantics for GET requests, not\n        // any other method - but using if-modified-since with a\n        // PUT or DELETE seems like returning 412 is sane\n        //\n        if (Date.parse(mtime) <= Date.parse(ctime)) {\n            switch (req.method) {\n                case 'GET':\n                case 'HEAD':\n                    code = 304;\n                    break;\n\n                default:\n                    err = new PreconditionFailedError(IF_MOD_FAIL,\n                        mtime,\n                        ctime);\n                    break;\n            }\n        }\n    } catch (e) {\n        next(new BadRequestError(e.message));\n        return;\n    }\n\n    if (code !== undefined) {\n        res.send(code);\n        next(false);\n        return;\n    }\n\n    next(err);\n}\n\n\nfunction checkIfUnmodified(req, res, next) {\n    var err;\n    var ctime = req.headers['if-unmodified-since'];\n    var mtime = res.mtime || res.header('Last-Modified') || '';\n\n    if (!mtime || !ctime) {\n        next();\n        return;\n    }\n\n    try {\n        if (Date.parse(mtime) > Date.parse(ctime)) {\n            err = new PreconditionFailedError(IF_UNMOD_FAIL,\n                mtime,\n                ctime);\n        }\n    } catch (e) {\n        next(new BadRequestError(e.message));\n        return;\n    }\n\n    next(err);\n}\n\n\n///--- Exports\n\n/**\n * Returns a set of plugins that will compare an already set ETag header with\n * the client's If-Match and If-None-Match header, and an already set\n * Last-Modified header with the client's If-Modified-Since and\n * If-Unmodified-Since header.\n */\nfunction conditionalRequest() {\n    var chain = [\n        checkIfMatch,\n        checkIfNoneMatch,\n        checkIfModified,\n        checkIfUnmodified\n    ];\n    return (chain);\n}\n\nmodule.exports = conditionalRequest;","blocks":{"total":25,"seen":20,"missing":5,"percentage":0.8}},"hash":"b7329f17291a26b9ce270122eddd93cb"},"/Users/yunong/workspace/node-restify/lib/plugins/cors.js":{"stats":{"percentage":0.9133858267716536,"lines":[{"lineno":93},{"lineno":94},{"lineno":95},{"lineno":96},{"lineno":100},{"lineno":102},{"lineno":103},{"lineno":105},{"lineno":108},{"lineno":111},{"lineno":112}],"missing":11,"seen":116,"total":127,"coverage":{"93":{"partial":false,"source":"        var origin;","missing":[{"startCol":8,"endCol":19}]},"94":{"partial":false,"source":"        if (!(origin = matchOrigin(req, origins))) {","missing":[{"startCol":12,"endCol":49},{"startCol":23,"endCol":48}]},"95":{"partial":false,"source":"            next();","missing":[{"startCol":12,"endCol":18}]},"96":{"partial":false,"source":"            return;","missing":[{"startCol":12,"endCol":19}]},"100":{"partial":false,"source":"            origin = req.headers['origin'];","missing":[{"startCol":12,"endCol":43}]},"102":{"partial":false,"source":"                res.setHeader(AC_ALLOW_ORIGIN, origin);","missing":[{"startCol":16,"endCol":54}]},"103":{"partial":false,"source":"                res.setHeader(AC_ALLOW_CREDS, 'true');","missing":[{"startCol":16,"endCol":53}]},"105":{"partial":false,"source":"                res.setHeader(AC_ALLOW_ORIGIN, origin);","missing":[{"startCol":16,"endCol":54}]},"108":{"partial":false,"source":"            res.setHeader(AC_EXPOSE_HEADERS, headers.join(', '));","missing":[{"startCol":12,"endCol":64},{"startCol":45,"endCol":63}]},"111":{"partial":false,"source":"        res.once('header', corsOnHeader);","missing":[{"startCol":8,"endCol":40}]},"112":{"partial":false,"source":"        next();","missing":[{"startCol":8,"endCol":14}]}},"source":"// Copyright 2013 Mark Cavage, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\n\n\n///--- Globals\n\nvar ALLOW_HEADERS = [\n    'accept',\n    'accept-version',\n    'content-type',\n    'request-id',\n    'origin',\n    'x-api-version',\n    'x-request-id'\n];\n\nvar EXPOSE_HEADERS = [\n    'api-version',\n    'content-length',\n    'content-md5',\n    'content-type',\n    'date',\n    'request-id',\n    'response-time'\n];\n\n// Normal\nvar AC_ALLOW_ORIGIN = 'Access-Control-Allow-Origin';\nvar AC_ALLOW_CREDS = 'Access-Control-Allow-Credentials';\nvar AC_EXPOSE_HEADERS = 'Access-Control-Expose-Headers';\n\n\n///--- Internal Functions\n\nfunction matchOrigin(req, origins) {\n    var origin = req.headers['origin'];\n\n    function belongs(o) {\n        if (origin === o || o === '*') {\n            origin = o;\n            return (true);\n        }\n\n        return (false);\n    }\n\n    return ((origin && origins.some(belongs)) ? origin : false);\n}\n\n\n///--- API\n\n//\n// From http://www.w3.org/TR/cors/#resource-processing-model\n//\n// If \"simple\" request (paraphrased):\n//\n// 1. If the Origin header is not set, or if the value of Origin is not a\n//    case-sensitive match to any values listed in `opts.origins`, do not\n//    send any CORS headers\n//\n// 2. If the resource supports credentials add a single\n//    'Access-Control-Allow-Credentials' header with the value as \"true\", and\n//    ensure 'AC-Allow-Origin' is not '*', but is the request header value,\n//    otherwise add a single Access-Control-Allow-Origin header, with either the\n//    value of the Origin header or the string \"*\" as value\n//\n// 3. Add Access-Control-Expose-Headers as appropriate\n//\n// Pre-flight requests are handled by the router internally\n//\nfunction cors(opts) {\n    assert.optionalObject(opts, 'options');\n    opts = opts || {};\n    assert.optionalArrayOfString(opts.origins, 'options.origins');\n    assert.optionalBool(opts.credentials, 'options.credentials');\n    assert.optionalArrayOfString(opts.headers, 'options.headers');\n\n    cors.credentials = opts.credentials;\n    cors.origins = opts.origins || ['*'];\n\n    var headers = (opts.headers || []).slice(0);\n    var origins = opts.origins || ['*'];\n\n    EXPOSE_HEADERS.forEach(function (h) {\n        if (headers.indexOf(h) === -1)\n            headers.push(h);\n    });\n\n    // Handler for simple requests\n    function restifyCORSSimple(req, res, next) {\n        var origin;\n        if (!(origin = matchOrigin(req, origins))) {\n            next();\n            return;\n        }\n\n        function corsOnHeader() {\n            origin = req.headers['origin'];\n            if (opts.credentials) {\n                res.setHeader(AC_ALLOW_ORIGIN, origin);\n                res.setHeader(AC_ALLOW_CREDS, 'true');\n            } else {\n                res.setHeader(AC_ALLOW_ORIGIN, origin);\n            }\n\n            res.setHeader(AC_EXPOSE_HEADERS, headers.join(', '));\n        }\n\n        res.once('header', corsOnHeader);\n        next();\n    }\n\n    return (restifyCORSSimple);\n}\n\n\n///--- Exports\n\nmodule.exports = cors;\n// All of these are needed for the pre-flight code over in lib/router.js\ncors.ALLOW_HEADERS = ALLOW_HEADERS;\ncors.EXPOSE_HEADERS = EXPOSE_HEADERS;\ncors.credentials = false;\ncors.origins = [];\ncors.matchOrigin = matchOrigin;","blocks":{"total":11,"seen":6,"missing":5,"percentage":0.5454545454545454}},"hash":"5196c186e0b6802c50eb8e2304b0a596"},"/Users/yunong/workspace/node-restify/lib/plugins/date.js":{"stats":{"percentage":0.948051948051948,"lines":[{"lineno":49},{"lineno":63},{"lineno":67},{"lineno":68}],"missing":4,"seen":73,"total":77,"coverage":{"49":{"partial":false,"source":"                log.trace({","missing":[{}]},"50":{"partial":false,"source":"                    allowedSkew: clockSkew,","missing":[{}]},"51":{"partial":false,"source":"                    now: now,","missing":[{}]},"52":{"partial":false,"source":"                    sent: sent","missing":[{}]},"53":{"partial":false,"source":"                }, 'Checking clock skew');","missing":[{}]},"63":{"partial":false,"source":"            log.trace({","missing":[{}]},"64":{"partial":false,"source":"                err: err","missing":[{}]},"65":{"partial":false,"source":"            }, 'Bad Date header: %s', date);","missing":[{}]},"67":{"partial":false,"source":"            e = new InvalidHeaderError(BAD_MSG, date);","missing":[{"startCol":12,"endCol":54}]},"68":{"partial":false,"source":"            return (next(e));","missing":[{"startCol":12,"endCol":29},{"startCol":20,"endCol":27}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\n\nvar errors = require('../errors');\n\n\n///--- Globals\n\nvar InvalidHeaderError = errors.InvalidHeaderError;\nvar RequestExpiredError = errors.RequestExpiredError;\n\nvar BAD_MSG = 'Date header is invalid';\nvar OLD_MSG = 'Date header %s is too old';\n\n\n///--- API\n\n/**\n * Returns a plugin that will parse the Date header (if present) and check for\n * an \"expired\" request, where expired means the request originated at a time\n * before ($now - $clockSkew). The default clockSkew allowance is 5m (thanks\n * Kerberos!)\n *\n * @param {Number} clockSkew optional age of time (in seconds).\n * @return {Function} restify handler.\n * @throws {TypeError} on bad input\n */\nfunction dateParser(clockSkew) {\n    if (!clockSkew)\n        clockSkew = 300;\n    assert.number(clockSkew, 'clockSkew');\n\n    clockSkew = clockSkew * 1000;\n\n    function parseDate(req, res, next) {\n        if (!req.headers.date)\n            return (next());\n\n        var e;\n        var date = req.headers.date;\n        var log = req.log;\n\n        try {\n            var now = Date.now();\n            var sent = new Date(date).getTime();\n\n            if (log.trace()) {\n                log.trace({\n                    allowedSkew: clockSkew,\n                    now: now,\n                    sent: sent\n                }, 'Checking clock skew');\n            }\n\n            if ((now - sent) > clockSkew) {\n                e = new RequestExpiredError(OLD_MSG, date);\n                return (next(e));\n            }\n\n\n        } catch (err) {\n            log.trace({\n                err: err\n            }, 'Bad Date header: %s', date);\n\n            e = new InvalidHeaderError(BAD_MSG, date);\n            return (next(e));\n        }\n\n        return (next());\n    }\n\n    return (parseDate);\n}\n\nmodule.exports = dateParser;","blocks":{"total":8,"seen":6,"missing":2,"percentage":0.75}},"hash":"f0b112dfa26a3af5c764aab51ee0f841"},"/Users/yunong/workspace/node-restify/lib/plugins/jsonp.js":{"stats":{"percentage":1,"lines":[],"missing":0,"seen":26,"total":26,"coverage":{},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar qs = require('qs');\n\n\n///--- API\n\nfunction jsonp() {\n    function _jsonp(req, res, next) {\n        var q = req.getQuery();\n\n        // If the query plugin wasn't used, we need to hack it in now\n        if (typeof (q) === 'string')\n            req.query = qs.parse(q);\n\n        if (req.query.callback || req.query.jsonp)\n            res.setHeader('Content-Type', 'application/javascript');\n\n        next();\n    }\n\n    return (_jsonp);\n}\n\n\nmodule.exports = jsonp;","blocks":{"total":4,"seen":4,"missing":0,"percentage":1}},"hash":"272ad4c2c83f9842e2075e620f41f259"},"/Users/yunong/workspace/node-restify/lib/plugins/bunyan.js":{"stats":{"percentage":0.6666666666666666,"lines":[{"lineno":11},{"lineno":12},{"lineno":14},{"lineno":16},{"lineno":18},{"lineno":21},{"lineno":24},{"lineno":25},{"lineno":26},{"lineno":29},{"lineno":31},{"lineno":32},{"lineno":34},{"lineno":36},{"lineno":39}],"missing":15,"seen":30,"total":45,"coverage":{"11":{"partial":false,"source":"    assert.optionalObject(options);","missing":[{"startCol":4,"endCol":34}]},"12":{"partial":false,"source":"    options = options || {};","missing":[{"startCol":4,"endCol":28},{"startCol":14,"endCol":21}]},"14":{"partial":false,"source":"    var props;","missing":[{"startCol":4,"endCol":14}]},"16":{"partial":false,"source":"        props = shallowCopy(options.properties);","missing":[{"startCol":8,"endCol":48},{"startCol":16,"endCol":47}]},"18":{"partial":false,"source":"        props = {};","missing":[{"startCol":8,"endCol":19}]},"21":{"partial":false,"source":"        props.serializers = options.serializers;","missing":[{"startCol":8,"endCol":48}]},"24":{"partial":false,"source":"        if (!req.log && !options.log) {","missing":[{"startCol":12,"endCol":20},{"startCol":24,"endCol":36}]},"25":{"partial":false,"source":"            next();","missing":[{"startCol":12,"endCol":18}]},"26":{"partial":false,"source":"            return;","missing":[{"startCol":12,"endCol":19}]},"29":{"partial":false,"source":"        var log = req.log || options.log;","missing":[{"startCol":8,"endCol":41},{"startCol":18,"endCol":40}]},"31":{"partial":false,"source":"        props.req_id = req.getId();","missing":[{"startCol":8,"endCol":35},{"startCol":23,"endCol":34}]},"32":{"partial":false,"source":"        req.log = log.child(props, props.serializers ? false : true);","missing":[{"startCol":8,"endCol":69},{"startCol":18,"endCol":68},{"startCol":55,"endCol":60},{"startCol":63,"endCol":67}]},"34":{"partial":false,"source":"            delete props.req_id;","missing":[{"startCol":12,"endCol":31}]},"36":{"partial":false,"source":"        next();","missing":[{"startCol":8,"endCol":14}]},"39":{"partial":false,"source":"    return (bunyan);","missing":[{"startCol":4,"endCol":20}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\n\nvar shallowCopy = require('../utils').shallowCopy;\n\n\n///--- API\n\nfunction requestLogger(options) {\n    assert.optionalObject(options);\n    options = options || {};\n\n    var props;\n    if (options.properties) {\n        props = shallowCopy(options.properties);\n    } else {\n        props = {};\n    }\n    if (options.serializers)\n        props.serializers = options.serializers;\n\n    function bunyan(req, res, next) {\n        if (!req.log && !options.log) {\n            next();\n            return;\n        }\n\n        var log = req.log || options.log;\n\n        props.req_id = req.getId();\n        req.log = log.child(props, props.serializers ? false : true);\n        if (props.req_id)\n            delete props.req_id;\n\n        next();\n    }\n\n    return (bunyan);\n}\n\n\n///--- Exports\n\nmodule.exports = requestLogger;","blocks":{"total":7,"seen":0,"missing":7,"percentage":0}},"hash":"b89b80f7d78a75b31a5e735272914048"},"/Users/yunong/workspace/node-restify/lib/plugins/gzip.js":{"stats":{"percentage":0.9056603773584906,"lines":[{"lineno":20},{"lineno":21},{"lineno":34},{"lineno":35},{"lineno":36}],"missing":5,"seen":48,"total":53,"coverage":{"20":{"partial":false,"source":"            next();","missing":[{"startCol":12,"endCol":18}]},"21":{"partial":false,"source":"            return;","missing":[{"startCol":12,"endCol":19}]},"34":{"partial":false,"source":"            res.write = origWrite;","missing":[{"startCol":12,"endCol":34}]},"35":{"partial":false,"source":"            res.end = origEnd;","missing":[{"startCol":12,"endCol":30}]},"36":{"partial":false,"source":"            res.writeHead = origWriteHead;","missing":[{"startCol":12,"endCol":42}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar zlib = require('zlib');\n\nvar assert = require('assert-plus');\n\n\nfunction _writeHead(originalFunction) {\n    this.removeHeader('Content-Length');\n    originalFunction.apply(this, Array.prototype.slice.call(arguments, 1));\n}\n\n///--- API\n\nfunction gzipResponse(opts) {\n    assert.optionalObject(opts, 'options');\n\n    function gzip(req, res, next) {\n        if (!req.acceptsEncoding('gzip')) {\n            next();\n            return;\n        }\n\n        var gz = zlib.createGzip(opts);\n\n        gz.on('data', res.write.bind(res));\n        gz.once('end', res.end.bind(res));\n        gz.on('drain', res.emit.bind(res, 'drain'));\n\n        var origWrite = res.write;\n        var origEnd = res.end;\n        var origWriteHead = res.writeHead;\n        res.handledGzip = function _handledGzip() {\n            res.write = origWrite;\n            res.end = origEnd;\n            res.writeHead = origWriteHead;\n        };\n\n        res.write = gz.write.bind(gz);\n        res.end = gz.end.bind(gz);\n\n        res.writeHead = _writeHead.bind(res, res.writeHead);\n        res.setHeader('Content-Encoding', 'gzip');\n        next();\n    }\n\n    return (gzip);\n}\n\n\n///--- Exports\n\nmodule.exports = gzipResponse;","blocks":{"total":5,"seen":3,"missing":2,"percentage":0.6}},"hash":"6261b75421921acac32d649b933c5cf5"},"/Users/yunong/workspace/node-restify/lib/plugins/full_response.js":{"stats":{"percentage":0.9245283018867925,"lines":[{"lineno":53},{"lineno":56},{"lineno":57},{"lineno":58},{"lineno":59},{"lineno":65},{"lineno":66},{"lineno":89}],"missing":8,"seen":98,"total":106,"coverage":{"53":{"partial":true,"source":"            req.isKeepAlive() ? 'Keep-Alive' : 'close');","missing":[{"startCol":47,"endCol":54}]},"56":{"partial":true,"source":"    if (res._data && !res.getHeader('Content-MD5')) {","missing":[{"startCol":21,"endCol":50},{"startCol":22,"endCol":50}]},"57":{"partial":false,"source":"        hash = crypto.createHash('md5');","missing":[{"startCol":8,"endCol":40},{"startCol":15,"endCol":39}]},"58":{"partial":false,"source":"        hash.update(res._data);","missing":[{"startCol":8,"endCol":30}]},"59":{"partial":false,"source":"        res.setHeader('Content-MD5', hash.digest('base64'));","missing":[{"startCol":8,"endCol":59},{"startCol":37,"endCol":58}]},"65":{"partial":true,"source":"    if (res.etag && !res.getHeader('Etag'))","missing":[{"startCol":20,"endCol":42},{"startCol":21,"endCol":42}]},"66":{"partial":false,"source":"        res.setHeader('Etag', res.etag);","missing":[{"startCol":8,"endCol":39}]},"89":{"partial":false,"source":"                res.defaultResponseFormatters(res._data);","missing":[{"startCol":16,"endCol":56}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar crypto = require('crypto');\n\nvar httpDate = require('../http_date');\n\n\n///--- Globals\n\nvar ALLOW_HEADERS = [\n    'Accept',\n    'Accept-Version',\n    'Content-Length',\n    'Content-MD5',\n    'Content-Type',\n    'Date',\n    'Api-Version',\n    'Response-Time'\n].join(', ');\n\nvar EXPOSE_HEADERS = [\n    'Api-Version',\n    'Request-Id',\n    'Response-Time'\n].join(', ');\n\n\n///--- API\n\nfunction setHeaders(req, res) {\n    var hash;\n    var now = new Date();\n    var methods;\n\n    if (!res.getHeader('Access-Control-Allow-Origin'))\n        res.setHeader('Access-Control-Allow-Origin', '*');\n\n    if (!res.getHeader('Access-Control-Allow-Headers'))\n        res.setHeader('Access-Control-Allow-Headers', ALLOW_HEADERS);\n\n    if (!res.getHeader('Access-Control-Allow-Methods')) {\n        if (res.methods && res.methods.length > 0) {\n            methods = res.methods.join(', ');\n            res.setHeader('Access-Control-Allow-Methods', methods);\n        }\n    }\n\n    if (!res.getHeader('Access-Control-Expose-Headers'))\n        res.setHeader('Access-Control-Expose-Headers', EXPOSE_HEADERS);\n\n    if (!res.getHeader('Connection')) {\n        res.setHeader('Connection',\n            req.isKeepAlive() ? 'Keep-Alive' : 'close');\n    }\n\n    if (res._data && !res.getHeader('Content-MD5')) {\n        hash = crypto.createHash('md5');\n        hash.update(res._data);\n        res.setHeader('Content-MD5', hash.digest('base64'));\n    }\n\n    if (!res.getHeader('Date'))\n        res.setHeader('Date', httpDate(now));\n\n    if (res.etag && !res.getHeader('Etag'))\n        res.setHeader('Etag', res.etag);\n\n    if (!res.getHeader('Server'))\n        res.setHeader('Server', res.serverName);\n\n    if (res.version && !res.getHeader('Api-Version'))\n        res.setHeader('Api-Version', res.version);\n\n    if (!res.getHeader('Request-Id'))\n        res.setHeader('Request-Id', req.getId());\n\n    if (!res.getHeader('Response-Time'))\n        res.setHeader('Response-Time', now.getTime() - req._time);\n\n}\n\n\nfunction fullResponse() {\n    function restifyResponseHeaders(req, res, next) {\n        res.once('header', function () {\n\n            // Restify 1.0 compatibility\n            if (res.defaultResponseFormatters)\n                res.defaultResponseFormatters(res._data);\n\n            res.emit('beforeSend', res._data, res._body);\n\n            // end backwards-compatibility\n            return (setHeaders(req, res));\n        });\n\n        return (next());\n    }\n\n    return (restifyResponseHeaders);\n}\n\n\n///--- Exports\n\nmodule.exports = fullResponse;","blocks":{"total":18,"seen":15,"missing":3,"percentage":0.8333333333333334}},"hash":"ddde99b123780e1be8dfa07be3b77d1b"},"/Users/yunong/workspace/node-restify/lib/plugins/query.js":{"stats":{"percentage":0.9555555555555556,"lines":[{"lineno":24},{"lineno":25}],"missing":2,"seen":43,"total":45,"coverage":{"24":{"partial":false,"source":"            req.query = {};","missing":[{"startCol":12,"endCol":27}]},"25":{"partial":false,"source":"            return (next());","missing":[{"startCol":12,"endCol":28},{"startCol":20,"endCol":26}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar qs = require('qs');\nvar url = require('url');\n\nvar assert = require('assert-plus');\n\n\n/**\n * Returns a plugin that will parse the query string, and merge the results\n * into req.params.\n *\n * @return {Function} restify handler.\n * @throws {TypeError} on bad input\n */\nfunction queryParser(options) {\n    if (!options)\n        options = {};\n    assert.object(options, 'options');\n\n\n    function parseQueryString(req, res, next) {\n        if (!req.getQuery()) {\n            req.query = {};\n            return (next());\n        }\n\n        req.query = qs.parse(req.getQuery());\n        if (options.mapParams !== false) {\n            Object.keys(req.query).forEach(function (k) {\n                if (req.params[k] && !options.overrideParams)\n                    return (false);\n\n                req.params[k] = req.query[k];\n                return (true);\n            });\n        }\n\n        return (next());\n    }\n\n    return (parseQueryString);\n}\n\nmodule.exports = queryParser;","blocks":{"total":7,"seen":6,"missing":1,"percentage":0.8571428571428571}},"hash":"602767f0c286df4e78d613a6f6e5f5c5"},"/Users/yunong/workspace/node-restify/lib/plugins/pre/pre_path.js":{"stats":{"percentage":1,"lines":[],"missing":0,"seen":41,"total":41,"coverage":{},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\n\n///--- Helpers\n\n/**\n * Cleans up sloppy URLs on the request object, like /foo////bar/// to /foo/bar.\n *\n */\nfunction strip(path) {\n    var cur;\n    var next;\n    var str = '';\n\n    for (var i = 0; i < path.length; i++) {\n        cur = path.charAt(i);\n        if (i !== path.length - 1)\n            next = path.charAt(i + 1);\n\n        if (cur === '/' && (next === '/' || (next === '?' && i > 0)))\n            continue;\n\n        str += cur;\n    }\n\n    return (str);\n}\n\n\n///--- Exports\n\nmodule.exports = function sanitizePath(options) {\n    options = options || {};\n\n    function _sanitizePath(req, res, next) {\n        req.url = strip(req.url);\n        next();\n    }\n\n    return (_sanitizePath);\n};","blocks":{"total":6,"seen":6,"missing":0,"percentage":1}},"hash":"94687ddeb75ae2329d848d67d2ccad6d"},"/Users/yunong/workspace/node-restify/lib/plugins/static.js":{"stats":{"percentage":0.7898550724637681,"lines":[{"lineno":34},{"lineno":35},{"lineno":36},{"lineno":38},{"lineno":39},{"lineno":42},{"lineno":43},{"lineno":46},{"lineno":47},{"lineno":54},{"lineno":56},{"lineno":59},{"lineno":73},{"lineno":74},{"lineno":75},{"lineno":99},{"lineno":100},{"lineno":101},{"lineno":105},{"lineno":106},{"lineno":109},{"lineno":110},{"lineno":111},{"lineno":114},{"lineno":115},{"lineno":116},{"lineno":117},{"lineno":118},{"lineno":126}],"missing":29,"seen":109,"total":138,"coverage":{"34":{"partial":false,"source":"            next(new ResourceNotFoundError(err,","missing":[{}]},"35":{"partial":false,"source":"                req.path()));","missing":[{"startCol":16,"endCol":26},{}]},"36":{"partial":false,"source":"            return;","missing":[{"startCol":12,"endCol":19}]},"38":{"partial":false,"source":"            next(new ResourceNotFoundError('%s does not exist', req.path()));","missing":[{"startCol":12,"endCol":76},{"startCol":64,"endCol":74}]},"39":{"partial":false,"source":"            return;","missing":[{"startCol":12,"endCol":19}]},"42":{"partial":true,"source":"        if (res.handledGzip && isGzip) {","missing":[{"startCol":31,"endCol":37}]},"43":{"partial":false,"source":"            res.handledGzip();","missing":[{"startCol":12,"endCol":29}]},"46":{"partial":true,"source":"        var fstream = fs.createReadStream(file + (isGzip ? '.gz' : ''));","missing":[{"startCol":59,"endCol":64}]},"47":{"partial":true,"source":"        var maxAge = opts.maxAge === undefined ? 3600 : opts.maxAge;","missing":[{"startCol":56,"endCol":67}]},"54":{"partial":false,"source":"                var type = res.getHeader('Content-Type') +","missing":[{},{"startCol":27,"endCol":56}]},"55":{"partial":false,"source":"                    '; charset=' + opts.charSet;","missing":[{}]},"56":{"partial":false,"source":"                res.setHeader('Content-Type', type);","missing":[{"startCol":16,"endCol":51}]},"59":{"partial":false,"source":"                res.set('ETag', opts.etag(stats, opts));","missing":[{"startCol":16,"endCol":55},{"startCol":32,"endCol":54}]},"73":{"partial":false,"source":"                file = path.join(file, opts.default);","missing":[{"startCol":16,"endCol":53},{"startCol":23,"endCol":52}]},"74":{"partial":false,"source":"                fs.stat(file, function (dirErr, dirStats) {","missing":[{}]},"75":{"partial":false,"source":"                    serveFileFromStats(file,","missing":[{}]},"76":{"partial":false,"source":"                        dirErr,","missing":[{}]},"77":{"partial":false,"source":"                        dirStats,","missing":[{}]},"78":{"partial":false,"source":"                        false,","missing":[{}]},"79":{"partial":false,"source":"                        req,","missing":[{}]},"80":{"partial":false,"source":"                        res,","missing":[{}]},"81":{"partial":false,"source":"                        next);","missing":[{}]},"82":{"partial":false,"source":"                });","missing":[{}]},"99":{"partial":true,"source":"        if (req.method !== 'GET' && req.method !== 'HEAD') {","missing":[{"startCol":36,"endCol":57}]},"100":{"partial":false,"source":"            next(new MethodNotAllowedError(req.method));","missing":[{"startCol":12,"endCol":55}]},"101":{"partial":false,"source":"            return;","missing":[{"startCol":12,"endCol":19}]},"105":{"partial":false,"source":"            next(new NotAuthorizedError(req.path()));","missing":[{"startCol":12,"endCol":52},{"startCol":40,"endCol":50}]},"106":{"partial":false,"source":"            return;","missing":[{"startCol":12,"endCol":19}]},"109":{"partial":true,"source":"        if (opts.match && !opts.match.test(file)) {","missing":[{"startCol":26,"endCol":48},{"startCol":27,"endCol":48}]},"110":{"partial":false,"source":"            next(new NotAuthorizedError(req.path()));","missing":[{"startCol":12,"endCol":52},{"startCol":40,"endCol":50}]},"111":{"partial":false,"source":"            return;","missing":[{"startCol":12,"endCol":19}]},"114":{"partial":true,"source":"        if (opts.gzip && req.acceptsEncoding('gzip')) {","missing":[{"startCol":25,"endCol":52}]},"115":{"partial":false,"source":"            fs.stat(file + '.gz', function (err, stats) {","missing":[{},{"startCol":20,"endCol":24}]},"116":{"partial":false,"source":"                if (!err) {","missing":[{"startCol":20,"endCol":24},{},{"startCol":21,"endCol":24}]},"117":{"partial":false,"source":"                    res.setHeader('Content-Encoding', 'gzip');","missing":[{"startCol":20,"endCol":61},{}]},"118":{"partial":false,"source":"                    serveFileFromStats(file,","missing":[{}]},"119":{"partial":false,"source":"                        err,","missing":[{}]},"120":{"partial":false,"source":"                        stats,","missing":[{}]},"121":{"partial":false,"source":"                        true,","missing":[{}]},"122":{"partial":false,"source":"                        req,","missing":[{}]},"123":{"partial":false,"source":"                        res,","missing":[{}]},"124":{"partial":false,"source":"                        next);","missing":[{}]},"125":{"partial":false,"source":"                } else {","missing":[{}]},"126":{"partial":false,"source":"                    serveNormal(file, req, res, next);","missing":[{},{"startCol":20,"endCol":53}]},"127":{"partial":false,"source":"                }","missing":[{}]},"128":{"partial":false,"source":"            });","missing":[{}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar fs = require('fs');\nvar path = require('path');\nvar escapeRE = require('escape-regexp-component');\n\nvar assert = require('assert-plus');\nvar mime = require('mime');\nvar errors = require('../errors');\n\n\n///--- Globals\n\nvar MethodNotAllowedError = errors.MethodNotAllowedError;\nvar NotAuthorizedError = errors.NotAuthorizedError;\nvar ResourceNotFoundError = errors.ResourceNotFoundError;\n\n\n///--- Functions\n\nfunction serveStatic(opts) {\n    opts = opts || {};\n    assert.object(opts, 'options');\n    assert.string(opts.directory, 'options.directory');\n    assert.optionalNumber(opts.maxAge, 'options.maxAge');\n    assert.optionalObject(opts.match, 'options.match');\n    assert.optionalString(opts.charSet, 'options.charSet');\n\n    var p = path.normalize(opts.directory).replace(/\\\\/g, '/');\n    var re = new RegExp('^' + escapeRE(p) + '/?.*');\n\n    function serveFileFromStats(file, err, stats, isGzip, req, res, next) {\n        if (err) {\n            next(new ResourceNotFoundError(err,\n                req.path()));\n            return;\n        } else if (!stats.isFile()) {\n            next(new ResourceNotFoundError('%s does not exist', req.path()));\n            return;\n        }\n\n        if (res.handledGzip && isGzip) {\n            res.handledGzip();\n        }\n\n        var fstream = fs.createReadStream(file + (isGzip ? '.gz' : ''));\n        var maxAge = opts.maxAge === undefined ? 3600 : opts.maxAge;\n        fstream.once('open', function (fd) {\n            res.cache({maxAge: maxAge});\n            res.set('Content-Length', stats.size);\n            res.set('Content-Type', mime.lookup(file));\n            res.set('Last-Modified', stats.mtime);\n            if (opts.charSet) {\n                var type = res.getHeader('Content-Type') +\n                    '; charset=' + opts.charSet;\n                res.setHeader('Content-Type', type);\n            }\n            if (opts.etag) {\n                res.set('ETag', opts.etag(stats, opts));\n            }\n            res.writeHead(200);\n            fstream.pipe(res);\n            fstream.once('end', function () {\n                next(false);\n            });\n        });\n    }\n\n    function serveNormal(file, req, res, next) {\n        fs.stat(file, function (err, stats) {\n            if (!err && stats.isDirectory() && opts.default) {\n                // Serve an index.html page or similar\n                file = path.join(file, opts.default);\n                fs.stat(file, function (dirErr, dirStats) {\n                    serveFileFromStats(file,\n                        dirErr,\n                        dirStats,\n                        false,\n                        req,\n                        res,\n                        next);\n                });\n            } else {\n                serveFileFromStats(file,\n                    err,\n                    stats,\n                    false,\n                    req,\n                    res,\n                    next);\n            }\n        });\n    }\n\n    function serve(req, res, next) {\n        var file = path.join(opts.directory,\n            decodeURIComponent(req.path()));\n\n        if (req.method !== 'GET' && req.method !== 'HEAD') {\n            next(new MethodNotAllowedError(req.method));\n            return;\n        }\n\n        if (!re.test(file.replace(/\\\\/g, '/'))) {\n            next(new NotAuthorizedError(req.path()));\n            return;\n        }\n\n        if (opts.match && !opts.match.test(file)) {\n            next(new NotAuthorizedError(req.path()));\n            return;\n        }\n\n        if (opts.gzip && req.acceptsEncoding('gzip')) {\n            fs.stat(file + '.gz', function (err, stats) {\n                if (!err) {\n                    res.setHeader('Content-Encoding', 'gzip');\n                    serveFileFromStats(file,\n                        err,\n                        stats,\n                        true,\n                        req,\n                        res,\n                        next);\n                } else {\n                    serveNormal(file, req, res, next);\n                }\n            });\n        } else {\n            serveNormal(file, req, res, next);\n        }\n\n    }\n\n    return (serve);\n}\n\nmodule.exports = serveStatic;","blocks":{"total":23,"seen":9,"missing":14,"percentage":0.391304347826087}},"hash":"04c3e3c7f4e71db6b51ac90082c5fbea"},"/Users/yunong/workspace/node-restify/lib/plugins/throttle.js":{"stats":{"percentage":0.9655172413793104,"lines":[{"lineno":25},{"lineno":26},{"lineno":97},{"lineno":191},{"lineno":202},{"lineno":204},{"lineno":208},{"lineno":210},{"lineno":216}],"missing":9,"seen":252,"total":261,"coverage":{"25":{"partial":true,"source":"        else if (arguments[i] && x)","missing":[{"startCol":33,"endCol":34}]},"26":{"partial":false,"source":"            return (false);","missing":[{"startCol":12,"endCol":27}]},"97":{"partial":false,"source":"        this.time = now - 1000;","missing":[{"startCol":8,"endCol":31},{"startCol":20,"endCol":23}]},"191":{"partial":false,"source":"        throw new Error('(ip ^ username ^ xff)');","missing":[{"startCol":8,"endCol":49}]},"202":{"partial":false,"source":"            attr = req.connection.remoteAddress;","missing":[{"startCol":12,"endCol":48}]},"204":{"partial":false,"source":"            attr = req.headers['x-forwarded-for'];","missing":[{"startCol":12,"endCol":50}]},"208":{"partial":false,"source":"            req.log.warn({config: options},","missing":[{}]},"209":{"partial":false,"source":"                'Invalid throttle configuration');","missing":[{}]},"210":{"partial":false,"source":"            return (next());","missing":[{"startCol":12,"endCol":28},{"startCol":20,"endCol":26}]},"216":{"partial":false,"source":"            return (next());","missing":[{"startCol":12,"endCol":28},{"startCol":20,"endCol":26}]}},"source":"// Copyright 2012 Mark Cavage <mcavage@gmail.com> All rights reserved.\n\nvar sprintf = require('util').format;\n\nvar assert = require('assert-plus');\nvar LRU = require('lru-cache');\n\nvar errors = require('../errors');\n\n\n///--- Globals\n\nvar TooManyRequestsError = errors.TooManyRequestsError;\n\nvar MESSAGE = 'You have exceeded your request rate of %s r/s.';\n\n\n///--- Helpers\n\nfunction xor() {\n    var x = false;\n    for (var i = 0; i < arguments.length; i++) {\n        if (arguments[i] && !x)\n            x = true;\n        else if (arguments[i] && x)\n            return (false);\n    }\n    return (x);\n}\n\n\n///--- Internal Class (TokenBucket)\n\n/**\n * An implementation of the Token Bucket algorithm.\n *\n * Basically, in network throttling, there are two \"mainstream\"\n * algorithms for throttling requests, Token Bucket and Leaky Bucket.\n * For restify, I went with Token Bucket.  For a good description of the\n * algorithm, see: http://en.wikipedia.org/wiki/Token_bucket\n *\n * In the options object, you pass in the total tokens and the fill rate.\n * Practically speaking, this means \"allow `fill rate` requests/second,\n * with bursts up to `total tokens`\".  Note that the bucket is initialized\n * to full.\n *\n * Also, in googling, I came across a concise python implementation, so this\n * is just a port of that. Thanks http://code.activestate.com/recipes/511490 !\n *\n * @param {Object} options contains the parameters:\n *                   - {Number} capacity the maximum burst.\n *                   - {Number} fillRate the rate to refill tokens.\n */\nfunction TokenBucket(options) {\n    assert.object(options, 'options');\n    assert.number(options.capacity, 'options.capacity');\n    assert.number(options.fillRate, 'options.fillRate');\n\n    this.tokens = this.capacity = options.capacity;\n    this.fillRate = options.fillRate;\n    this.time = Date.now();\n}\n\n\n/**\n * Consume N tokens from the bucket.\n *\n * If there is not capacity, the tokens are not pulled from the bucket.\n *\n * @param {Number} tokens the number of tokens to pull out.\n * @return {Boolean} true if capacity, false otherwise.\n */\nTokenBucket.prototype.consume = function consume(tokens) {\n    if (tokens <= this._fill()) {\n        this.tokens -= tokens;\n        return (true);\n    }\n\n    return (false);\n};\n\n\n/**\n * Fills the bucket with more tokens.\n *\n * Rather than do some whacky setTimeout() deal, we just approximate refilling\n * the bucket by tracking elapsed time from the last time we touched the bucket.\n *\n * Simply, we set the bucket size to min(totalTokens,\n *                                       current + (fillRate * elapsed time)).\n *\n * @return {Number} the current number of tokens in the bucket.\n */\nTokenBucket.prototype._fill = function _fill() {\n    var now = Date.now();\n    if (now < this.time) // reset account for clock drift (like DST)\n        this.time = now - 1000;\n\n    if (this.tokens < this.capacity) {\n        var delta = this.fillRate * ((now - this.time) / 1000);\n        this.tokens = Math.min(this.capacity, this.tokens + delta);\n    }\n    this.time = now;\n\n    return (this.tokens);\n};\n\n\n///--- Internal Class (TokenTable)\n// Just a wrapper over LRU that supports put/get to store token -> bucket\n// mappings\n\nfunction TokenTable(options) {\n    assert.object(options, 'options');\n\n    this.table = new LRU(options.size || 10000);\n}\n\n\nTokenTable.prototype.put = function put(key, value) {\n    this.table.set(key, value);\n};\n\n\nTokenTable.prototype.get = function get(key) {\n    return (this.table.get(key));\n};\n\n\n///--- Exported API\n\n/**\n * Creates an API rate limiter that can be plugged into the standard\n * restify request handling pipeline.\n *\n * This throttle gives you three options on which to throttle:\n * username, IP address and 'X-Forwarded-For'. IP/XFF is a /32 match,\n * so keep that in mind if using it.  Username takes the user specified\n * on req.username (which gets automagically set for supported Authorization\n * types; otherwise set it yourself with a filter that runs before this).\n *\n * In both cases, you can set a `burst` and a `rate` (in requests/seconds),\n * as an integer/float.  Those really translate to the `TokenBucket`\n * algorithm, so read up on that (or see the comments above...).\n *\n * In either case, the top level options burst/rate set a blanket throttling\n * rate, and then you can pass in an `overrides` object with rates for\n * specific users/IPs.  You should use overrides sparingly, as we make a new\n * TokenBucket to track each.\n *\n * On the `options` object ip and username are treated as an XOR.\n *\n * An example options object with overrides:\n *\n *  {\n *    burst: 10,  // Max 10 concurrent requests (if tokens)\n *    rate: 0.5,  // Steady state: 1 request / 2 seconds\n *    ip: true,   // throttle per IP\n *    overrides: {\n *      '192.168.1.1': {\n *        burst: 0,\n *        rate: 0    // unlimited\n *    }\n *  }\n *\n *\n * @param {Object} options required options with:\n *                   - {Number} burst (required).\n *                   - {Number} rate (required).\n *                   - {Boolean} ip (optional).\n *                   - {Boolean} username (optional).\n *                   - {Boolean} xff (optional).\n *                   - {Object} overrides (optional).\n *                   - {Object} tokensTable: a storage engine this plugin will\n *                              use to store throttling keys -> bucket mappings.\n *                              If you don't specify this, the default is to\n *                              use an in-memory O(1) LRU, with 10k distinct\n *                              keys.  Any implementation just needs to support\n *                              put/get.\n *                   - {Number} maxKeys: If using the default implementation,\n *                              you can specify how large you want the table to\n *                              be.  Default is 10000.\n * @return {Function} of type f(req, res, next) to be plugged into a route.\n * @throws {TypeError} on bad input.\n */\nfunction throttle(options) {\n    assert.object(options, 'options');\n    assert.number(options.burst, 'options.burst');\n    assert.number(options.rate, 'options.rate');\n    if (!xor(options.ip, options.xff, options.username))\n        throw new Error('(ip ^ username ^ xff)');\n\n    var table = options.tokensTable ||\n        new TokenTable({size: options.maxKeys});\n\n    function rateLimit(req, res, next) {\n        var attr;\n        var burst = options.burst;\n        var rate = options.rate;\n\n        if (options.ip) {\n            attr = req.connection.remoteAddress;\n        } else if (options.xff) {\n            attr = req.headers['x-forwarded-for'];\n        } else if (options.username) {\n            attr = req.username;\n        } else {\n            req.log.warn({config: options},\n                'Invalid throttle configuration');\n            return (next());\n        }\n\n        // Before bothering with overrides, see if this request\n        // even matches\n        if (!attr)\n            return (next());\n\n        // Check the overrides\n        if (options.overrides &&\n            options.overrides[attr] &&\n            options.overrides[attr].burst !== undefined &&\n            options.overrides[attr].rate !== undefined) {\n\n            burst = options.overrides[attr].burst;\n            rate = options.overrides[attr].rate;\n        }\n\n        if (!rate || !burst)\n            return (next());\n\n        var bucket = table.get(attr);\n        if (!bucket) {\n            bucket = new TokenBucket({\n                capacity: burst,\n                fillRate: rate\n            });\n            table.put(attr, bucket);\n        }\n\n        req.log.trace('Throttle(%s): num_tokens= %d',\n            attr, bucket.tokens);\n\n        if (!bucket.consume(1)) {\n            req.log.info({\n                address: req.connection.remoteAddress || '?',\n                method: req.method,\n                url: req.url,\n                user: req.username || '?'\n            }, 'Throttling');\n\n            var msg = sprintf(MESSAGE, rate);\n            return (next(new TooManyRequestsError(msg)));\n        }\n\n        return (next());\n    }\n\n    return (rateLimit);\n}\n\nmodule.exports = throttle;","blocks":{"total":25,"seen":18,"missing":7,"percentage":0.72}},"hash":"68be115c8e5145c62c5391abdc52b9d8"},"/Users/yunong/workspace/node-restify/lib/plugins/pre/pause.js":{"stats":{"percentage":0.5769230769230769,"lines":[{"lineno":8},{"lineno":12},{"lineno":15},{"lineno":16},{"lineno":17},{"lineno":18},{"lineno":19},{"lineno":20},{"lineno":22},{"lineno":23},{"lineno":24},{"lineno":25},{"lineno":27},{"lineno":28},{"lineno":30},{"lineno":31},{"lineno":33},{"lineno":34},{"lineno":37},{"lineno":47},{"lineno":48},{"lineno":51}],"missing":22,"seen":30,"total":52,"coverage":{"8":{"partial":false,"source":"        stream.__buffered.push(chunk);","missing":[{"startCol":8,"endCol":37}]},"12":{"partial":false,"source":"        stream.__rstfy_ended = true;","missing":[{"startCol":8,"endCol":36}]},"15":{"partial":false,"source":"    stream.__rstfy_ended = false;","missing":[{"startCol":4,"endCol":33}]},"16":{"partial":false,"source":"    stream.__rstfy_paused = true;","missing":[{"startCol":4,"endCol":33}]},"17":{"partial":false,"source":"    stream.__buffered = [];","missing":[{"startCol":4,"endCol":27}]},"18":{"partial":false,"source":"    stream.on('data', _buffer);","missing":[{"startCol":4,"endCol":30}]},"19":{"partial":false,"source":"    stream.once('end', _catchEnd);","missing":[{"startCol":4,"endCol":33}]},"20":{"partial":false,"source":"    stream.pause();","missing":[{"startCol":4,"endCol":18}]},"22":{"partial":false,"source":"    stream._resume = stream.resume;","missing":[{"startCol":4,"endCol":35}]},"23":{"partial":false,"source":"    stream.resume = function _rstfy_resume() {","missing":[{}]},"24":{"partial":false,"source":"        if (!stream.__rstfy_paused)","missing":[{"startCol":12,"endCol":34},{}]},"25":{"partial":false,"source":"            return;","missing":[{"startCol":12,"endCol":19},{}]},"26":{"partial":false,"source":"","missing":[{}]},"27":{"partial":false,"source":"        stream.removeListener('data', _buffer);","missing":[{"startCol":8,"endCol":46},{}]},"28":{"partial":false,"source":"        stream.removeListener('end', _catchEnd);","missing":[{"startCol":8,"endCol":47},{}]},"29":{"partial":false,"source":"","missing":[{}]},"30":{"partial":false,"source":"        stream.__buffered.forEach(stream.emit.bind(stream, 'data'));","missing":[{},{"startCol":8,"endCol":67},{"startCol":34,"endCol":66}]},"31":{"partial":false,"source":"        stream.__buffered.length = 0;","missing":[{"startCol":8,"endCol":37},{}]},"32":{"partial":false,"source":"","missing":[{}]},"33":{"partial":false,"source":"        stream._resume();","missing":[{},{"startCol":8,"endCol":24}]},"34":{"partial":false,"source":"        stream.resume = stream._resume;","missing":[{"startCol":8,"endCol":39},{}]},"35":{"partial":false,"source":"","missing":[{}]},"36":{"partial":false,"source":"        if (stream.__rstfy_ended)","missing":[{}]},"37":{"partial":false,"source":"            stream.emit('end');","missing":[{},{"startCol":12,"endCol":30}]},"38":{"partial":false,"source":"    };","missing":[{}]},"47":{"partial":false,"source":"        pauseStream(req);","missing":[{"startCol":8,"endCol":24}]},"48":{"partial":false,"source":"        next();","missing":[{"startCol":8,"endCol":14}]},"51":{"partial":false,"source":"    return (prePause);","missing":[{"startCol":4,"endCol":22}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\n\n///--- Helpers\n\nfunction pauseStream(stream) {\n    function _buffer(chunk) {\n        stream.__buffered.push(chunk);\n    }\n\n    function _catchEnd(chunk) {\n        stream.__rstfy_ended = true;\n    }\n\n    stream.__rstfy_ended = false;\n    stream.__rstfy_paused = true;\n    stream.__buffered = [];\n    stream.on('data', _buffer);\n    stream.once('end', _catchEnd);\n    stream.pause();\n\n    stream._resume = stream.resume;\n    stream.resume = function _rstfy_resume() {\n        if (!stream.__rstfy_paused)\n            return;\n\n        stream.removeListener('data', _buffer);\n        stream.removeListener('end', _catchEnd);\n\n        stream.__buffered.forEach(stream.emit.bind(stream, 'data'));\n        stream.__buffered.length = 0;\n\n        stream._resume();\n        stream.resume = stream._resume;\n\n        if (stream.__rstfy_ended)\n            stream.emit('end');\n    };\n}\n\n\n///--- Exports\n\nmodule.exports = function pause() {\n\n    function prePause(req, res, next) {\n        pauseStream(req);\n        next();\n    }\n\n    return (prePause);\n};","blocks":{"total":8,"seen":0,"missing":8,"percentage":0}},"hash":"64ec29e3a071aa4ee646cbeab88e4dc7"},"/Users/yunong/workspace/node-restify/lib/plugins/pre/user_agent.js":{"stats":{"percentage":0.7083333333333334,"lines":[{"lineno":23},{"lineno":24},{"lineno":25},{"lineno":27},{"lineno":28},{"lineno":29},{"lineno":32},{"lineno":34},{"lineno":35},{"lineno":37},{"lineno":38},{"lineno":39},{"lineno":42},{"lineno":45}],"missing":14,"seen":34,"total":48,"coverage":{"23":{"partial":false,"source":"    assert.optionalObject(opts, 'options');","missing":[{"startCol":4,"endCol":42}]},"24":{"partial":false,"source":"    opts = opts || {};","missing":[{"startCol":4,"endCol":22},{"startCol":11,"endCol":15}]},"25":{"partial":false,"source":"    assert.optionalObject(opts.userAgentRegExp, 'options.userAgentRegExp');","missing":[{"startCol":4,"endCol":74}]},"27":{"partial":false,"source":"    var re = opts.userAgentRegExp;","missing":[{"startCol":4,"endCol":34}]},"28":{"partial":false,"source":"    if (!re)","missing":[{"startCol":8,"endCol":11},{"startCol":9,"endCol":11}]},"29":{"partial":false,"source":"        re = /^curl.+/;","missing":[{"startCol":8,"endCol":23}]},"32":{"partial":false,"source":"        var ua = req.headers['user-agent'];","missing":[{"startCol":8,"endCol":43}]},"34":{"partial":false,"source":"        if (ua && re.test(ua))","missing":[{"startCol":12,"endCol":14},{"startCol":18,"endCol":29}]},"35":{"partial":false,"source":"            res.setHeader('Connection', 'close');","missing":[{"startCol":12,"endCol":48}]},"37":{"partial":false,"source":"        if (req.method === 'HEAD') {","missing":[{"startCol":12,"endCol":33}]},"38":{"partial":false,"source":"            res.once('header',","missing":[{}]},"39":{"partial":false,"source":"                res.removeHeader.bind(res, 'content-length'));","missing":[{"startCol":16,"endCol":60},{}]},"42":{"partial":false,"source":"        next();","missing":[{"startCol":8,"endCol":14}]},"45":{"partial":false,"source":"    return (handleUserAgent);","missing":[{"startCol":4,"endCol":29}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\n\n\n///--- API\n\n/**\n * This basically exists for curl.  curl on HEAD requests usually\n * just sits there and hangs, unless you explicitly set\n * Connection:close.  And in general, you probably want to set\n * Connection: close to curl anyway.\n *\n * Also, because curl spits out an annoying message to stderr about\n * remaining bytes if content-length is set, this plugin also drops\n * the content-length header (some user agents handle it and want it,\n * curl does not).\n *\n * To be slightly more generic, the options block takes a user\n * agent regexp, however.\n */\nfunction userAgentConnection(opts) {\n    assert.optionalObject(opts, 'options');\n    opts = opts || {};\n    assert.optionalObject(opts.userAgentRegExp, 'options.userAgentRegExp');\n\n    var re = opts.userAgentRegExp;\n    if (!re)\n        re = /^curl.+/;\n\n    function handleUserAgent(req, res, next) {\n        var ua = req.headers['user-agent'];\n\n        if (ua && re.test(ua))\n            res.setHeader('Connection', 'close');\n\n        if (req.method === 'HEAD') {\n            res.once('header',\n                res.removeHeader.bind(res, 'content-length'));\n        }\n\n        next();\n    }\n\n    return (handleUserAgent);\n}\n\nmodule.exports = userAgentConnection;","blocks":{"total":5,"seen":0,"missing":5,"percentage":0}},"hash":"c2c338a5341a5e876c2f99b296085e6b"},"/Users/yunong/workspace/node-restify/test/lib/helper.js":{"stats":{"percentage":0.9292929292929293,"lines":[{"lineno":25},{"lineno":27},{"lineno":42},{"lineno":44},{"lineno":59},{"lineno":60},{"lineno":94}],"missing":7,"seen":92,"total":99,"coverage":{"25":{"partial":false,"source":"                console.error('after: uncaught error\\n', +","missing":[{}]},"26":{"partial":false,"source":"                    err.stack);","missing":[{}]},"27":{"partial":false,"source":"                process.exit(1);","missing":[{"startCol":16,"endCol":31}]},"42":{"partial":false,"source":"                console.error('before: uncaught error\\n' +","missing":[{}]},"43":{"partial":false,"source":"                    err.stack);","missing":[{}]},"44":{"partial":false,"source":"                process.exit(1);","missing":[{"startCol":16,"endCol":31}]},"59":{"partial":false,"source":"                t.ifError(err);","missing":[{"startCol":16,"endCol":30}]},"60":{"partial":false,"source":"                t.end();","missing":[{"startCol":16,"endCol":23}]},"94":{"partial":false,"source":"            dtp = null;","missing":[{"startCol":12,"endCol":23}]}},"source":"// Copyright 2012 Mark Cavage.  All rights reserved.\n//\n// Just a simple wrapper over nodeunit's exports syntax. Also exposes\n// a common logger for all tests.\n//\n\nvar domain = require('domain');\n\nvar bunyan = require('bunyan');\nvar once = require('once');\n\nvar restify = require('../../lib');\n\n\n///--- Exports\n\nmodule.exports = {\n\n    after: function after(teardown) {\n        module.parent.exports.tearDown = function _teardown(callback) {\n            var d = domain.create();\n            var self = this;\n\n            d.once('error', function (err) {\n                console.error('after: uncaught error\\n', +\n                    err.stack);\n                process.exit(1);\n            });\n\n            d.run(function () {\n                teardown.call(self, once(callback));\n            });\n        };\n    },\n\n    before: function before(setup) {\n        module.parent.exports.setUp = function _setup(callback) {\n            var d = domain.create();\n            var self = this;\n\n            d.once('error', function (err) {\n                console.error('before: uncaught error\\n' +\n                    err.stack);\n                process.exit(1);\n            });\n\n            d.run(function () {\n                setup.call(self, once(callback));\n            });\n        };\n    },\n\n    test: function test(name, tester) {\n        module.parent.exports[name] = function _(t) {\n            var d = domain.create();\n            var self = this;\n\n            d.once('error', function (err) {\n                t.ifError(err);\n                t.end();\n            });\n\n            d.add(t);\n            d.run(function () {\n                t.end = once(function () {\n                    t.done();\n                });\n                t.notOk = function notOk(ok, message) {\n                    return (t.ok(!ok, message));\n                };\n\n                tester.call(self, t);\n            });\n        };\n    },\n\n    getLog: function (name, stream, level) {\n        return (bunyan.createLogger({\n            level: (process.env.LOG_LEVEL || level || 'fatal'),\n            name: name || process.argv[1],\n            stream: stream || process.stdout,\n            src: true,\n            serializers: restify.bunyan.serializers\n        }));\n    },\n\n\n    get dtrace() {\n        var dtp;\n        try {\n            var d = require('dtrace-provider');\n            dtp = d.createDTraceProvider('restifyUnitTest');\n        } catch (e) {\n            dtp = null;\n        }\n\n        return (dtp);\n    }\n};","blocks":{"total":18,"seen":14,"missing":4,"percentage":0.7777777777777778}},"hash":"a962d25f442b15a4bc4b1edd07746fa0"},"/Users/yunong/workspace/node-restify/lib/bunyan_helper.js":{"stats":{"percentage":0.7854077253218884,"lines":[{"lineno":31},{"lineno":32},{"lineno":33},{"lineno":70},{"lineno":87},{"lineno":90},{"lineno":101},{"lineno":102},{"lineno":103},{"lineno":105},{"lineno":106},{"lineno":107},{"lineno":109},{"lineno":110},{"lineno":115},{"lineno":116},{"lineno":117},{"lineno":120},{"lineno":122},{"lineno":123},{"lineno":124},{"lineno":125},{"lineno":127},{"lineno":128},{"lineno":130},{"lineno":131},{"lineno":134},{"lineno":136},{"lineno":137},{"lineno":138},{"lineno":140},{"lineno":141},{"lineno":143},{"lineno":144},{"lineno":147},{"lineno":150},{"lineno":156},{"lineno":167},{"lineno":168},{"lineno":170},{"lineno":173},{"lineno":175},{"lineno":178},{"lineno":179},{"lineno":180},{"lineno":182},{"lineno":183},{"lineno":189},{"lineno":190},{"lineno":192}],"missing":50,"seen":183,"total":233,"coverage":{"31":{"partial":false,"source":"        assert.optionalBool(s.raw, 'stream.raw');","missing":[{"startCol":8,"endCol":48}]},"32":{"partial":false,"source":"        assert.object(s.stream, 'stream.stream');","missing":[{"startCol":8,"endCol":48}]},"33":{"partial":false,"source":"        streams.push(s);","missing":[{"startCol":8,"endCol":23}]},"70":{"partial":true,"source":"    this.level = opts.level ? bunyan.resolveLevel(opts.level) : bunyan.WARN;","missing":[{"startCol":30,"endCol":61}]},"87":{"partial":false,"source":"        opts.streams.forEach(appendStream.bind(null, this.streams));","missing":[{"startCol":8,"endCol":67},{"startCol":29,"endCol":66}]},"90":{"partial":true,"source":"    for (var i = 0; i < this.streams.length; i++) {","missing":[{"startCol":45,"endCol":48}]},"101":{"partial":false,"source":"    var req_id = record.req_id || DEFAULT_REQ_ID;","missing":[{"startCol":4,"endCol":49},{"startCol":17,"endCol":48},{"startCol":34,"endCol":48}]},"102":{"partial":false,"source":"    var ring;","missing":[{"startCol":4,"endCol":13}]},"103":{"partial":false,"source":"    var self = this;","missing":[{"startCol":4,"endCol":20}]},"105":{"partial":false,"source":"    if (!(ring = this.requestMap.get(req_id))) {","missing":[{"startCol":8,"endCol":45},{"startCol":17,"endCol":44}]},"106":{"partial":false,"source":"        if (++this._offset > this.maxRequestIds)","missing":[{"startCol":12,"endCol":26}]},"107":{"partial":false,"source":"            this._offset = 0;","missing":[{"startCol":12,"endCol":29}]},"109":{"partial":false,"source":"        if (this._rings.length <= this._offset) {","missing":[{"startCol":12,"endCol":46}]},"110":{"partial":false,"source":"            this._rings.push(new bunyan.RingBuffer({","missing":[{}]},"111":{"partial":false,"source":"                limit: self.limit","missing":[{}]},"112":{"partial":false,"source":"            }));","missing":[{}]},"115":{"partial":false,"source":"        ring = this._rings[this._offset];","missing":[{"startCol":8,"endCol":41}]},"116":{"partial":false,"source":"        ring.records.length = 0;","missing":[{"startCol":8,"endCol":32}]},"117":{"partial":false,"source":"        this.requestMap.set(req_id, ring);","missing":[{"startCol":8,"endCol":41}]},"120":{"partial":false,"source":"    assert.ok(ring, 'no ring found');","missing":[{"startCol":4,"endCol":36}]},"122":{"partial":false,"source":"    if (record.level >= this.level) {","missing":[{"startCol":8,"endCol":34}]},"123":{"partial":false,"source":"        var i, r, ser;","missing":[{"startCol":8,"endCol":22}]},"124":{"partial":false,"source":"        for (i = 0; i < ring.records.length; i++) {","missing":[{"startCol":20,"endCol":21},{"startCol":45,"endCol":48}]},"125":{"partial":false,"source":"            r = ring.records[i];","missing":[{"startCol":12,"endCol":32}]},"127":{"partial":false,"source":"                ser = JSON.stringify(r,","missing":[{}]},"128":{"partial":false,"source":"                    bunyan.safeCycles()) + '\\n';","missing":[{},{"startCol":20,"endCol":39}]},"130":{"partial":false,"source":"            self.streams.forEach(function (s) {","missing":[{}]},"131":{"partial":false,"source":"                s.stream.write(s.raw ? r : ser);","missing":[{},{"startCol":16,"endCol":47},{"startCol":39,"endCol":40},{"startCol":43,"endCol":46}]},"132":{"partial":false,"source":"            });","missing":[{}]},"134":{"partial":false,"source":"        ring.records.length = 0;","missing":[{"startCol":8,"endCol":32}]},"136":{"partial":false,"source":"            var defaultRing = self.requestMap.get(DEFAULT_REQ_ID);","missing":[{"startCol":12,"endCol":66},{"startCol":30,"endCol":65}]},"137":{"partial":false,"source":"            for (i = 0; i < defaultRing.records.length; i++) {","missing":[{"startCol":24,"endCol":25},{"startCol":56,"endCol":59}]},"138":{"partial":false,"source":"                r = defaultRing.records[i];","missing":[{"startCol":16,"endCol":43}]},"140":{"partial":false,"source":"                    ser = JSON.stringify(r,","missing":[{}]},"141":{"partial":false,"source":"                        bunyan.safeCycles()) + '\\n';","missing":[{"startCol":24,"endCol":43},{}]},"143":{"partial":false,"source":"                self.streams.forEach(function (s) {","missing":[{}]},"144":{"partial":false,"source":"                    s.stream.write(s.raw ? r : ser);","missing":[{"startCol":20,"endCol":51},{"startCol":43,"endCol":44},{},{"startCol":47,"endCol":50}]},"145":{"partial":false,"source":"                });","missing":[{}]},"147":{"partial":false,"source":"            defaultRing.records.length = 0;","missing":[{"startCol":12,"endCol":43}]},"150":{"partial":false,"source":"        ring.write(record);","missing":[{"startCol":8,"endCol":26}]},"156":{"partial":false,"source":"    return (sprintf(STR_FMT,","missing":[{}]},"157":{"partial":false,"source":"        this.constructor.name,","missing":[{}]},"158":{"partial":false,"source":"        this.level,","missing":[{}]},"159":{"partial":false,"source":"        this.limit,","missing":[{}]},"160":{"partial":false,"source":"        this.maxRequestIds));","missing":[{}]},"167":{"partial":false,"source":"    if (!req)","missing":[{"startCol":8,"endCol":12},{"startCol":9,"endCol":12}]},"168":{"partial":false,"source":"        return (req);","missing":[{"startCol":8,"endCol":21}]},"170":{"partial":false,"source":"    var host;","missing":[{"startCol":4,"endCol":13}]},"173":{"partial":false,"source":"        host = req.host.split(':')[0];","missing":[{"startCol":8,"endCol":38},{"startCol":15,"endCol":34}]},"175":{"partial":false,"source":"        host = false;","missing":[{"startCol":8,"endCol":21}]},"178":{"partial":false,"source":"    return ({","missing":[{}]},"179":{"partial":false,"source":"        method: req ? req.method : false,","missing":[{"startCol":35,"endCol":40},{},{"startCol":16,"endCol":19},{"startCol":22,"endCol":32}]},"180":{"partial":false,"source":"        url: req ? req.path : false,","missing":[{"startCol":13,"endCol":16},{"startCol":19,"endCol":27},{},{"startCol":30,"endCol":35}]},"181":{"partial":false,"source":"        address: host,","missing":[{}]},"182":{"partial":false,"source":"        port: req ? req.port : false,","missing":[{"startCol":20,"endCol":28},{"startCol":31,"endCol":36},{},{"startCol":14,"endCol":17}]},"183":{"partial":false,"source":"        headers: req ? req.headers : false","missing":[{},{"startCol":17,"endCol":20},{"startCol":23,"endCol":34},{"startCol":37,"endCol":42}]},"184":{"partial":false,"source":"    });","missing":[{}]},"189":{"partial":false,"source":"    if (!res || !res.statusCode)","missing":[{"startCol":8,"endCol":12},{"startCol":9,"endCol":12},{"startCol":16,"endCol":31}]},"190":{"partial":false,"source":"        return (res);","missing":[{"startCol":8,"endCol":21}]},"192":{"partial":false,"source":"    return ({","missing":[{}]},"193":{"partial":false,"source":"        statusCode: res.statusCode,","missing":[{}]},"194":{"partial":false,"source":"        headers: res.headers","missing":[{}]},"195":{"partial":false,"source":"    });","missing":[{}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar Stream = require('stream').Stream;\nvar util = require('util');\n\nvar assert = require('assert-plus');\nvar bunyan = require('bunyan');\nvar LRU = require('lru-cache');\nvar uuid = require('node-uuid');\n\n\n///--- Globals\n\nvar sprintf = util.format;\nvar DEFAULT_REQ_ID = uuid.v4();\nvar STR_FMT = '[object %s<level=%d, limit=%d, maxRequestIds=%d>]';\n\n\n///--- Helpers\n\nfunction appendStream(streams, s) {\n    assert.arrayOfObject(streams, 'streams');\n    assert.object(s, 'stream');\n\n    if (s instanceof Stream) {\n        streams.push({\n            raw: false,\n            stream: s\n        });\n    } else {\n        assert.optionalBool(s.raw, 'stream.raw');\n        assert.object(s.stream, 'stream.stream');\n        streams.push(s);\n    }\n}\n\n\n///--- API\n\n/**\n * A Bunyan stream to capture records in a ring buffer and only pass through\n * on a higher-level record. E.g. buffer up all records but only dump when\n * getting a WARN or above.\n *\n * @param {Object} options contains the parameters:\n *      - {Object} stream The stream to which to write when dumping captured\n *        records. One of `stream` or `streams` must be specified.\n *      - {Array} streams One of `stream` or `streams` must be specified.\n *      - {Number|String} level The level at which to trigger dumping captured\n *        records. Defaults to bunyan.WARN.\n *      - {Number} maxRecords Number of records to capture. Default 100.\n *      - {Number} maxRequestIds Number of simultaneous request id capturing\n *        buckets to maintain. Default 1000.\n *      - {Boolean} dumpDefault If true, then dump captured records on the\n *        *default* request id when dumping. I.e. dump records logged without\n *        a \"req_id\" field. Default false.\n */\nfunction RequestCaptureStream(opts) {\n    assert.object(opts, 'options');\n    assert.optionalObject(opts.stream, 'options.stream');\n    assert.optionalArrayOfObject(opts.streams, 'options.streams');\n    assert.optionalNumber(opts.level, 'options.level');\n    assert.optionalNumber(opts.maxRecords, 'options.maxRecords');\n    assert.optionalNumber(opts.maxRequestIds, 'options.maxRequestIds');\n    assert.optionalBool(opts.dumpDefault, 'options.dumpDefault');\n\n    var self = this;\n    Stream.call(this);\n\n    this.level = opts.level ? bunyan.resolveLevel(opts.level) : bunyan.WARN;\n    this.limit = opts.maxRecords || 100;\n    this.maxRequestIds = opts.maxRequestIds || 1000;\n    this.requestMap = LRU({\n        max: self.maxRequestIds\n    });\n    this.dumpDefault = opts.dumpDefault;\n\n    this._offset = -1;\n    this._rings = [];\n\n    this.streams = [];\n\n    if (opts.stream)\n        appendStream(this.streams, opts.stream);\n\n    if (opts.streams)\n        opts.streams.forEach(appendStream.bind(null, this.streams));\n\n    this.haveNonRawStreams = false;\n    for (var i = 0; i < this.streams.length; i++) {\n        if (!this.streams[i].raw) {\n            this.haveNonRawStreams = true;\n            break;\n        }\n    }\n}\nutil.inherits(RequestCaptureStream, Stream);\n\n\nRequestCaptureStream.prototype.write = function write(record) {\n    var req_id = record.req_id || DEFAULT_REQ_ID;\n    var ring;\n    var self = this;\n\n    if (!(ring = this.requestMap.get(req_id))) {\n        if (++this._offset > this.maxRequestIds)\n            this._offset = 0;\n\n        if (this._rings.length <= this._offset) {\n            this._rings.push(new bunyan.RingBuffer({\n                limit: self.limit\n            }));\n        }\n\n        ring = this._rings[this._offset];\n        ring.records.length = 0;\n        this.requestMap.set(req_id, ring);\n    }\n\n    assert.ok(ring, 'no ring found');\n\n    if (record.level >= this.level) {\n        var i, r, ser;\n        for (i = 0; i < ring.records.length; i++) {\n            r = ring.records[i];\n            if (this.haveNonRawStreams) {\n                ser = JSON.stringify(r,\n                    bunyan.safeCycles()) + '\\n';\n            }\n            self.streams.forEach(function (s) {\n                s.stream.write(s.raw ? r : ser);\n            });\n        }\n        ring.records.length = 0;\n        if (this.dumpDefault) {\n            var defaultRing = self.requestMap.get(DEFAULT_REQ_ID);\n            for (i = 0; i < defaultRing.records.length; i++) {\n                r = defaultRing.records[i];\n                if (this.haveNonRawStreams) {\n                    ser = JSON.stringify(r,\n                        bunyan.safeCycles()) + '\\n';\n                }\n                self.streams.forEach(function (s) {\n                    s.stream.write(s.raw ? r : ser);\n                });\n            }\n            defaultRing.records.length = 0;\n        }\n    } else {\n        ring.write(record);\n    }\n};\n\n\nRequestCaptureStream.prototype.toString = function toString() {\n    return (sprintf(STR_FMT,\n        this.constructor.name,\n        this.level,\n        this.limit,\n        this.maxRequestIds));\n};\n\n\n///--- Serializers\n\nfunction clientReq(req) {\n    if (!req)\n        return (req);\n\n    var host;\n\n    try {\n        host = req.host.split(':')[0];\n    } catch (e) {\n        host = false;\n    }\n\n    return ({\n        method: req ? req.method : false,\n        url: req ? req.path : false,\n        address: host,\n        port: req ? req.port : false,\n        headers: req ? req.headers : false\n    });\n}\n\n\nfunction clientRes(res) {\n    if (!res || !res.statusCode)\n        return (res);\n\n    return ({\n        statusCode: res.statusCode,\n        headers: res.headers\n    });\n}\n\n\nvar SERIALIZERS = {\n    err: bunyan.stdSerializers.err,\n    req: bunyan.stdSerializers.req,\n    res: bunyan.stdSerializers.res,\n    client_req: clientReq,\n    client_res: clientRes\n};\n\n\n///--- Exports\n\nmodule.exports = {\n    RequestCaptureStream: RequestCaptureStream,\n    serializers: SERIALIZERS,\n\n    createLogger: function createLogger(name) {\n        return (bunyan.createLogger({\n            name: name,\n            serializers: SERIALIZERS,\n            streams: [\n                {\n                    level: 'warn',\n                    stream: process.stderr\n                },\n                {\n                    level: 'debug',\n                    type: 'raw',\n                    stream: new RequestCaptureStream({\n                        stream: process.stderr\n                    })\n                }\n            ]\n        }));\n    }\n};","blocks":{"total":29,"seen":7,"missing":22,"percentage":0.2413793103448276}},"hash":"17126a0c53cadd4f4942f6d4da76762e"},"/Users/yunong/workspace/node-restify/lib/router.js":{"stats":{"percentage":0.9691119691119691,"lines":[{"lineno":124},{"lineno":148},{"lineno":155},{"lineno":181},{"lineno":214},{"lineno":222},{"lineno":259},{"lineno":260},{"lineno":463},{"lineno":506},{"lineno":507},{"lineno":509},{"lineno":510},{"lineno":511},{"lineno":514},{"lineno":517}],"missing":16,"seen":502,"total":518,"coverage":{"124":{"partial":false,"source":"        this.contentType = [this.contentType];","missing":[{"startCol":8,"endCol":46}]},"148":{"partial":false,"source":"        this.versions = [this.versions];","missing":[{"startCol":8,"endCol":40}]},"155":{"partial":false,"source":"        throw new InvalidArgumentError('%s is not a valid semver', v);","missing":[{"startCol":8,"endCol":70}]},"181":{"partial":false,"source":"        return (null);","missing":[{"startCol":8,"endCol":22}]},"214":{"partial":false,"source":"            versions = [versions];","missing":[{"startCol":12,"endCol":34}]},"222":{"partial":false,"source":"        return (false);","missing":[{"startCol":8,"endCol":23}]},"259":{"partial":false,"source":"        this.log.warn('router.unmount(%s): route does not exist', name);","missing":[{"startCol":8,"endCol":71}]},"260":{"partial":false,"source":"        return (false);","missing":[{"startCol":8,"endCol":23}]},"463":{"partial":false,"source":"            return (false);","missing":[{"startCol":12,"endCol":27}]},"506":{"partial":false,"source":"    var self = this;","missing":[{"startCol":4,"endCol":20}]},"507":{"partial":false,"source":"    var str = this.name + ':\\n';","missing":[{"startCol":4,"endCol":32},{"startCol":14,"endCol":31}]},"509":{"partial":false,"source":"    Object.keys(this.routes).forEach(function (k) {","missing":[{},{"startCol":4,"endCol":28}]},"510":{"partial":false,"source":"        var routes = self.routes[k].map(function (r) {","missing":[{}]},"511":{"partial":false,"source":"            return (r.name);","missing":[{"startCol":12,"endCol":28},{}]},"512":{"partial":false,"source":"        });","missing":[{}]},"513":{"partial":false,"source":"","missing":[{}]},"514":{"partial":false,"source":"        str += '\\t\\t' + k + ': [' + routes.join(', ') + ']\\n';","missing":[{},{"startCol":8,"endCol":62},{"startCol":15,"endCol":25},{"startCol":24,"endCol":25},{"startCol":36,"endCol":53}]},"515":{"partial":false,"source":"    });","missing":[{}]},"517":{"partial":false,"source":"    return (str);","missing":[{"startCol":4,"endCol":17}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar EventEmitter = require('events').EventEmitter;\nvar url = require('url');\nvar util = require('util');\n\nvar assert = require('assert-plus');\nvar LRU = require('lru-cache');\nvar Negotiator = require('negotiator');\nvar semver = require('semver');\n\nvar cors = require('./plugins/cors');\nvar errors = require('./errors');\nvar utils = require('./utils');\n\n\n///--- Globals\n\nvar DEF_CT = 'application/octet-stream';\n\nvar BadRequestError = errors.BadRequestError;\nvar InternalError = errors.InternalError;\nvar InvalidArgumentError = errors.InvalidArgumentError;\nvar InvalidVersionError = errors.InvalidVersionError;\nvar MethodNotAllowedError = errors.MethodNotAllowedError;\nvar ResourceNotFoundError = errors.ResourceNotFoundError;\nvar UnsupportedMediaTypeError = errors.UnsupportedMediaTypeError;\n\nvar shallowCopy = utils.shallowCopy;\n\n\n///--- Helpers\n\n\nfunction matchURL(re, req) {\n    var i = 0;\n    var result = re.exec(req.path());\n    var params = {};\n\n    if (!result)\n        return (false);\n\n    // This means the user original specified a regexp match, not a url\n    // string like /:foo/:bar\n    if (!re.restifyParams) {\n        for (i = 1; i < result.length; i++)\n            params[(i - 1)] = result[i];\n\n        return (params);\n    }\n\n    // This was a static string, like /foo\n    if (re.restifyParams.length === 0)\n        return (params);\n\n    // This was the \"normal\" case, of /foo/:id\n    re.restifyParams.forEach(function (p) {\n        if (++i < result.length)\n            params[p] = decodeURIComponent(result[i]);\n    });\n\n    return (params);\n}\n\n\nfunction compileURL(options) {\n    if (options.url instanceof RegExp)\n        return (options.url);\n    assert.string(options.url, 'url');\n\n    var params = [];\n    var pattern = '^';\n    var re;\n    var _url = url.parse(options.url).pathname;\n    _url.split('/').forEach(function (frag) {\n        if (frag.length <= 0)\n            return (false);\n\n        pattern += '\\\\/+';\n        if (frag.charAt(0) === ':') {\n            var label = frag;\n            var index = frag.indexOf('(');\n            var subexp;\n            if (index === -1) {\n                if (options.urlParamPattern) {\n                    subexp = options.urlParamPattern;\n                } else {\n                    subexp = '[^/]*';\n                }\n            } else {\n                label = frag.substring(0, index);\n                subexp = frag.substring(index+1, frag.length-1);\n            }\n            pattern += '(' + subexp + ')';\n            params.push(label.slice(1));\n        } else {\n            pattern += frag;\n        }\n        return (true);\n    });\n\n    if (pattern === '^')\n        pattern += '\\\\/';\n    pattern += '$';\n\n    re = new RegExp(pattern, options.flags);\n    re.restifyParams = params;\n\n    return (re);\n}\n\n\n///--- API\n\nfunction Router(options) {\n    assert.object(options, 'options');\n    assert.object(options.log, 'options.log');\n\n    EventEmitter.call(this);\n\n    this.cache = LRU({max: 100});\n    this.contentType = options.contentType || [];\n    if (!Array.isArray(this.contentType))\n        this.contentType = [this.contentType];\n    assert.arrayOfString(this.contentType, 'options.contentType');\n\n    this.log = options.log;\n    this.mounts = {};\n    this.name = 'RestifyRouter';\n\n    // A list of methods to routes\n    this.routes = {\n        DELETE: [],\n        GET: [],\n        HEAD: [],\n        OPTIONS: [],\n        PATCH: [],\n        POST: [],\n        PUT: []\n    };\n\n    // So we can retrun 405 vs 404, we maintain a reverse mapping of URLs\n    // to method\n    this.reverse = {};\n\n    this.versions = options.versions || options.version || [];\n    if (!Array.isArray(this.versions))\n        this.versions = [this.versions];\n    assert.arrayOfString(this.versions, 'options.versions');\n\n    this.versions.forEach(function (v) {\n        if (semver.valid(v))\n            return (true);\n\n        throw new InvalidArgumentError('%s is not a valid semver', v);\n    });\n    this.versions.sort();\n\n}\nutil.inherits(Router, EventEmitter);\nmodule.exports = Router;\n\n\nRouter.prototype.render = function render(routeName, params, query) {\n    function pathItem(match, key) {\n        if (params.hasOwnProperty(key) === false) {\n            throw new Error('Route <' + routeName +\n                            '> is missing parameter <' +\n                            key + '>');\n        }\n        return ('/' + encodeURIComponent(params[key]));\n    }\n\n    function queryItem(key) {\n        return (encodeURIComponent(key) + '=' + encodeURIComponent(query[key]));\n    }\n\n    var routeKey = routeName.replace(/\\W/g, '').toLowerCase();\n    var route = this.mounts[routeKey];\n    if (!route)\n        return (null);\n\n    var _path = route.spec.path;\n    var _url = _path.replace(/\\/:([A-Za-z0-9_]+)(\\([^\\\\]+?\\))?/g, pathItem);\n    var items = Object.keys(query || {}).map(queryItem);\n    var queryString = items.length > 0 ? ('?' + items.join('&')) : '';\n    return (_url + queryString);\n};\n\n\nRouter.prototype.mount = function mount(options) {\n    assert.object(options, 'options');\n    assert.string(options.method, 'options.method');\n    assert.string(options.name, 'options.name');\n\n    var exists;\n    var name = options.name;\n    var route;\n    var routes = this.routes[options.method];\n    var self = this;\n    var type = options.contentType || self.contentType;\n    var versions = options.versions || options.version || self.versions;\n\n    if (type) {\n        if (!Array.isArray(type))\n            type = [type];\n        type.filter(function (t) {\n            return (t);\n        }).sort().join();\n    }\n\n    if (versions) {\n        if (!Array.isArray(versions))\n            versions = [versions];\n        versions.sort();\n    }\n\n    exists = routes.some(function (r) {\n        return (r.name === name);\n    });\n    if (exists)\n        return (false);\n\n    route = {\n        name: name,\n        method: options.method,\n        path: compileURL({\n            url: options.path || options.url,\n            flags: options.flags,\n            urlParamPattern: options.urlParamPattern\n        }),\n        spec: options,\n        types: type,\n        versions: versions\n    };\n    routes.push(route);\n\n    if (!this.reverse[route.path.source])\n        this.reverse[route.path.source] = [];\n\n    if (this.reverse[route.path.source].indexOf(route.method) === -1)\n        this.reverse[route.path.source].push(route.method);\n\n    this.mounts[route.name] = route;\n\n    this.emit('mount',\n        route.method,\n        route.path,\n        route.types,\n        route.versions);\n\n    return (route.name);\n};\n\n\nRouter.prototype.unmount = function unmount(name) {\n    var route = this.mounts[name];\n    if (!route) {\n        this.log.warn('router.unmount(%s): route does not exist', name);\n        return (false);\n    }\n\n    var reverse = this.reverse[route.path.source];\n    var routes = this.routes[route.method];\n    this.routes[route.method] = routes.filter(function (r) {\n        return (r.name !== route.name);\n    });\n\n    this.reverse[route.path.source] = reverse.filter(function (r) {\n        return (r !== route.method);\n    });\n\n    if (this.reverse[route.path.source].length === 0)\n        delete this.reverse[route.path.source];\n\n    delete this.mounts[name];\n\n    return (name);\n};\n\n\nRouter.prototype.get = function get(name, req, cb) {\n    var params;\n    var route = false;\n    var routes = this.routes[req.method] || [];\n\n    var routeName = name.replace(/\\W/g, '').toLowerCase();\n    for (var i = 0; i < routes.length; i++) {\n        if (routes[i].name === routeName) {\n            route = routes[i];\n            try {\n                params = matchURL(route.path, req);\n            } catch (e) {\n            }\n            break;\n        }\n    }\n\n    if (route) {\n        cb(null, route, params || {});\n    } else {\n        cb(new InternalError());\n    }\n};\n\n\nRouter.prototype.find = function find(req, res, callback) {\n    var candidates = [];\n    var ct = req.headers['content-type'] || DEF_CT;\n    var cacheKey = req.method + req.url + req.version() + ct;\n    var cacheVal;\n    var neg;\n    var params;\n    var r;\n    var reverse;\n    var routes = this.routes[req.method] || [];\n    var typed;\n    var versioned;\n\n    if ((cacheVal = this.cache.get(cacheKey))) {\n        res.methods = cacheVal.methods.slice();\n        callback(null, cacheVal, shallowCopy(cacheVal.params));\n        return;\n    }\n\n    for (var i = 0; i < routes.length; i++) {\n        try {\n            params = matchURL(routes[i].path, req);\n        } catch (e) {\n            this.log.trace({err: e}, 'error parsing URL');\n            callback(new BadRequestError(e.message));\n            return;\n        }\n\n        if (params === false)\n            continue;\n\n        reverse = this.reverse[routes[i].path.source];\n\n        if (routes[i].types.length && req.isUpload()) {\n            candidates.push({\n                p: params,\n                r: routes[i]\n            });\n            typed = true;\n            continue;\n        }\n\n        // GH-283: we want to find the latest version for a given route,\n        // not the first one.  However, if neither the client nor\n        // server specified any version, we're done, because neither\n        // cared\n        if (routes[i].versions.length === 0 && req.version() === '*') {\n            r = routes[i];\n            break;\n        }\n\n        if (routes[i].versions.length > 0) {\n            candidates.push({\n                p: params,\n                r: routes[i]\n            });\n            versioned = true;\n        }\n    }\n\n    if (!r) {\n        // If upload and typed\n        if (typed) {\n            /* JSSTYLED */\n            var _t = ct.split(/\\s*,\\s*/);\n            candidates = candidates.filter(function (c) {\n                neg = new Negotiator({\n                    headers: {\n                        accept: c.r.types.join(', ')\n                    }\n                });\n                var tmp = neg.preferredMediaType(_t);\n                return (tmp && tmp.length);\n            });\n\n            // Pick the first one in case not versioned\n            if (candidates.length) {\n                r = candidates[0].r;\n                params = candidates[0].p;\n            }\n        }\n\n        if (versioned) {\n            var maxV;\n            candidates.forEach(function (c) {\n                var k = c.r.versions;\n                var v = semver.maxSatisfying(k, req.version());\n\n                if (v) {\n                    if (!r || semver.gt(v, maxV)) {\n                        r = c.r;\n                        params = c.p;\n                        maxV = v;\n                    }\n                }\n            });\n        }\n    }\n\n    // In order, we check if the route exists, in which case, we're good.\n    // Otherwise we look to see if ver was set to false; that would tell us\n    // we indeed did find a matching route (method+url), but the version\n    // field didn't line up, so we return bad version.  If no route and no\n    // version, we now need to go walk the reverse map and look at whether\n    // we should return 405 or 404.  If it was an OPTIONS request, we need\n    // to handle this having been a preflight request.\n    if (params && r) {\n        cacheVal = {\n            methods: reverse,\n            name: r.name,\n            params: params,\n            spec: r.spec\n        };\n        this.cache.set(cacheKey, cacheVal);\n        res.methods = reverse.slice();\n        callback(null, cacheVal, shallowCopy(params));\n        return;\n    }\n\n    if (typed) {\n        callback(new UnsupportedMediaTypeError(ct));\n        return;\n    }\n    if (versioned) {\n        callback(new InvalidVersionError('%s is not supported by %s %s',\n            req.version() || '?',\n            req.method,\n            req.path()));\n        return;\n    }\n\n    //Checks if header is in cors.ALLOWED_HEADERS\n    function inAllowedHeaders(header) {\n        header = header.toLowerCase();\n        return (cors.ALLOW_HEADERS.indexOf(header) !== -1);\n    }\n\n    // This is a very generic preflight handler - it does\n    // not handle requiring authentication, nor does it do\n    // any special checking for extra user headers. The\n    // user will need to defined their own .opts handler to\n    // do that\n    function preflight(methods) {\n        var headers = req.headers['access-control-request-headers'];\n        var method = req.headers['access-control-request-method'];\n        var origin = req.headers['origin'];\n\n        if (req.method !== 'OPTIONS' || !origin || !method ||\n            methods.indexOf(method) === -1) {\n            return (false);\n        }\n        // Last, check request-headers\n        /* JSSTYLED */\n        var ok = !headers || headers.split(/\\s*,\\s*/).every(inAllowedHeaders);\n\n        if (!ok)\n            return (false);\n\n        // Verify the incoming origin against the whitelist. Pass the origin\n        // through if there is a match.\n        if (cors.matchOrigin(req, cors.origins)) {\n            res.setHeader('Access-Control-Allow-Origin', origin);\n            if (cors.credentials) {\n                res.setHeader('Access-Control-Allow-Credentials', 'true');\n            }\n        } else {\n            res.setHeader('Access-Control-Allow-Origin', '*');\n        }\n        res.setHeader('Access-Control-Allow-Methods',\n            methods.join(', '));\n        res.setHeader('Access-Control-Allow-Headers',\n            cors.ALLOW_HEADERS.join(', '));\n        res.setHeader('Access-Control-Max-Age', 3600);\n\n        return (true);\n    }\n\n    // Check for 405 instead of 404\n    var urls = Object.keys(this.reverse);\n    for (i = 0; i < urls.length; i++) {\n        if (matchURL(new RegExp(urls[i]), req)) {\n            res.methods = this.reverse[urls[i]].slice();\n            res.setHeader('Allow', res.methods.join(', '));\n            if (preflight(res.methods)) {\n                callback(null, {name: 'preflight'});\n                return;\n            }\n            var err = new MethodNotAllowedError('%s is not allowed',\n                req.method);\n            callback(err);\n            return;\n        }\n    }\n\n    callback(new ResourceNotFoundError('%s does not exist', req.url));\n};\n\n\nRouter.prototype.toString = function toString() {\n    var self = this;\n    var str = this.name + ':\\n';\n\n    Object.keys(this.routes).forEach(function (k) {\n        var routes = self.routes[k].map(function (r) {\n            return (r.name);\n        });\n\n        str += '\\t\\t' + k + ': [' + routes.join(', ') + ']\\n';\n    });\n\n    return (str);\n};","blocks":{"total":83,"seen":72,"missing":11,"percentage":0.8674698795180723}},"hash":"0e7b81ffb0244860c72c9e5bcfe68b2a"},"/Users/yunong/workspace/node-restify/lib/server.js":{"stats":{"percentage":0.9048207663782447,"lines":[{"lineno":53},{"lineno":95},{"lineno":194},{"lineno":195},{"lineno":213},{"lineno":228},{"lineno":229},{"lineno":230},{"lineno":233},{"lineno":234},{"lineno":236},{"lineno":237},{"lineno":251},{"lineno":252},{"lineno":259},{"lineno":263},{"lineno":264},{"lineno":269},{"lineno":274},{"lineno":276},{"lineno":287},{"lineno":359},{"lineno":363},{"lineno":378},{"lineno":399},{"lineno":428},{"lineno":429},{"lineno":430},{"lineno":432},{"lineno":436},{"lineno":458},{"lineno":459},{"lineno":460},{"lineno":462},{"lineno":463},{"lineno":464},{"lineno":467},{"lineno":468},{"lineno":469},{"lineno":470},{"lineno":471},{"lineno":472},{"lineno":474},{"lineno":478},{"lineno":536},{"lineno":537},{"lineno":538},{"lineno":539},{"lineno":542},{"lineno":543},{"lineno":546},{"lineno":549},{"lineno":550},{"lineno":551},{"lineno":552},{"lineno":553},{"lineno":554},{"lineno":555},{"lineno":556},{"lineno":558},{"lineno":559},{"lineno":560},{"lineno":562},{"lineno":576},{"lineno":617},{"lineno":618},{"lineno":676},{"lineno":729},{"lineno":732},{"lineno":746},{"lineno":748},{"lineno":750},{"lineno":751},{"lineno":764},{"lineno":774},{"lineno":776},{"lineno":779}],"missing":77,"seen":732,"total":809,"coverage":{"53":{"partial":false,"source":"        throw new TypeError('handler (function) required');","missing":[{"startCol":8,"endCol":59}]},"95":{"partial":false,"source":"            k = mime.lookup(k);","missing":[{"startCol":12,"endCol":31},{"startCol":16,"endCol":30}]},"194":{"partial":false,"source":"        this.spdy = true;","missing":[{"startCol":8,"endCol":25}]},"195":{"partial":false,"source":"        this.server = spdy.createServer(options.spdy);","missing":[{"startCol":8,"endCol":54},{"startCol":22,"endCol":53}]},"213":{"partial":false,"source":"        this.server = https.createServer(options.httpsServerOptions);","missing":[{"startCol":8,"endCol":69},{"startCol":22,"endCol":68}]},"228":{"partial":false,"source":"        if (self.listeners('checkContinue').length > 0) {","missing":[{"startCol":12,"endCol":43}]},"229":{"partial":false,"source":"            self.emit('checkContinue', req, res);","missing":[{"startCol":12,"endCol":48}]},"230":{"partial":false,"source":"            return;","missing":[{"startCol":12,"endCol":19}]},"233":{"partial":false,"source":"        if (!options.noWriteContinue)","missing":[{"startCol":12,"endCol":36}]},"234":{"partial":false,"source":"            res.writeContinue();","missing":[{"startCol":12,"endCol":31}]},"236":{"partial":false,"source":"        self._setupRequest(req, res);","missing":[{"startCol":8,"endCol":36}]},"237":{"partial":false,"source":"        self._handle(req, res, true);","missing":[{"startCol":8,"endCol":36}]},"251":{"partial":true,"source":"        if (options.socketio && (/^\\/socket\\.io.*/).test(req.url))","missing":[{"startCol":32,"endCol":65}]},"252":{"partial":false,"source":"             return;","missing":[{"startCol":13,"endCol":20}]},"259":{"partial":false,"source":"        return (self.server.maxHeadersCount);","missing":[{"startCol":8,"endCol":45}]},"263":{"partial":false,"source":"        self.server.maxHeadersCount = c;","missing":[{"startCol":8,"endCol":40}]},"264":{"partial":false,"source":"        return (c);","missing":[{"startCol":8,"endCol":19}]},"269":{"partial":false,"source":"            return ('http://' + self.socketPath);","missing":[{"startCol":12,"endCol":49},{"startCol":20,"endCol":47}]},"274":{"partial":false,"source":"            str += 'spdy://';","missing":[{"startCol":12,"endCol":29}]},"276":{"partial":false,"source":"            str += 'https://';","missing":[{"startCol":12,"endCol":30}]},"287":{"partial":false,"source":"            str += '169.254.0.1:0000';","missing":[{"startCol":12,"endCol":38}]},"359":{"partial":false,"source":"                throw new TypeError('path (string) required');","missing":[{"startCol":16,"endCol":62}]},"363":{"partial":false,"source":"                throw new TypeError('handler (function) required');","missing":[{"startCol":16,"endCol":67}]},"378":{"partial":false,"source":"                method = 'OPTIONS';","missing":[{"startCol":16,"endCol":35}]},"399":{"partial":false,"source":"                return (false);","missing":[{"startCol":16,"endCol":31}]},"428":{"partial":false,"source":"    this.use(function _param(req, res, next) {","missing":[{}]},"429":{"partial":false,"source":"        if (req.params && req.params[name]) {","missing":[{},{"startCol":12,"endCol":42}]},"430":{"partial":false,"source":"            fn.call(this, req, res, next, req.params[name], name);","missing":[{},{"startCol":12,"endCol":65}]},"431":{"partial":false,"source":"        } else {","missing":[{}]},"432":{"partial":false,"source":"            next();","missing":[{},{"startCol":12,"endCol":18}]},"433":{"partial":false,"source":"        }","missing":[{}]},"434":{"partial":false,"source":"    });","missing":[{}]},"436":{"partial":false,"source":"    return (this);","missing":[{"startCol":4,"endCol":18}]},"458":{"partial":false,"source":"    if (!Array.isArray(versions))","missing":[{"startCol":8,"endCol":32},{"startCol":9,"endCol":32}]},"459":{"partial":false,"source":"        versions = [versions];","missing":[{"startCol":8,"endCol":30}]},"460":{"partial":false,"source":"    assert.arrayOfString(versions, 'versions');","missing":[{"startCol":4,"endCol":46}]},"462":{"partial":false,"source":"    versions.forEach(function (v) {","missing":[{}]},"463":{"partial":false,"source":"        if (!semver.valid(v))","missing":[{},{"startCol":12,"endCol":28},{"startCol":13,"endCol":28}]},"464":{"partial":false,"source":"            throw new TypeError('%s is not a valid semver', v);","missing":[{"startCol":12,"endCol":63},{}]},"465":{"partial":false,"source":"    });","missing":[{}]},"467":{"partial":false,"source":"    this.use(function _versionedUse(req, res, next) {","missing":[{}]},"468":{"partial":false,"source":"        var ver;","missing":[{"startCol":8,"endCol":16},{}]},"469":{"partial":false,"source":"        if (req.version() === '*' ||","missing":[{},{"startCol":12,"endCol":25}]},"470":{"partial":false,"source":"            (ver = maxSatisfying(versions,","missing":[{}]},"471":{"partial":false,"source":"                req.version()) || false)) {","missing":[{},{"startCol":16,"endCol":29}]},"472":{"partial":false,"source":"            fn.call(this, req, res, next, ver);","missing":[{"startCol":12,"endCol":47},{}]},"473":{"partial":false,"source":"        } else {","missing":[{}]},"474":{"partial":false,"source":"            next();","missing":[{"startCol":12,"endCol":19},{}]},"475":{"partial":false,"source":"        }","missing":[{}]},"476":{"partial":false,"source":"    });","missing":[{}]},"478":{"partial":false,"source":"    return (this);","missing":[{"startCol":4,"endCol":18}]},"536":{"partial":false,"source":"    var LINE_FMT = '\\t%s: %s\\n';","missing":[{"startCol":4,"endCol":32}]},"537":{"partial":false,"source":"    var SUB_LINE_FMT = '\\t\\t%s: %s\\n';","missing":[{"startCol":4,"endCol":38}]},"538":{"partial":false,"source":"    var self = this;","missing":[{"startCol":4,"endCol":20}]},"539":{"partial":false,"source":"    var str = '';","missing":[{"startCol":4,"endCol":17}]},"542":{"partial":false,"source":"        var s = '[' + arr.map(function (b) {","missing":[{}]},"543":{"partial":false,"source":"            return (b.name || 'function');","missing":[{},{"startCol":12,"endCol":42},{"startCol":20,"endCol":40}]},"544":{"partial":false,"source":"        }).join(', ') + ']';","missing":[{}]},"546":{"partial":false,"source":"        return (s);","missing":[{"startCol":8,"endCol":19}]},"549":{"partial":false,"source":"    str += sprintf(LINE_FMT, 'Accepts', this.acceptable.join(', '));","missing":[{"startCol":4,"endCol":68},{"startCol":11,"endCol":67},{"startCol":40,"endCol":66}]},"550":{"partial":false,"source":"    str += sprintf(LINE_FMT, 'Name', this.name);","missing":[{"startCol":4,"endCol":48},{"startCol":11,"endCol":47}]},"551":{"partial":false,"source":"    str += sprintf(LINE_FMT, 'Pre', handlersToString(this.before));","missing":[{"startCol":4,"endCol":67},{"startCol":11,"endCol":66},{"startCol":36,"endCol":65}]},"552":{"partial":false,"source":"    str += sprintf(LINE_FMT, 'Router', this.router.toString());","missing":[{"startCol":4,"endCol":63},{"startCol":11,"endCol":62},{"startCol":39,"endCol":61}]},"553":{"partial":false,"source":"    str += sprintf(LINE_FMT, 'Routes', '');","missing":[{"startCol":4,"endCol":43},{"startCol":11,"endCol":42}]},"554":{"partial":false,"source":"    Object.keys(this.routes).forEach(function (k) {","missing":[{},{"startCol":4,"endCol":28}]},"555":{"partial":false,"source":"        var handlers = handlersToString(self.routes[k]);","missing":[{},{"startCol":8,"endCol":56},{"startCol":23,"endCol":55}]},"556":{"partial":false,"source":"        str += sprintf(SUB_LINE_FMT, k, handlers);","missing":[{"startCol":8,"endCol":50},{},{"startCol":15,"endCol":49}]},"557":{"partial":false,"source":"    });","missing":[{}]},"558":{"partial":false,"source":"    str += sprintf(LINE_FMT, 'Secure', this.secure);","missing":[{"startCol":4,"endCol":52},{"startCol":11,"endCol":51}]},"559":{"partial":false,"source":"    str += sprintf(LINE_FMT, 'Url', this.url);","missing":[{"startCol":4,"endCol":46},{"startCol":11,"endCol":45}]},"560":{"partial":false,"source":"    str += sprintf(LINE_FMT, 'Version', this.versions.join());","missing":[{"startCol":4,"endCol":62},{"startCol":11,"endCol":61},{"startCol":40,"endCol":60}]},"562":{"partial":false,"source":"    return (str);","missing":[{"startCol":4,"endCol":17}]},"576":{"partial":true,"source":"            var r = route ? route.name : null;","missing":[{"startCol":41,"endCol":45}]},"617":{"partial":false,"source":"                err = new ResourceNotFoundError(req.path());","missing":[{"startCol":16,"endCol":60},{"startCol":48,"endCol":58}]},"618":{"partial":false,"source":"                emitRouteError(self, res, res, err);","missing":[{"startCol":16,"endCol":51}]},"676":{"partial":true,"source":"                        return (cb ? cb(arg) : true);","missing":[{"startCol":47,"endCol":51}]},"729":{"partial":false,"source":"                return (next());","missing":[{"startCol":16,"endCol":32},{"startCol":24,"endCol":30}]},"732":{"partial":false,"source":"                log.trace('running %s', chain[i].name || '?');","missing":[{"startCol":16,"endCol":61},{"startCol":40,"endCol":60}]},"746":{"partial":false,"source":"            return ([","missing":[{}]},"747":{"partial":false,"source":"                self.name,","missing":[{}]},"748":{"partial":false,"source":"                route !== null ? route.name : 'pre',","missing":[{},{"startCol":16,"endCol":21},{"startCol":33,"endCol":43},{"startCol":46,"endCol":51}]},"749":{"partial":false,"source":"                id,","missing":[{}]},"750":{"partial":false,"source":"                res.statusCode || 200,","missing":[{"startCol":16,"endCol":37},{}]},"751":{"partial":false,"source":"                res.headers()","missing":[{"startCol":16,"endCol":29},{}]},"752":{"partial":false,"source":"            ]);","missing":[{}]},"764":{"partial":true,"source":"            return (cb ? cb(arg) : true);","missing":[{"startCol":35,"endCol":39}]},"774":{"partial":false,"source":"        return ([","missing":[{}]},"775":{"partial":false,"source":"            self.name,","missing":[{}]},"776":{"partial":false,"source":"            route !== null ? route.name : 'pre',","missing":[{"startCol":12,"endCol":17},{"startCol":29,"endCol":39},{"startCol":42,"endCol":47},{}]},"777":{"partial":false,"source":"            id,","missing":[{}]},"778":{"partial":false,"source":"            req.method,","missing":[{}]},"779":{"partial":false,"source":"            req.href(),","missing":[{"startCol":12,"endCol":22},{}]},"780":{"partial":false,"source":"            req.headers","missing":[{}]},"781":{"partial":false,"source":"        ]);","missing":[{}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar domain = require('domain');\nvar EventEmitter = require('events').EventEmitter;\nvar http = require('http');\nvar https = require('https');\nvar util = require('util');\n\nvar assert = require('assert-plus');\nvar mime = require('mime');\nvar once = require('once');\nvar spdy = require('spdy');\nvar uuid = require('node-uuid');\n\nvar dtrace = require('./dtrace');\nvar errors = require('./errors');\nvar formatters = require('./formatters');\nvar shallowCopy = require('./utils').shallowCopy;\nvar upgrade = require('./upgrade');\n\nvar semver = require('semver');\nvar maxSatisfying = semver.maxSatisfying;\n\n// Ensure these are loaded\nrequire('./request');\nrequire('./response');\n\n\n///--- Globals\n\nvar sprintf = util.format;\n\nvar ResourceNotFoundError = errors.ResourceNotFoundError;\n\nvar PROXY_EVENTS = [\n    'clientError',\n    'close',\n    'connection',\n    'error',\n    'listening',\n    'secureConnection'\n];\n\n\n///--- Helpers\n\nfunction argumentsToChain(args, start) {\n    assert.ok(args);\n\n    args = Array.prototype.slice.call(args, start);\n\n    if (args.length < 0)\n        throw new TypeError('handler (function) required');\n\n    var chain = [];\n\n    function process(handlers) {\n        for (var i = 0; i < handlers.length; i++) {\n            if (Array.isArray(handlers[i])) {\n                process(handlers[i], 0);\n            } else {\n                assert.func(handlers[i], 'handler');\n                chain.push(handlers[i]);\n            }\n        }\n\n        return (chain);\n    }\n\n    return (process(args));\n}\n\n\nfunction mergeFormatters(fmt) {\n    var arr = [];\n    var defaults = Object.keys(formatters).length;\n    var i = 0;\n    var obj = {};\n\n    function addFormatter(src, k) {\n        assert.func(src[k], 'formatter');\n\n        var q;\n        var t = k;\n        if (k.indexOf(';') !== -1) {\n            /* JSSTYLED */\n            var tmp = k.split(/\\s*;\\s*/);\n            t = tmp[0];\n            if (tmp[1].indexOf('q=') !== -1) {\n                q = parseFloat(tmp[1].split('=')[1]) * 10;\n            }\n        }\n\n        if (k.indexOf('/') === -1)\n            k = mime.lookup(k);\n\n        obj[t] = src[k];\n        arr.push({\n            q: q || (i + defaults),\n            t: t\n        });\n        i++;\n    }\n\n    Object.keys(formatters).forEach(addFormatter.bind(this, formatters));\n    Object.keys(fmt || {}).forEach(addFormatter.bind(this, fmt || {}));\n\n    arr = arr.sort(function (a, b) {\n        return (b.q - a.q);\n    }).map(function (a) {\n            return (a.t);\n        });\n\n    return ({\n        formatters: obj,\n        acceptable: arr\n    });\n}\n\n\nfunction ifError(n) {\n    function _ifError(err) {\n        if (err) {\n            err._restify_next = n;\n            throw err;\n        }\n    }\n\n    return (_ifError);\n}\n\n\nfunction emitRouteError(server, req, res, err) {\n    var name;\n    if (err.name === 'ResourceNotFoundError') {\n        name = 'NotFound';\n    } else if (err.name === 'InvalidVersionError') {\n        name = 'VersionNotAllowed';\n    } else {\n        name = err.name.replace(/Error$/, '');\n    }\n\n    req.log.trace({name: name, err: err}, 'entering emitRouteError');\n    if (server.listeners(name).length > 0) {\n        server.emit(name, req, res, err, once(function () {\n            server.emit('after', req, res, null);\n        }));\n    } else {\n        res.send(err);\n        server.emit('after', req, res, null);\n    }\n}\n\n\nfunction optionsError(err, req, res) {\n    var code = err.statusCode;\n    var ok = false;\n\n    if (code === 404 && req.method === 'OPTIONS' && req.url === '*') {\n        res.send(200);\n        ok = true;\n    }\n\n    return (ok);\n}\n\n\n///--- API\n\nfunction Server(options) {\n    assert.object(options, 'options');\n    assert.object(options.log, 'options.log');\n    assert.object(options.router, 'options.router');\n\n    var self = this;\n\n    EventEmitter.call(this);\n\n    this.before = [];\n    this.chain = [];\n    this.log = options.log;\n    this.name = options.name || 'restify';\n    this.router = options.router;\n    this.routes = {};\n    this.secure = false;\n    this.versions = options.versions || options.version || [];\n    this.socketio = options.socketio || false;\n\n    var fmt = mergeFormatters(options.formatters);\n    this.acceptable = fmt.acceptable;\n    this.formatters = fmt.formatters;\n\n    if (options.spdy) {\n        this.spdy = true;\n        this.server = spdy.createServer(options.spdy);\n    } else if ((options.cert || options.certificate) && options.key) {\n        this.ca = options.ca;\n        this.certificate = options.certificate || options.cert;\n        this.key = options.key;\n        this.passphrase = options.passphrase || null;\n        this.secure = true;\n\n        this.server = https.createServer({\n            ca: self.ca,\n            cert: self.certificate,\n            key: self.key,\n            passphrase: self.passphrase,\n            rejectUnauthorized: options.rejectUnauthorized,\n            requestCert: options.requestCert,\n            ciphers: options.ciphers\n        });\n    } else if (options.httpsServerOptions) {\n        this.server = https.createServer(options.httpsServerOptions);\n    } else {\n        this.server = http.createServer();\n    }\n\n    this.router.on('mount', this.emit.bind(this, 'mount'));\n\n    if (!options.handleUpgrades && PROXY_EVENTS.indexOf('upgrade') === -1)\n        PROXY_EVENTS.push('upgrade');\n    PROXY_EVENTS.forEach(function (e) {\n        self.server.on(e, self.emit.bind(self, e));\n    });\n\n    // Now the things we can't blindly proxy\n    this.server.on('checkContinue', function onCheckContinue(req, res) {\n        if (self.listeners('checkContinue').length > 0) {\n            self.emit('checkContinue', req, res);\n            return;\n        }\n\n        if (!options.noWriteContinue)\n            res.writeContinue();\n\n        self._setupRequest(req, res);\n        self._handle(req, res, true);\n    });\n\n    if (options.handleUpgrades) {\n        this.server.on('upgrade', function onUpgrade(req, socket, head) {\n            req._upgradeRequest = true;\n            var res = upgrade.createResponse(req, socket, head);\n            self._setupRequest(req, res);\n            self._handle(req, res);\n        });\n    }\n\n    this.server.on('request', function onRequest(req, res) {\n        self.emit('request', req, res);\n        if (options.socketio && (/^\\/socket\\.io.*/).test(req.url))\n             return;\n\n        self._setupRequest(req, res);\n        self._handle(req, res);\n    });\n\n    this.__defineGetter__('maxHeadersCount', function () {\n        return (self.server.maxHeadersCount);\n    });\n\n    this.__defineSetter__('maxHeadersCount', function (c) {\n        self.server.maxHeadersCount = c;\n        return (c);\n    });\n\n    this.__defineGetter__('url', function () {\n        if (self.socketPath)\n            return ('http://' + self.socketPath);\n\n        var addr = self.address();\n        var str = '';\n        if (self.spdy) {\n            str += 'spdy://';\n        } else if (self.secure) {\n            str += 'https://';\n        } else {\n            str += 'http://';\n        }\n\n        if (addr) {\n            str += addr.family === 'IPv6' ?\n                '[' + addr.address + ']' : addr.address;\n            str += ':';\n            str += addr.port;\n        } else {\n            str += '169.254.0.1:0000';\n        }\n\n        return (str);\n    });\n}\nutil.inherits(Server, EventEmitter);\nmodule.exports = Server;\n\n\nServer.prototype.address = function address() {\n    return (this.server.address());\n};\n\n/**\n * Gets the server up and listening.\n *\n * You can call like:\n *  server.listen(80)\n *  server.listen(80, '127.0.0.1')\n *  server.listen('/tmp/server.sock')\n *\n * @param {Function} callback optionally get notified when listening.\n * @throws {TypeError} on bad input.\n */\nServer.prototype.listen = function listen() {\n    var args = Array.prototype.slice.call(arguments);\n    return (this.server.listen.apply(this.server, args));\n};\n\n\n/**\n * Shuts down this server, and invokes callback (optionally) when done.\n *\n * @param {Function} callback optional callback to invoke when done.\n */\nServer.prototype.close = function close(callback) {\n    if (callback)\n        assert.func(callback, 'callback');\n\n    this.server.once('close', function onClose() {\n        return (callback ? callback() : false);\n    });\n\n    return (this.server.close());\n};\n\n\n// Register all the routing methods\n/**\n * Mounts a chain on the given path against this HTTP verb\n *\n * @param {Object} options the URL to handle, at minimum.\n * @return {Route} the newly created route.\n */\n[\n    'del',\n    'get',\n    'head',\n    'opts',\n    'post',\n    'put',\n    'patch'\n].forEach(function (method) {\n        Server.prototype[method] = function (opts) {\n            if (opts instanceof RegExp || typeof (opts) === 'string') {\n                opts = {\n                    path: opts\n                };\n            } else if (typeof (opts) === 'object') {\n                opts = shallowCopy(opts);\n            } else {\n                throw new TypeError('path (string) required');\n            }\n\n            if (arguments.length < 2)\n                throw new TypeError('handler (function) required');\n\n            var chain = [];\n            var route;\n            var self = this;\n\n            function addHandler(h) {\n                assert.func(h, 'handler');\n\n                chain.push(h);\n            }\n\n            if (method === 'del')\n                method = 'DELETE';\n            if (method === 'opts')\n                method = 'OPTIONS';\n            opts.method = method.toUpperCase();\n            opts.versions = opts.versions || opts.version || self.versions;\n            if (!Array.isArray(opts.versions))\n                opts.versions = [opts.versions];\n\n            if (!opts.name) {\n                opts.name = method + '-' + (opts.path || opts.url);\n                if (opts.versions.length > 0) {\n                    opts.name += '-' + opts.versions.join('--');\n                }\n\n                opts.name = opts.name.replace(/\\W/g, '').toLowerCase();\n                if (this.router.mounts[opts.name]) // GH-401\n                    opts.name += uuid.v4().substr(0, 7);\n            } else {\n                opts.name = opts.name.replace(/\\W/g, '').toLowerCase();\n            }\n\n\n            if (!(route = this.router.mount(opts)))\n                return (false);\n\n            this.chain.forEach(addHandler);\n            argumentsToChain(arguments, 1).forEach(addHandler);\n            this.routes[route] = chain;\n\n            return (route);\n        };\n    });\n\n\n/**\n * Minimal port of the functionality offered by Express.js Route Param\n * Pre-conditions\n * @link http://expressjs.com/guide.html#route-param%20pre-conditions\n *\n * This basically piggy-backs on the `server.use` method. It attaches a\n * new middleware function that only fires if the specified parameter exists\n * in req.params\n *\n * Exposes an API:\n *   server.param(\"user\", function (req, res, next) {\n *     // load the user's information here, always making sure to call next()\n *   });\n *\n * @param {String} The name of the URL param to respond to\n * @param {Function} The middleware function to execute\n */\nServer.prototype.param = function param(name, fn) {\n    this.use(function _param(req, res, next) {\n        if (req.params && req.params[name]) {\n            fn.call(this, req, res, next, req.params[name], name);\n        } else {\n            next();\n        }\n    });\n\n    return (this);\n};\n\n\n/**\n * Piggy-backs on the `server.use` method. It attaches a new middleware\n * function that only fires if the specified version matchtes the request.\n *\n * Note that if the client does not request a specific version, the middleware\n * function always fires. If you don't want this set a default version with a\n * pre handler on requests where the client omits one.\n *\n * Exposes an API:\n *   server.versionedUse(\"version\", function (req, res, next, ver) {\n *     // do stuff that only applies to routes of this API version\n *   });\n *\n * @param {String|Array} The version or versions of the URL to respond to\n * @param {Function} The middleware function to execute, the fourth parameter\n *                   will be the selected version\n */\nServer.prototype.versionedUse = function versionedUse(versions, fn) {\n    if (!Array.isArray(versions))\n        versions = [versions];\n    assert.arrayOfString(versions, 'versions');\n\n    versions.forEach(function (v) {\n        if (!semver.valid(v))\n            throw new TypeError('%s is not a valid semver', v);\n    });\n\n    this.use(function _versionedUse(req, res, next) {\n        var ver;\n        if (req.version() === '*' ||\n            (ver = maxSatisfying(versions,\n                req.version()) || false)) {\n            fn.call(this, req, res, next, ver);\n        } else {\n            next();\n        }\n    });\n\n    return (this);\n};\n\n\n/**\n * Removes a route from the server.\n *\n * You  pass in the route 'blob' you got from a mount call.\n *\n * @param {String} name the route name.\n * @return {Boolean} true if route was removed, false if not.\n * @throws {TypeError} on bad input.\n */\nServer.prototype.rm = function rm(route) {\n    var r = this.router.unmount(route);\n    if (r && this.routes[r])\n        delete this.routes[r];\n\n    return (r);\n};\n\n\n/**\n * Installs a list of handlers to run _before_ the \"normal\" handlers of all\n * routes.\n *\n * You can pass in any combination of functions or array of functions.\n *\n * @throws {TypeError} on input error.\n */\nServer.prototype.use = function use() {\n    var self = this;\n\n    (argumentsToChain(arguments) || []).forEach(function (h) {\n        self.chain.push(h);\n    });\n\n    return (this);\n};\n\n\n/**\n * Gives you hooks to run _before_ any routes are located.  This gives you\n * a chance to intercept the request and change headers, etc., that routing\n * depends on.  Note that req.params will _not_ be set yet.\n */\nServer.prototype.pre = function pre() {\n    var self = this;\n\n    argumentsToChain(arguments).forEach(function (h) {\n        self.before.push(h);\n    });\n\n    return (this);\n};\n\n\nServer.prototype.toString = function toString() {\n    var LINE_FMT = '\\t%s: %s\\n';\n    var SUB_LINE_FMT = '\\t\\t%s: %s\\n';\n    var self = this;\n    var str = '';\n\n    function handlersToString(arr) {\n        var s = '[' + arr.map(function (b) {\n            return (b.name || 'function');\n        }).join(', ') + ']';\n\n        return (s);\n    }\n\n    str += sprintf(LINE_FMT, 'Accepts', this.acceptable.join(', '));\n    str += sprintf(LINE_FMT, 'Name', this.name);\n    str += sprintf(LINE_FMT, 'Pre', handlersToString(this.before));\n    str += sprintf(LINE_FMT, 'Router', this.router.toString());\n    str += sprintf(LINE_FMT, 'Routes', '');\n    Object.keys(this.routes).forEach(function (k) {\n        var handlers = handlersToString(self.routes[k]);\n        str += sprintf(SUB_LINE_FMT, k, handlers);\n    });\n    str += sprintf(LINE_FMT, 'Secure', this.secure);\n    str += sprintf(LINE_FMT, 'Url', this.url);\n    str += sprintf(LINE_FMT, 'Version', this.versions.join());\n\n    return (str);\n};\n\n\n///--- Private methods\n\nServer.prototype._handle = function _handle(req, res) {\n    var self = this;\n\n    function routeAndRun() {\n        self._route(req, res, function (route, context) {\n            req.context = req.params = context;\n            req.route = route.spec;\n\n            var r = route ? route.name : null;\n            var chain = self.routes[r];\n\n            self._run(req, res, route, chain, function done(e) {\n                self.emit('after', req, res, route, e);\n            });\n        });\n    }\n\n    if (this.before.length > 0) {\n        this._run(req, res, null, this.before, function (err) {\n            if (!err) {\n                routeAndRun();\n            }\n        });\n    } else {\n        routeAndRun();\n    }\n};\n\n\nServer.prototype._route = function _route(req, res, name, cb) {\n    var self = this;\n\n    if (typeof (name) === 'function') {\n        cb = name;\n        name = null;\n\n        this.router.find(req, res, function onRoute(err, route, ctx) {\n            var r = route ? route.name : null;\n            if (err) {\n                if (optionsError(err, req, res)) {\n                    self.emit('after', req, res, err);\n                } else {\n                    emitRouteError(self, req, res, err);\n                }\n            } else if (r === 'preflight') {\n                res.writeHead(200);\n                res.end();\n                self.emit('after', req, res, null);\n            } else if (!r || !self.routes[r]) {\n                err = new ResourceNotFoundError(req.path());\n                emitRouteError(self, res, res, err);\n            } else {\n                cb(route, ctx);\n            }\n        });\n    } else {\n        this.router.get(name, req, function (err, route, ctx) {\n            if (err) {\n                emitRouteError(self, req, res, err);\n            } else {\n                cb(route, ctx);\n            }\n        });\n    }\n};\n\n\n// The goofy checks in next() are to make sure we fire the DTrace\n// probes after an error might have been sent, as in a handler\n// return next(new Error) is basically shorthand for sending an\n// error via res.send(), so we do that before firing the dtrace\n// probe (namely so the status codes get updated in the\n// response).\n//\n// Callers can stop the chain from proceding if they do\n// return next(false); This is useful for non-errors, but where\n// a response was sent and you don't want the chain to keep\n// going\nServer.prototype._run = function _run(req, res, route, chain, cb) {\n    var d;\n    var i = -1;\n    var id = dtrace.nextId();\n    req._dtraceId = id;\n    if (!req._anonFuncCount) {\n        // Counter used to keep track of anonymous functions. Used when a\n        // handler function is anonymous. This ensures we're using a\n        // monotonically increasing int for anonymous handlers through out the\n        // the lifetime of this request\n        req._anonFuncCount = 0;\n    }\n    var log = this.log;\n    var self = this;\n    var handlerName = null;\n    var errName;\n    var emittedError = false;\n    if (cb)\n        cb = once(cb);\n\n    function next(arg) {\n        var done = false;\n        if (arg) {\n            if (arg instanceof Error) {\n                errName = arg.name.replace(/Error$/, '');\n                log.trace({err: arg, errName: errName}, 'next(err=%s)',\n                    (arg.name || 'Error'));\n                if (self.listeners(errName).length > 0) {\n                    self.emit(errName, req, res, arg, once(function () {\n                        res.send(arg);\n                        return (cb ? cb(arg) : true);\n                    }));\n                    emittedError = true;\n                } else {\n                    res.send(arg);\n                }\n                done = true;\n            } else if (typeof (arg) === 'string') { // GH-193, allow redirect\n                if (req._rstfy_chained_route) {\n                    var _e = new errors.InternalError();\n                    log.error({\n                        err: _e\n                    }, 'Multiple next(\"chain\") calls not ' +\n                        'supported');\n                    res.send(_e);\n                    return (false);\n                }\n\n                // Stop running the rest of this route since we're redirecting\n                return self._route(req, res, arg, function (r, ctx) {\n                    req.context = req.params = ctx;\n                    req.route = r.spec;\n\n                    var _c = chain.slice(0, i + 1);\n\n                    function _uniq(fn) {\n                        return (_c.indexOf(fn) === -1);\n                    }\n\n                    var _routes = self.routes[r.name] || [];\n                    var _chain = _routes.filter(_uniq);\n\n                    req._rstfy_chained_route = true;\n                    // Need to fire DTrace done for previous handler here too.\n                    if ((i + 1) > 0 && chain[i] && !chain[i]._skip) {\n                        req.endHandlerTimer(handlerName);\n                    }\n                    self._run(req, res, r, _chain, cb);\n                });\n            }\n        }\n\n        if (arg === false)\n            done = true;\n\n        // Fire DTrace done for the previous handler.\n        if ((i + 1) > 0 && chain[i] && !chain[i]._skip) {\n            req.endHandlerTimer(handlerName);\n        }\n\n        // Run the next handler up\n        if (!done && chain[++i]) {\n            if (chain[i]._skip)\n                return (next());\n\n            if (log.trace())\n                log.trace('running %s', chain[i].name || '?');\n\n            req._currentRoute = (route !== null ? route.name : 'pre');\n            handlerName = (chain[i].name ||\n                           ('handler-' + req._anonFuncCount++));\n            req._currentHandler = handlerName;\n            req.startHandlerTimer(handlerName);\n\n            var n = once(next);\n            n.ifError = ifError(n);\n            return (chain[i].call(self, req, res, n));\n        }\n\n        dtrace._rstfy_probes['route-done'].fire(function () {\n            return ([\n                self.name,\n                route !== null ? route.name : 'pre',\n                id,\n                res.statusCode || 200,\n                res.headers()\n            ]);\n        });\n\n        if (route === null) {\n            self.emit('preDone', req, res);\n        } else {\n            self.emit('done', req, res, route);\n        }\n\n        // Don't return cb here if we emit an error since we will cb after the\n        // handler fires.\n        if (!emittedError) {\n            return (cb ? cb(arg) : true);\n        } else {\n            return (true);\n        }\n    }\n\n    var n1 = once(next);\n    n1.ifError = ifError(n1);\n\n    dtrace._rstfy_probes['route-start'].fire(function () {\n        return ([\n            self.name,\n            route !== null ? route.name : 'pre',\n            id,\n            req.method,\n            req.href(),\n            req.headers\n        ]);\n    });\n\n    d = domain.create();\n    d.add(req);\n    d.add(res);\n    d.on('error', function onError(err) {\n        if (err._restify_next) {\n            err._restify_next(err);\n        } else {\n            log.trace({err: err}, 'uncaughtException');\n            self.emit('uncaughtException', req, res, route, err);\n        }\n    });\n    d.run(n1);\n};\n\n\nServer.prototype._setupRequest = function _setupRequest(req, res) {\n    req.log = res.log = this.log;\n    req._time = res._time = Date.now();\n    req.serverName = this.name;\n\n    res.acceptable = this.acceptable;\n    res.formatters = this.formatters;\n    res.req = req;\n    res.serverName = this.name;\n    res.version = this.router.versions[this.router.versions.length - 1];\n};","blocks":{"total":139,"seen":101,"missing":38,"percentage":0.7266187050359713}},"hash":"d0957b76053d25551ae11a0a15575053"},"/Users/yunong/workspace/node-restify/lib/dtrace.js":{"stats":{"percentage":0.9512195121951219,"lines":[{"lineno":42},{"lineno":48},{"lineno":52},{"lineno":75}],"missing":4,"seen":78,"total":82,"coverage":{"42":{"partial":false,"source":"            PROVIDER = {","missing":[{}]},"43":{"partial":false,"source":"                fire: function () {","missing":[{}]},"44":{"partial":false,"source":"                },","missing":[{}]},"45":{"partial":false,"source":"                enable: function () {","missing":[{}]},"46":{"partial":false,"source":"                },","missing":[{}]},"47":{"partial":false,"source":"                addProbe: function () {","missing":[{}]},"48":{"partial":false,"source":"                    var p = {","missing":[{}]},"49":{"partial":false,"source":"                        fire: function () {","missing":[{}]},"50":{"partial":false,"source":"                        }","missing":[{}]},"51":{"partial":false,"source":"                    };","missing":[{}]},"52":{"partial":false,"source":"                    return (p);","missing":[{"startCol":20,"endCol":31},{}]},"53":{"partial":false,"source":"                },","missing":[{}]},"54":{"partial":false,"source":"                removeProbe: function () {","missing":[{}]},"55":{"partial":false,"source":"                },","missing":[{}]},"56":{"partial":false,"source":"                disable: function () {","missing":[{}]},"57":{"partial":false,"source":"                }","missing":[{}]},"58":{"partial":false,"source":"            };","missing":[{}]},"75":{"partial":false,"source":"                ID = 1;","missing":[{"startCol":16,"endCol":23}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\n\n///--- Globals\n\nvar ID = 0;\nvar MAX_INT = Math.pow(2, 32) - 1;\n\nvar PROBES = {\n    // server_name, route_name, id, method, url, headers (json)\n    'route-start': ['char *', 'char *', 'int', 'char *', 'char *', 'json'],\n\n    // server_name, route_name, handler_name, id\n    'handler-start': ['char *', 'char *', 'char *', 'int'],\n\n    // server_name, route_name, handler_name, id\n    'handler-done': ['char *', 'char *', 'char *', 'int'],\n\n    // server_name, route_name, id, statusCode, headers (json)\n    'route-done': ['char *', 'char *', 'int', 'int', 'json'],\n\n\n    // Client probes\n    // method, url, headers, id\n    'client-request': ['char *', 'char *', 'json', 'int'],\n    // id, statusCode, headers\n    'client-response': ['int', 'int', 'json'],\n    // id, Error.toString()\n    'client-error': ['id', 'char *']\n};\nvar PROVIDER;\n\n\n///--- API\n\nmodule.exports = function exportStaticProvider() {\n    if (!PROVIDER) {\n        try {\n            var dtrace = require('dtrace-provider');\n            PROVIDER = dtrace.createDTraceProvider('restify');\n        } catch (e) {\n            PROVIDER = {\n                fire: function () {\n                },\n                enable: function () {\n                },\n                addProbe: function () {\n                    var p = {\n                        fire: function () {\n                        }\n                    };\n                    return (p);\n                },\n                removeProbe: function () {\n                },\n                disable: function () {\n                }\n            };\n        }\n\n        PROVIDER._rstfy_probes = {};\n\n        Object.keys(PROBES).forEach(function (p) {\n            var args = PROBES[p].splice(0);\n            args.unshift(p);\n\n            var probe = PROVIDER.addProbe.apply(PROVIDER, args);\n            PROVIDER._rstfy_probes[p] = probe;\n        });\n\n        PROVIDER.enable();\n\n        PROVIDER.nextId = function nextId() {\n            if (++ID >= MAX_INT)\n                ID = 1;\n\n            return (ID);\n        };\n    }\n\n    return (PROVIDER);\n}();","blocks":{"total":13,"seen":5,"missing":8,"percentage":0.38461538461538464}},"hash":"99a1efb36b6ea3a9e0d983249787646f"},"/Users/yunong/workspace/node-restify/lib/upgrade.js":{"stats":{"percentage":0.88268156424581,"lines":[{"lineno":66},{"lineno":70},{"lineno":99},{"lineno":116},{"lineno":117},{"lineno":118},{"lineno":125},{"lineno":128},{"lineno":129},{"lineno":130},{"lineno":131},{"lineno":144},{"lineno":145},{"lineno":150},{"lineno":151},{"lineno":153},{"lineno":154},{"lineno":155},{"lineno":158},{"lineno":160},{"lineno":165}],"missing":21,"seen":158,"total":179,"coverage":{"66":{"partial":false,"source":"            return (method.returns);","missing":[{"startCol":12,"endCol":36}]},"70":{"partial":false,"source":"            throw (new Error('Method ' + method.name + ' is not ' +","missing":[{"startCol":29,"endCol":52},{}]},"71":{"partial":false,"source":"                'implemented!'));","missing":[{}]},"99":{"partial":false,"source":"            return;","missing":[{"startCol":12,"endCol":19}]},"116":{"partial":false,"source":"    assert.number(code, 'code');","missing":[{"startCol":4,"endCol":31}]},"117":{"partial":false,"source":"    this.statusCode = code;","missing":[{"startCol":4,"endCol":27}]},"118":{"partial":false,"source":"    return (code);","missing":[{"startCol":4,"endCol":18}]},"125":{"partial":false,"source":"        body = code;","missing":[{"startCol":8,"endCol":20}]},"128":{"partial":false,"source":"        if (typeof (body.statusCode) === 'number')","missing":[{"startCol":12,"endCol":36}]},"129":{"partial":false,"source":"            this.statusCode = body.statusCode;","missing":[{"startCol":12,"endCol":46}]},"130":{"partial":false,"source":"        if (typeof (body.message) === 'string')","missing":[{"startCol":12,"endCol":33}]},"131":{"partial":false,"source":"            this.statusReason = body.message;","missing":[{"startCol":12,"endCol":45}]},"144":{"partial":false,"source":"    this._writeHeadImpl(this.statusCode, 'Connection Not Upgraded');","missing":[{"startCol":4,"endCol":67}]},"145":{"partial":false,"source":"    return (true);","missing":[{"startCol":4,"endCol":18}]},"150":{"partial":false,"source":"        assert.number(statusCode, 'statusCode');","missing":[{"startCol":8,"endCol":47}]},"151":{"partial":false,"source":"        assert.optionalString(reason, 'reason');","missing":[{"startCol":8,"endCol":47}]},"153":{"partial":false,"source":"        this.statusCode = statusCode;","missing":[{"startCol":8,"endCol":37}]},"154":{"partial":false,"source":"        if (!reason)","missing":[{"startCol":12,"endCol":19},{"startCol":13,"endCol":19}]},"155":{"partial":false,"source":"            reason = 'Connection Not Upgraded';","missing":[{"startCol":12,"endCol":47}]},"158":{"partial":false,"source":"            throw new Error('Head already written!');","missing":[{"startCol":12,"endCol":53}]},"160":{"partial":false,"source":"        return (this._writeHeadImpl(statusCode, reason));","missing":[{"startCol":8,"endCol":57},{"startCol":16,"endCol":55}]},"165":{"partial":false,"source":"        throw new InvalidUpgradeStateError('Upgrade already claimed!');","missing":[{"startCol":8,"endCol":71}]}},"source":"// Copyright (c) 2013, Joyent, Inc. All rights reserved.\n\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar assert = require('assert-plus');\n\nfunction InvalidUpgradeStateError(msg) {\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(this, InvalidUpgradeStateError);\n\n    this.message = msg;\n    this.name = 'InvalidUpgradeStateError';\n}\nutil.inherits(InvalidUpgradeStateError, Error);\n\n//\n// The Node HTTP Server will, if we handle the 'upgrade' event, swallow any\n// Request with the 'Connection: upgrade' header set.  While doing this it\n// detaches from the 'data' events on the Socket and passes the socket to\n// us, so that we may take over handling for the connection.\n//\n// Unfortunately, the API does not presently provide a http.ServerResponse\n// for us to use in the event that we do not wish to upgrade the connection.\n// This factory method provides a skeletal implementation of a\n// restify-compatible response that is sufficient to allow the existing\n// request handling path to work, while allowing us to perform _at most_ one\n// of either:\n//\n//   - Return a basic HTTP Response with a provided Status Code and\n//     close the socket.\n//   - Upgrade the connection and stop further processing.\n//\n// To determine if an upgrade is requested, a route handler would check for\n// the 'claimUpgrade' method on the Response.  The object this method\n// returns will have the 'socket' and 'head' Buffer emitted with the\n// 'upgrade' event by the http.Server.  If the upgrade is not possible, such\n// as when the HTTP head (or a full request) has already been sent by some\n// other handler, this method will throw.\n//\nfunction createServerUpgradeResponse(req, socket, head) {\n    return (new ServerUpgradeResponse(socket, head));\n}\n\nfunction ServerUpgradeResponse(socket, head) {\n    assert.object(socket, 'socket');\n    assert.buffer(head, 'head');\n\n    EventEmitter.call(this);\n\n    this.sendDate = true;\n    this.statusCode = 400;\n\n    this._upgrade = {\n        socket: socket,\n        head: head\n    };\n\n    this._headWritten = false;\n    this._upgradeClaimed = false;\n}\nutil.inherits(ServerUpgradeResponse, EventEmitter);\n\nfunction notImplemented(method) {\n    if (!method.throws) {\n        return function () {\n            return (method.returns);\n        };\n    } else {\n        return function () {\n            throw (new Error('Method ' + method.name + ' is not ' +\n                'implemented!'));\n        };\n    }\n}\n\nvar NOT_IMPLEMENTED = [\n    { name: 'writeContinue', throws: true },\n    { name: 'setHeader', throws: false, returns: null },\n    { name: 'getHeader', throws: false, returns: null },\n    { name: 'getHeaders', throws: false, returns: {} },\n    { name: 'removeHeader', throws: false, returns: null },\n    { name: 'addTrailer', throws: false, returns: null },\n    { name: 'cache', throws: false, returns: 'public' },\n    { name: 'format', throws: true },\n    { name: 'set', throws: false, returns: null },\n    { name: 'get', throws: false, returns: null },\n    { name: 'headers', throws: false, returns: {} },\n    { name: 'header', throws: false, returns: null },\n    { name: 'json', throws: false, returns: null },\n    { name: 'link', throws: false, returns: null }\n];\nNOT_IMPLEMENTED.forEach(function (method) {\n    ServerUpgradeResponse.prototype[method.name] = notImplemented(method);\n});\n\nServerUpgradeResponse.prototype._writeHeadImpl =\n    function _writeHeadImpl(statusCode, reason) {\n        if (this._headWritten)\n            return;\n        this._headWritten = true;\n\n        if (this._upgradeClaimed)\n            throw new InvalidUpgradeStateError('Upgrade already claimed!');\n\n        var head = [\n            'HTTP/1.1 ' + statusCode + ' ' + reason,\n            'Connection: close'\n        ];\n        if (this.sendDate)\n            head.push('Date: ' + new Date().toUTCString());\n\n        this._upgrade.socket.write(head.join('\\r\\n') + '\\r\\n');\n    };\n\nServerUpgradeResponse.prototype.status = function status(code) {\n    assert.number(code, 'code');\n    this.statusCode = code;\n    return (code);\n};\n\nServerUpgradeResponse.prototype.send = function send(code, body) {\n    if (typeof (code) === 'number')\n        this.statusCode = code;\n    else\n        body = code;\n\n    if (typeof (body) === 'object') {\n        if (typeof (body.statusCode) === 'number')\n            this.statusCode = body.statusCode;\n        if (typeof (body.message) === 'string')\n            this.statusReason = body.message;\n    }\n\n    return (this.end());\n};\n\nServerUpgradeResponse.prototype.end = function end() {\n    this._writeHeadImpl(this.statusCode, 'Connection Not Upgraded');\n    this._upgrade.socket.end('\\r\\n');\n    return (true);\n};\n\nServerUpgradeResponse.prototype.write = function write() {\n    this._writeHeadImpl(this.statusCode, 'Connection Not Upgraded');\n    return (true);\n};\n\nServerUpgradeResponse.prototype.writeHead =\n    function writeHead(statusCode, reason) {\n        assert.number(statusCode, 'statusCode');\n        assert.optionalString(reason, 'reason');\n\n        this.statusCode = statusCode;\n        if (!reason)\n            reason = 'Connection Not Upgraded';\n\n        if (this._headWritten)\n            throw new Error('Head already written!');\n\n        return (this._writeHeadImpl(statusCode, reason));\n    };\n\nServerUpgradeResponse.prototype.claimUpgrade = function claimUpgrade() {\n    if (this._upgradeClaimed)\n        throw new InvalidUpgradeStateError('Upgrade already claimed!');\n\n    if (this._headWritten)\n        throw new InvalidUpgradeStateError('Upgrade already aborted!');\n\n    this._upgradeClaimed = true;\n\n    return (this._upgrade);\n};\n\nmodule.exports = {\n    createResponse: createServerUpgradeResponse,\n\n    InvalidUpgradeStateError: InvalidUpgradeStateError\n};","blocks":{"total":29,"seen":16,"missing":13,"percentage":0.5517241379310345}},"hash":"5a32dadf481b076c1647c1752ee5e877"},"/Users/yunong/workspace/node-restify/lib/request.js":{"stats":{"percentage":0.8681318681318682,"lines":[{"lineno":49},{"lineno":57},{"lineno":62},{"lineno":91},{"lineno":129},{"lineno":130},{"lineno":132},{"lineno":133},{"lineno":138},{"lineno":145},{"lineno":169},{"lineno":202},{"lineno":209},{"lineno":210},{"lineno":212},{"lineno":213},{"lineno":215},{"lineno":220},{"lineno":222},{"lineno":223},{"lineno":224},{"lineno":225},{"lineno":227},{"lineno":228},{"lineno":230},{"lineno":231},{"lineno":232},{"lineno":233},{"lineno":234},{"lineno":236},{"lineno":239},{"lineno":250},{"lineno":255},{"lineno":263},{"lineno":264},{"lineno":266},{"lineno":267},{"lineno":273},{"lineno":286},{"lineno":287},{"lineno":288},{"lineno":290},{"lineno":291},{"lineno":294},{"lineno":300},{"lineno":305},{"lineno":327},{"lineno":357}],"missing":48,"seen":316,"total":364,"coverage":{"49":{"partial":true,"source":"    var protocol = this.secure ? 'https://' : 'http://';","missing":[{"startCol":33,"endCol":43}]},"57":{"partial":false,"source":"        types = [types];","missing":[{"startCol":8,"endCol":24}]},"62":{"partial":false,"source":"            t = mime.lookup(t);","missing":[{"startCol":12,"endCol":31},{"startCol":16,"endCol":30}]},"91":{"partial":false,"source":"        return (0);","missing":[{"startCol":8,"endCol":19}]},"129":{"partial":false,"source":"    if (this._date !== undefined)","missing":[{"startCol":8,"endCol":32},{"startCol":23,"endCol":32}]},"130":{"partial":false,"source":"        return (this._date);","missing":[{"startCol":8,"endCol":28}]},"132":{"partial":false,"source":"    this._date = new Date(this._time);","missing":[{"startCol":4,"endCol":38}]},"133":{"partial":false,"source":"    return (this._date);","missing":[{"startCol":4,"endCol":24}]},"138":{"partial":false,"source":"    return (this.getUrl().href);","missing":[{"startCol":4,"endCol":32},{"startCol":12,"endCol":25}]},"145":{"partial":false,"source":"        return (this._id);","missing":[{"startCol":8,"endCol":26}]},"169":{"partial":false,"source":"    return (this._time);","missing":[{"startCol":4,"endCol":24}]},"202":{"partial":false,"source":"        name = 'referer';","missing":[{"startCol":8,"endCol":25}]},"209":{"partial":false,"source":"    assert.string(name, 'name');","missing":[{"startCol":4,"endCol":31}]},"210":{"partial":false,"source":"    name = name.toLowerCase();","missing":[{"startCol":4,"endCol":30},{"startCol":11,"endCol":29}]},"212":{"partial":false,"source":"    if (name === 'referer' || name === 'referrer')","missing":[{"startCol":8,"endCol":12},{"startCol":30,"endCol":34}]},"213":{"partial":false,"source":"        name = 'referer';","missing":[{"startCol":8,"endCol":25}]},"215":{"partial":false,"source":"    return ((this.trailers || {})[name] || value);","missing":[{"startCol":4,"endCol":50},{"startCol":12,"endCol":48},{"startCol":13,"endCol":32},{"startCol":43,"endCol":48}]},"220":{"partial":false,"source":"    assert.string(type, 'type');","missing":[{"startCol":4,"endCol":31}]},"222":{"partial":false,"source":"    var contentType = this.getContentType();","missing":[{"startCol":4,"endCol":44},{"startCol":22,"endCol":43}]},"223":{"partial":false,"source":"    var matches = true;","missing":[{"startCol":4,"endCol":23}]},"224":{"partial":false,"source":"    if (!contentType)","missing":[{"startCol":8,"endCol":20},{"startCol":9,"endCol":20}]},"225":{"partial":false,"source":"        return (false);","missing":[{"startCol":8,"endCol":23}]},"227":{"partial":false,"source":"    if (type.indexOf('/') === -1)","missing":[{"startCol":8,"endCol":25},{"startCol":30,"endCol":32}]},"228":{"partial":false,"source":"        type = mime.lookup(type);","missing":[{"startCol":8,"endCol":33},{"startCol":15,"endCol":32}]},"230":{"partial":false,"source":"    if (type.indexOf('*') !== -1) {","missing":[{"startCol":8,"endCol":25},{"startCol":30,"endCol":32}]},"231":{"partial":false,"source":"        type = type.split('/');","missing":[{"startCol":8,"endCol":31},{"startCol":15,"endCol":30}]},"232":{"partial":false,"source":"        contentType = contentType.split('/');","missing":[{"startCol":8,"endCol":45},{"startCol":22,"endCol":44}]},"233":{"partial":false,"source":"        matches &= (type[0] === '*' || type[0] === contentType[0]);","missing":[{"startCol":8,"endCol":67},{"startCol":20,"endCol":35},{"startCol":39,"endCol":65}]},"234":{"partial":false,"source":"        matches &= (type[1] === '*' || type[1] === contentType[1]);","missing":[{"startCol":8,"endCol":67},{"startCol":20,"endCol":35},{"startCol":39,"endCol":65}]},"236":{"partial":false,"source":"        matches = (contentType === type);","missing":[{"startCol":8,"endCol":41},{"startCol":19,"endCol":30},{"startCol":35,"endCol":39}]},"239":{"partial":false,"source":"    return (matches);","missing":[{"startCol":4,"endCol":21}]},"250":{"partial":false,"source":"        return (this._keepAlive);","missing":[{"startCol":8,"endCol":33}]},"255":{"partial":false,"source":"        this._keepAlive = this.httpVersion === '1.0' ? false : true;","missing":[{"startCol":8,"endCol":68},{"startCol":26,"endCol":52},{"startCol":55,"endCol":60},{"startCol":63,"endCol":67}]},"263":{"partial":false,"source":"    if (this._secure !== undefined)","missing":[{"startCol":8,"endCol":34},{"startCol":25,"endCol":34}]},"264":{"partial":false,"source":"        return (this._secure);","missing":[{"startCol":8,"endCol":30}]},"266":{"partial":false,"source":"    this._secure = this.connection.encrypted ? true : false;","missing":[{"startCol":4,"endCol":60},{"startCol":47,"endCol":51},{"startCol":54,"endCol":59}]},"267":{"partial":false,"source":"    return (this._secure);","missing":[{"startCol":4,"endCol":26}]},"273":{"partial":false,"source":"        return (this._upgradeRequest);","missing":[{"startCol":8,"endCol":38}]},"286":{"partial":false,"source":"    var headers = '';","missing":[{"startCol":4,"endCol":21}]},"287":{"partial":false,"source":"    var self = this;","missing":[{"startCol":4,"endCol":20}]},"288":{"partial":false,"source":"    var str;","missing":[{"startCol":4,"endCol":12}]},"290":{"partial":false,"source":"    Object.keys(this.headers).forEach(function (k) {","missing":[{"startCol":4,"endCol":29},{}]},"291":{"partial":false,"source":"        headers += sprintf('%s: %s\\n', k, self.headers[k]);","missing":[{},{"startCol":8,"endCol":59},{"startCol":19,"endCol":58}]},"292":{"partial":false,"source":"    });","missing":[{}]},"294":{"partial":false,"source":"    str = sprintf('%s %s HTTP/%s\\n%s',","missing":[{}]},"295":{"partial":false,"source":"        this.method,","missing":[{}]},"296":{"partial":false,"source":"        this.url,","missing":[{}]},"297":{"partial":false,"source":"        this.httpVersion,","missing":[{}]},"298":{"partial":false,"source":"        headers);","missing":[{}]},"300":{"partial":false,"source":"    return (str);","missing":[{"startCol":4,"endCol":17}]},"305":{"partial":false,"source":"    return (this.headers['user-agent']);","missing":[{"startCol":4,"endCol":40}]},"327":{"partial":false,"source":"        return ([","missing":[{}]},"328":{"partial":false,"source":"            self.serverName,","missing":[{}]},"329":{"partial":false,"source":"            self._currentRoute, // set in server._run","missing":[{}]},"330":{"partial":false,"source":"            name,","missing":[{}]},"331":{"partial":false,"source":"            self._dtraceId","missing":[{}]},"332":{"partial":false,"source":"        ]);","missing":[{}]},"357":{"partial":false,"source":"        return ([","missing":[{}]},"358":{"partial":false,"source":"            self.serverName,","missing":[{}]},"359":{"partial":false,"source":"            self._currentRoute, // set in server._run","missing":[{}]},"360":{"partial":false,"source":"            name,","missing":[{}]},"361":{"partial":false,"source":"            self._dtraceId","missing":[{}]},"362":{"partial":false,"source":"        ]);","missing":[{}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar http = require('http');\nvar url = require('url');\nvar sprintf = require('util').format;\n\nvar assert = require('assert-plus');\nvar mime = require('mime');\nvar Negotatior = require('negotiator');\nvar uuid = require('node-uuid');\n\nvar dtrace = require('./dtrace');\nvar utils = require('./utils');\n\n\n///--- Globals\n\nvar Request = http.IncomingMessage;\n\nvar parseAccept = utils.parseAccept;\nvar sanitizePath = utils.sanitizePath;\n\n\n///-- Helpers\n\nfunction negotiator(req) {\n    var h = req.headers;\n    if (!req._negotatiator) {\n        req._negotiator = new Negotatior({\n            headers: {\n                accept: h.accept || '*/*',\n                'accept-encoding': h['accept-encoding'] ||\n                    'identity'\n            }\n        });\n    }\n\n    return (req._negotiator);\n}\n\n\n///--- API\n\n///--- Patches\n\nRequest.prototype.absoluteUri = function absoluteUri(path) {\n    assert.string(path, 'path');\n\n    var protocol = this.secure ? 'https://' : 'http://';\n    var hostname = this.headers.host;\n    return (url.resolve(protocol + hostname + this.path() + '/', path));\n};\n\n\nRequest.prototype.accepts = function accepts(types) {\n    if (typeof (types) === 'string')\n        types = [types];\n\n    types = types.map(function (t) {\n        assert.string(t, 'type');\n        if (t.indexOf('/') === -1)\n            t = mime.lookup(t);\n        return (t);\n    });\n\n    negotiator(this);\n\n    return (this._negotiator.preferredMediaType(types));\n};\n\n\nRequest.prototype.acceptsEncoding = function acceptsEncoding(types) {\n    if (typeof (types) === 'string')\n        types = [types];\n\n    assert.arrayOfString(types, 'types');\n\n    negotiator(this);\n\n    return (this._negotiator.preferredEncoding(types));\n};\n\n\nRequest.prototype.getContentLength = function getContentLength() {\n    if (this._clen !== undefined)\n        return (this._clen === false ? undefined : this._clen);\n\n    // We should not attempt to read and parse the body of an\n    // Upgrade request, so force Content-Length to zero:\n    if (this.isUpgradeRequest())\n        return (0);\n\n    var len = this.header('content-length');\n    if (!len) {\n        this._clen = false;\n    } else {\n        this._clen = parseInt(len, 10);\n    }\n\n    return (this._clen === false ? undefined : this._clen);\n};\nRequest.prototype.contentLength = Request.prototype.getContentLength;\n\n\nRequest.prototype.getContentType = function getContentType() {\n    if (this._contentType !== undefined)\n        return (this._contentType);\n\n    var index;\n    var type = this.headers['content-type'];\n\n    if (!type) {\n        // RFC2616 section 7.2.1\n        this._contentType = 'application/octet-stream';\n    } else {\n        if ((index = type.indexOf(';')) === -1) {\n            this._contentType = type;\n        } else {\n            this._contentType = type.substring(0, index);\n        }\n    }\n\n    return (this._contentType);\n};\nRequest.prototype.contentType = Request.prototype.getContentType;\n\n\nRequest.prototype.date = function date() {\n    if (this._date !== undefined)\n        return (this._date);\n\n    this._date = new Date(this._time);\n    return (this._date);\n};\n\n\nRequest.prototype.getHref = function getHref() {\n    return (this.getUrl().href);\n};\nRequest.prototype.href = Request.prototype.getHref;\n\n\nRequest.prototype.getId = function getId() {\n    if (this._id !== undefined)\n        return (this._id);\n\n    this._id = this.headers['request-id'] ||\n        this.headers['x-request-id'] ||\n        uuid.v4();\n\n    return (this._id);\n};\nRequest.prototype.id = Request.prototype.getId;\n\n\nRequest.prototype.getPath = function getPath() {\n    return (this.getUrl().pathname);\n};\nRequest.prototype.path = Request.prototype.getPath;\n\n\nRequest.prototype.getQuery = function getQuery() {\n    return (this.getUrl().query || {});\n};\nRequest.prototype.query = Request.prototype.getQuery;\n\n\nRequest.prototype.time = function time() {\n    return (this._time);\n};\n\n\nRequest.prototype.getUrl = function getUrl() {\n    if (this._cacheURL !== this.url) {\n        this._url = url.parse(this.url);\n        this._cacheURL = this.url;\n    }\n    return (this._url);\n};\n\n\nRequest.prototype.getVersion = function getVersion() {\n    if (this._version !== undefined)\n        return (this._version);\n\n    this._version =\n        this.headers['accept-version'] ||\n            this.headers['x-api-version'] ||\n            '*';\n\n    return (this._version);\n};\nRequest.prototype.version = Request.prototype.getVersion;\n\n\nRequest.prototype.header = function header(name, value) {\n    assert.string(name, 'name');\n\n    name = name.toLowerCase();\n\n    if (name === 'referer' || name === 'referrer')\n        name = 'referer';\n\n    return (this.headers[name] || value);\n};\n\n\nRequest.prototype.trailer = function trailer(name, value) {\n    assert.string(name, 'name');\n    name = name.toLowerCase();\n\n    if (name === 'referer' || name === 'referrer')\n        name = 'referer';\n\n    return ((this.trailers || {})[name] || value);\n};\n\n\nRequest.prototype.is = function is(type) {\n    assert.string(type, 'type');\n\n    var contentType = this.getContentType();\n    var matches = true;\n    if (!contentType)\n        return (false);\n\n    if (type.indexOf('/') === -1)\n        type = mime.lookup(type);\n\n    if (type.indexOf('*') !== -1) {\n        type = type.split('/');\n        contentType = contentType.split('/');\n        matches &= (type[0] === '*' || type[0] === contentType[0]);\n        matches &= (type[1] === '*' || type[1] === contentType[1]);\n    } else {\n        matches = (contentType === type);\n    }\n\n    return (matches);\n};\n\n\nRequest.prototype.isChunked = function isChunked() {\n    return (this.headers['transfer-encoding'] === 'chunked');\n};\n\n\nRequest.prototype.isKeepAlive = function isKeepAlive() {\n    if (this._keepAlive !== undefined)\n        return (this._keepAlive);\n\n    if (this.headers.connection) {\n        this._keepAlive = /keep-alive/i.test(this.headers.connection);\n    } else {\n        this._keepAlive = this.httpVersion === '1.0' ? false : true;\n    }\n\n    return (this._keepAlive);\n};\n\n\nRequest.prototype.isSecure = function isSecure() {\n    if (this._secure !== undefined)\n        return (this._secure);\n\n    this._secure = this.connection.encrypted ? true : false;\n    return (this._secure);\n};\n\n\nRequest.prototype.isUpgradeRequest = function isUpgradeRequest() {\n    if (this._upgradeRequest !== undefined)\n        return (this._upgradeRequest);\n    else\n        return (false);\n};\n\n\nRequest.prototype.isUpload = function isUpload() {\n    var m = this.method;\n    return (m === 'PATCH' || m === 'POST' || m === 'PUT');\n};\n\n\nRequest.prototype.toString = function toString() {\n    var headers = '';\n    var self = this;\n    var str;\n\n    Object.keys(this.headers).forEach(function (k) {\n        headers += sprintf('%s: %s\\n', k, self.headers[k]);\n    });\n\n    str = sprintf('%s %s HTTP/%s\\n%s',\n        this.method,\n        this.url,\n        this.httpVersion,\n        headers);\n\n    return (str);\n};\n\n\nRequest.prototype.userAgent = function userAgent() {\n    return (this.headers['user-agent']);\n};\n\n\n/**\n * Start the timer for a request handler function. You must explicitly invoke\n * endHandlerTimer() after invoking this function. Otherwise timing information\n * will be inaccurate.\n * @param String handlerName The name of the handler.\n */\nRequest.prototype.startHandlerTimer = function startHandlerTimer(handlerName)\n{\n    var self = this;\n    // For nested handlers, we prepend the top level handler func name\n    var name = (self._currentHandler === handlerName ?\n                handlerName : self._currentHandler + '-' + handlerName);\n    if (!self._timerMap)\n        self._timerMap = {};\n\n    self._timerMap[name] = process.hrtime();\n\n    dtrace._rstfy_probes['handler-start'].fire(function () {\n        return ([\n            self.serverName,\n            self._currentRoute, // set in server._run\n            name,\n            self._dtraceId\n        ]);\n    });\n};\n\n\n/**\n * Stop the timer for a request handler function.\n * @param String handlerName The name of the handler.\n */\nRequest.prototype.endHandlerTimer = function endHandlerTimer(handlerName)\n{\n    var self = this;\n    // For nested handlers, we prepend the top level handler func name\n    var name = (self._currentHandler === handlerName ?\n                handlerName : self._currentHandler + '-' + handlerName);\n    if (!self.timers)\n        self.timers = [];\n\n    self._timerMap[name] = process.hrtime(self._timerMap[name]);\n    self.timers.push({\n        name: name,\n        time: self._timerMap[name]\n    });\n\n    dtrace._rstfy_probes['handler-done'].fire(function () {\n        return ([\n            self.serverName,\n            self._currentRoute, // set in server._run\n            name,\n            self._dtraceId\n        ]);\n    });\n};","blocks":{"total":61,"seen":35,"missing":26,"percentage":0.5737704918032787}},"hash":"198f41a5ce82f905dff9fb9d6aa75054"},"/Users/yunong/workspace/node-restify/lib/response.js":{"stats":{"percentage":0.9096989966555183,"lines":[{"lineno":78},{"lineno":79},{"lineno":81},{"lineno":89},{"lineno":97},{"lineno":100},{"lineno":101},{"lineno":125},{"lineno":140},{"lineno":141},{"lineno":199},{"lineno":203},{"lineno":204},{"lineno":206},{"lineno":208},{"lineno":216},{"lineno":227},{"lineno":250},{"lineno":251},{"lineno":252},{"lineno":269},{"lineno":270},{"lineno":271},{"lineno":273},{"lineno":274},{"lineno":276},{"lineno":281}],"missing":27,"seen":272,"total":299,"coverage":{"78":{"partial":false,"source":"            if (this.statusCode >= 200 && this.statusCode < 300)","missing":[{"startCol":16,"endCol":38},{"startCol":42,"endCol":63}]},"79":{"partial":false,"source":"                this.statusCode = 406;","missing":[{"startCol":16,"endCol":38}]},"81":{"partial":false,"source":"            return (null);","missing":[{"startCol":12,"endCol":26}]},"89":{"partial":false,"source":"            type = mime.lookup(type);","missing":[{"startCol":12,"endCol":37},{"startCol":19,"endCol":36}]},"97":{"partial":false,"source":"            log.warn({","missing":[{}]},"98":{"partial":false,"source":"                req: self.req","missing":[{}]},"99":{"partial":false,"source":"            }, 'no formatter found. Returning 500.');","missing":[{}]},"100":{"partial":false,"source":"            this.statusCode = 500;","missing":[{"startCol":12,"endCol":34}]},"101":{"partial":false,"source":"            return (null);","missing":[{"startCol":12,"endCol":26}]},"125":{"partial":false,"source":"    return (this._headers || {});","missing":[{"startCol":4,"endCol":33},{"startCol":12,"endCol":31}]},"140":{"partial":false,"source":"        var arg = Array.prototype.slice.call(arguments).slice(2);","missing":[{"startCol":8,"endCol":65},{"startCol":18,"endCol":55}]},"141":{"partial":false,"source":"        value = sprintf(value, arg);","missing":[{"startCol":8,"endCol":36},{"startCol":16,"endCol":35}]},"199":{"partial":false,"source":"        var _props = {","missing":[{}]},"200":{"partial":false,"source":"            code: self.statusCode,","missing":[{}]},"201":{"partial":false,"source":"            headers: headers","missing":[{}]},"202":{"partial":false,"source":"        };","missing":[{}]},"203":{"partial":false,"source":"        if (body instanceof Error) {","missing":[{"startCol":12,"endCol":16},{"startCol":28,"endCol":33}]},"204":{"partial":false,"source":"            _props.err = body;","missing":[{"startCol":12,"endCol":30}]},"206":{"partial":false,"source":"            _props.body = body;","missing":[{"startCol":12,"endCol":31}]},"208":{"partial":false,"source":"        log.trace(_props, 'response::send entered');","missing":[{"startCol":8,"endCol":51}]},"216":{"partial":false,"source":"            self.setHeader(k, headers[k]);","missing":[{"startCol":12,"endCol":41}]},"227":{"partial":false,"source":"            log.trace({res: self}, 'response sent');","missing":[{"startCol":12,"endCol":51}]},"250":{"partial":false,"source":"        assert.object(name, 'object');","missing":[{"startCol":8,"endCol":37}]},"251":{"partial":false,"source":"        Object.keys(name).forEach(function (k) {","missing":[{},{"startCol":8,"endCol":25}]},"252":{"partial":false,"source":"            self.header(k, name[k]);","missing":[{},{"startCol":12,"endCol":35}]},"253":{"partial":false,"source":"        });","missing":[{}]},"269":{"partial":false,"source":"    var headers = this.getHeaders();","missing":[{"startCol":4,"endCol":36},{"startCol":18,"endCol":35}]},"270":{"partial":false,"source":"    var headerString = '';","missing":[{"startCol":4,"endCol":26}]},"271":{"partial":false,"source":"    var str;","missing":[{"startCol":4,"endCol":12}]},"273":{"partial":false,"source":"    Object.keys(headers).forEach(function (k) {","missing":[{},{"startCol":4,"endCol":24}]},"274":{"partial":false,"source":"        headerString += k + ': ' + headers[k] + '\\n';","missing":[{"startCol":8,"endCol":53},{},{"startCol":24,"endCol":25}]},"275":{"partial":false,"source":"    });","missing":[{}]},"276":{"partial":false,"source":"    str = sprintf('HTTP/1.1 %s %s\\n%s',","missing":[{}]},"277":{"partial":false,"source":"        this.statusCode,","missing":[{}]},"278":{"partial":false,"source":"        http.STATUS_CODES[this.statusCode],","missing":[{}]},"279":{"partial":false,"source":"        headerString);","missing":[{}]},"281":{"partial":false,"source":"    return (str);","missing":[{"startCol":4,"endCol":17}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar crypto = require('crypto');\nvar http = require('http');\nvar sprintf = require('util').format;\n\nvar assert = require('assert-plus');\nvar mime = require('mime');\nvar once = require('once');\n\nvar errors = require('./errors');\nvar httpDate = require('./http_date');\n\n\n///--- Globals\n\nvar HttpError = errors.HttpError;\nvar RestError = errors.RestError;\n\nvar Response = http.ServerResponse;\n\n\n///--- API\n\nResponse.prototype.cache = function cache(type, options) {\n    if (typeof (type) !== 'string') {\n        options = type;\n        type = 'public';\n    }\n\n    if (options && options.maxAge !== undefined) {\n        assert.number(options.maxAge, 'options.maxAge');\n        type += ', max-age=' + options.maxAge;\n    }\n\n    return (this.header('Cache-Control', type));\n};\n\n\nResponse.prototype.noCache = function noCache() {\n    // HTTP 1.1\n    this.header('Cache-Control', 'no-cache, no-store, must-revalidate');\n\n    // HTTP 1.0\n    this.header('Pragma', 'no-cache');\n\n    // Proxies\n    this.header('Expires', '0');\n\n    return (this);\n};\n\n\nResponse.prototype.charSet = function charSet(type) {\n    assert.string(type, 'charset');\n\n    this._charSet = type;\n\n    return (this);\n};\n\n\nResponse.prototype.format = function format(body, cb) {\n    var log = this.log;\n    var formatter;\n    var type = this.contentType || this.getHeader('Content-Type');\n    var self = this;\n\n    if (!type) {\n        if (this.req.accepts(this.acceptable)) {\n            type = this.req.accepts(this.acceptable);\n        }\n\n        if (!type) {\n            // The importance of a status code outside of the\n            // 2xx range probably outweighs that of unable being to\n            // format the response body\n            if (this.statusCode >= 200 && this.statusCode < 300)\n                this.statusCode = 406;\n\n            return (null);\n        }\n    } else if (type.indexOf(';') !== '-1') {\n        type = type.split(';')[0];\n    }\n\n    if (!(formatter = this.formatters[type])) {\n        if (type.indexOf('/') === -1)\n            type = mime.lookup(type);\n\n        if (this.acceptable.indexOf(type) === -1)\n            type = 'application/octet-stream';\n\n        formatter = this.formatters[type] || this.formatters['*/*'];\n\n        if (!formatter) {\n            log.warn({\n                req: self.req\n            }, 'no formatter found. Returning 500.');\n            this.statusCode = 500;\n            return (null);\n        }\n    }\n\n    if (this._charSet) {\n        type = type + '; charset=' + this._charSet;\n    }\n\n    this.setHeader('Content-Type', type);\n\n    if (body instanceof Error && body.statusCode !== undefined)\n        this.statusCode = body.statusCode;\n    return (formatter.call(this, this.req, this, body, cb));\n};\n\n\nResponse.prototype.get = function get(name) {\n    assert.string(name, 'name');\n\n    return (this.getHeader(name));\n};\n\n\nResponse.prototype.getHeaders = function getHeaders() {\n    return (this._headers || {});\n};\nResponse.prototype.headers = Response.prototype.getHeaders;\n\n\nResponse.prototype.header = function header(name, value) {\n    assert.string(name, 'name');\n\n    if (value === undefined)\n        return (this.getHeader(name));\n\n    if (value instanceof Date) {\n        value = httpDate(value);\n    } else if (arguments.length > 2) {\n        // Support res.header('foo', 'bar %s', 'baz');\n        var arg = Array.prototype.slice.call(arguments).slice(2);\n        value = sprintf(value, arg);\n    }\n\n    var current = this.getHeader(name);\n    // #779, don't use comma separated values for set-cookie, see\n    // http://tools.ietf.org/html/rfc6265#section-3\n    if (current && name.toLowerCase() !== 'set-cookie') {\n        if (Array.isArray(current)) {\n            current.push(value);\n            value = current;\n        } else {\n            value = [current, value];\n        }\n    }\n\n    this.setHeader(name, value);\n    return (value);\n};\n\n\nResponse.prototype.json = function json(code, object, headers) {\n    if (!/application\\/json/.test(this.header('content-type')))\n        this.header('Content-Type', 'application/json');\n\n    return (this.send(code, object, headers));\n};\n\n\nResponse.prototype.link = function link(l, rel) {\n    assert.string(l, 'link');\n    assert.string(rel, 'rel');\n\n    var _link = sprintf('<%s>; rel=\"%s\"', l, rel);\n    return (this.header('Link', _link));\n};\n\n\nResponse.prototype.send = function send(code, body, headers) {\n    var isHead = (this.req.method === 'HEAD');\n    var log = this.log;\n    var self = this;\n\n    if (code === undefined) {\n        this.statusCode = 200;\n    } else if (code.constructor.name === 'Number') {\n        this.statusCode = code;\n        if (body instanceof Error) {\n            body.statusCode = this.statusCode;\n        }\n    } else {\n        headers = body;\n        body = code;\n        code = null;\n    }\n\n    headers = headers || {};\n\n    if (log.trace()) {\n        var _props = {\n            code: self.statusCode,\n            headers: headers\n        };\n        if (body instanceof Error) {\n            _props.err = body;\n        } else {\n            _props.body = body;\n        }\n        log.trace(_props, 'response::send entered');\n    }\n\n    this._body = body;\n\n    function _cb(err, _body) {\n        self._data = _body;\n        Object.keys(headers).forEach(function (k) {\n            self.setHeader(k, headers[k]);\n        });\n\n        self.writeHead(self.statusCode);\n\n        if (self._data && !(isHead || code === 204 || code === 304))\n            self.write(self._data);\n\n        self.end();\n\n        if (log.trace())\n            log.trace({res: self}, 'response sent');\n    }\n\n    if (body) {\n        var ret = this.format(body, _cb);\n        if (!(ret instanceof Response)) {\n            _cb(null, ret);\n        }\n    } else {\n        _cb(null, null);\n    }\n\n    return (this);\n};\n\n\nResponse.prototype.set = function set(name, val) {\n    var self = this;\n\n    if (arguments.length === 2) {\n        assert.string(name, 'name');\n        this.header(name, val);\n    } else {\n        assert.object(name, 'object');\n        Object.keys(name).forEach(function (k) {\n            self.header(k, name[k]);\n        });\n    }\n\n    return (this);\n};\n\n\nResponse.prototype.status = function status(code) {\n    assert.number(code, 'code');\n\n    this.statusCode = code;\n    return (code);\n};\n\n\nResponse.prototype.toString = function toString() {\n    var headers = this.getHeaders();\n    var headerString = '';\n    var str;\n\n    Object.keys(headers).forEach(function (k) {\n        headerString += k + ': ' + headers[k] + '\\n';\n    });\n    str = sprintf('HTTP/1.1 %s %s\\n%s',\n        this.statusCode,\n        http.STATUS_CODES[this.statusCode],\n        headerString);\n\n    return (str);\n};\n\nif (!Response.prototype.hasOwnProperty('_writeHead'))\n    Response.prototype._writeHead = Response.prototype.writeHead;\n\n\nResponse.prototype.writeHead = function restifyWriteHead() {\n    this.emit('header');\n\n    if (this.statusCode === 204 || this.statusCode === 304) {\n        this.removeHeader('Content-Length');\n        this.removeHeader('Content-MD5');\n        this.removeHeader('Content-Type');\n        this.removeHeader('Content-Encoding');\n    }\n\n    this._writeHead.apply(this, arguments);\n};","blocks":{"total":54,"seen":39,"missing":15,"percentage":0.7222222222222222}},"hash":"81dc5e8d2bb36a517a46a44e124d223b"},"/Users/yunong/workspace/node-restify/lib/clients/index.js":{"stats":{"percentage":1,"lines":[],"missing":0,"seen":14,"total":14,"coverage":{},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar HttpClient = require('./http_client');\nvar JsonClient = require('./json_client');\nvar StringClient = require('./string_client');\n\n\n///--- Exports\n\nmodule.exports = {\n    HttpClient: HttpClient,\n    JsonClient: JsonClient,\n    StringClient: StringClient\n};","blocks":{"total":0,"seen":0,"missing":0,"percentage":1}},"hash":"308a1f58d08848afbc5291e2b52b2e4b"},"/Users/yunong/workspace/node-restify/lib/clients/http_client.js":{"stats":{"percentage":0.9079861111111112,"lines":[{"lineno":34},{"lineno":35},{"lineno":118},{"lineno":129},{"lineno":136},{"lineno":153},{"lineno":171},{"lineno":189},{"lineno":197},{"lineno":207},{"lineno":211},{"lineno":212},{"lineno":213},{"lineno":229},{"lineno":251},{"lineno":280},{"lineno":293},{"lineno":295},{"lineno":297},{"lineno":305},{"lineno":309},{"lineno":316},{"lineno":327},{"lineno":334},{"lineno":335},{"lineno":336},{"lineno":338},{"lineno":341},{"lineno":342},{"lineno":344},{"lineno":356},{"lineno":429},{"lineno":431},{"lineno":443},{"lineno":445},{"lineno":450},{"lineno":453},{"lineno":469},{"lineno":470},{"lineno":472},{"lineno":473},{"lineno":475},{"lineno":476},{"lineno":477},{"lineno":480},{"lineno":532},{"lineno":542},{"lineno":543},{"lineno":544},{"lineno":548},{"lineno":567},{"lineno":569},{"lineno":571}],"missing":53,"seen":523,"total":576,"coverage":{"34":{"partial":false,"source":"    KeepAliveAgent = require('keep-alive-agent');","missing":[{"startCol":4,"endCol":49},{"startCol":21,"endCol":48}]},"35":{"partial":false,"source":"    KeepAliveAgentSecure = KeepAliveAgent.Secure;","missing":[{"startCol":4,"endCol":49}]},"118":{"partial":false,"source":"        opts.agent = false;","missing":[{"startCol":8,"endCol":27}]},"129":{"partial":false,"source":"                return ([id, err.toString()]);","missing":[{"startCol":16,"endCol":46},{"startCol":29,"endCol":43}]},"136":{"partial":false,"source":"        return ([","missing":[{}]},"137":{"partial":false,"source":"            opts.method,","missing":[{}]},"138":{"partial":false,"source":"            opts.path,","missing":[{}]},"139":{"partial":false,"source":"            opts.headers,","missing":[{}]},"140":{"partial":false,"source":"            id","missing":[{}]},"141":{"partial":false,"source":"        ]);","missing":[{}]},"153":{"partial":false,"source":"            return ([ id, res.statusCode, res.headers ]);","missing":[{"startCol":12,"endCol":57}]},"171":{"partial":false,"source":"            return ([id, (err || {}).toString()]);","missing":[{"startCol":12,"endCol":50},{"startCol":25,"endCol":47},{"startCol":26,"endCol":29}]},"189":{"partial":false,"source":"            return ([ id, res.statusCode, res.headers ]);","missing":[{"startCol":12,"endCol":57}]},"197":{"partial":false,"source":"            err = errors.codeToHttpError(res.statusCode);","missing":[{"startCol":12,"endCol":57},{"startCol":18,"endCol":56}]},"207":{"partial":false,"source":"            _socket = socket.socket;","missing":[{"startCol":12,"endCol":36}]},"211":{"partial":false,"source":"            clearTimeout(connectionTimer);","missing":[{"startCol":12,"endCol":41}]},"212":{"partial":false,"source":"            cb(null, req);","missing":[{"startCol":12,"endCol":25}]},"213":{"partial":false,"source":"            return;","missing":[{"startCol":12,"endCol":19}]},"229":{"partial":false,"source":"                        return ([id, err.toString()]);","missing":[{"startCol":24,"endCol":54},{"startCol":37,"endCol":51}]},"251":{"partial":false,"source":"        log.trace({client_req: opts}, 'request sent');","missing":[{"startCol":8,"endCol":53}]},"280":{"partial":false,"source":"        this.log = this.log.child({serializers: bunyan.serializers});","missing":[{"startCol":8,"endCol":69},{"startCol":19,"endCol":68}]},"293":{"partial":false,"source":"        this.proxy = url.parse(process.env.https_proxy);","missing":[{"startCol":8,"endCol":56},{"startCol":21,"endCol":55}]},"295":{"partial":false,"source":"        this.proxy = url.parse(process.env.http_proxy);","missing":[{"startCol":8,"endCol":55},{"startCol":21,"endCol":54}]},"297":{"partial":false,"source":"        this.proxy = options.proxy;","missing":[{"startCol":8,"endCol":35}]},"305":{"partial":true,"source":"    this.url = options.url ? url.parse(options.url) : {};","missing":[{"startCol":54,"endCol":56}]},"309":{"partial":false,"source":"            options.accept = mime.lookup(options.accept);","missing":[{"startCol":12,"endCol":57},{"startCol":29,"endCol":56}]},"316":{"partial":false,"source":"            options.type = mime.lookup(options.contentType);","missing":[{"startCol":12,"endCol":60},{"startCol":27,"endCol":59}]},"327":{"partial":false,"source":"        this.headers['accept-version'] = options.version;","missing":[{"startCol":8,"endCol":57}]},"334":{"partial":false,"source":"            if (this.url.protocol == 'https:') {","missing":[{"startCol":16,"endCol":45}]},"335":{"partial":false,"source":"                if (this.proxy.protocol === 'https:') {","missing":[{"startCol":20,"endCol":52}]},"336":{"partial":false,"source":"                    Agent = tunnelAgent.httpsOverHttps;","missing":[{"startCol":20,"endCol":55}]},"338":{"partial":false,"source":"                    Agent = tunnelAgent.httpsOverHttp;","missing":[{"startCol":20,"endCol":54}]},"341":{"partial":false,"source":"                if (this.proxy.protocol === 'https:') {","missing":[{"startCol":20,"endCol":52}]},"342":{"partial":false,"source":"                    Agent = tunnelAgent.httpOverHttps;","missing":[{"startCol":20,"endCol":54}]},"344":{"partial":false,"source":"                    Agent = tunnelAgent.httpOverHttp;","missing":[{"startCol":20,"endCol":53}]},"356":{"partial":false,"source":"            this.agent = new Agent({","missing":[{}]},"357":{"partial":false,"source":"                proxy: self.proxy,","missing":[{}]},"358":{"partial":false,"source":"                rejectUnauthorized: self.rejectUnauthorized,","missing":[{}]},"359":{"partial":false,"source":"                ca: self.ca","missing":[{}]},"360":{"partial":false,"source":"            });","missing":[{}]},"429":{"partial":false,"source":"    var _opts = this._options('OPTIONS', options);","missing":[{"startCol":4,"endCol":50},{"startCol":16,"endCol":49}]},"431":{"partial":false,"source":"    return (this.read(_opts, callback));","missing":[{"startCol":4,"endCol":40},{"startCol":12,"endCol":38}]},"443":{"partial":false,"source":"    var opts = this._options('PUT', options);","missing":[{"startCol":4,"endCol":45},{"startCol":15,"endCol":44}]},"445":{"partial":false,"source":"    return (this.request(opts, callback));","missing":[{"startCol":4,"endCol":42},{"startCol":12,"endCol":40}]},"450":{"partial":false,"source":"    var opts = this._options('PATCH', options);","missing":[{"startCol":4,"endCol":47},{"startCol":15,"endCol":46}]},"453":{"partial":false,"source":"    return (this.request(opts, callback));","missing":[{"startCol":4,"endCol":42},{"startCol":12,"endCol":40}]},"469":{"partial":false,"source":"    if (username === false) {","missing":[{"startCol":8,"endCol":16}]},"470":{"partial":false,"source":"        delete this.headers.authorization;","missing":[{"startCol":8,"endCol":41}]},"472":{"partial":false,"source":"        assert.string(username, 'username');","missing":[{"startCol":8,"endCol":43}]},"473":{"partial":false,"source":"        assert.string(password, 'password');","missing":[{"startCol":8,"endCol":43}]},"475":{"partial":false,"source":"        var buffer = new Buffer(username + ':' + password, 'utf8');","missing":[{"startCol":8,"endCol":67},{"startCol":32,"endCol":40},{"startCol":49,"endCol":57}]},"476":{"partial":false,"source":"        this.headers.authorization = 'Basic ' +","missing":[{}]},"477":{"partial":false,"source":"            buffer.toString('base64');","missing":[{},{"startCol":12,"endCol":37}]},"480":{"partial":false,"source":"    return (this);","missing":[{"startCol":4,"endCol":18}]},"532":{"partial":true,"source":"        retry: options.retry !== false ? options.retry : false,","missing":[{"startCol":57,"endCol":62}]},"542":{"partial":false,"source":"        Object.keys(options.query).length &&","missing":[{"startCol":8,"endCol":34}]},"543":{"partial":false,"source":"        opts.path.indexOf('?') === -1) {","missing":[{"startCol":8,"endCol":30},{"startCol":35,"endCol":37}]},"544":{"partial":false,"source":"        opts.path += '?' + querystring.stringify(options.query);","missing":[{"startCol":8,"endCol":64},{"startCol":21,"endCol":63},{"startCol":27,"endCol":63}]},"548":{"partial":false,"source":"        opts.socketPath = this.socketPath;","missing":[{"startCol":8,"endCol":42}]},"567":{"partial":false,"source":"            delete opts.headers['content-md5'];","missing":[{"startCol":12,"endCol":46}]},"569":{"partial":false,"source":"            delete opts.headers['content-length'];","missing":[{"startCol":12,"endCol":49}]},"571":{"partial":false,"source":"            delete opts.headers['transfer-encoding'];","missing":[{"startCol":12,"endCol":52}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar crypto = require('crypto');\nvar EventEmitter = require('events').EventEmitter;\nvar fs = require('fs');\nvar http = require('http');\nvar https = require('https');\nvar os = require('os');\nvar querystring = require('querystring');\nvar url = require('url');\nvar util = require('util');\nvar zlib = require('zlib');\n\nvar assert = require('assert-plus');\nvar backoff = require('backoff');\nvar mime = require('mime');\nvar once = require('once');\nvar tunnelAgent = require('tunnel-agent');\nvar uuid = require('node-uuid');\n\nvar dtrace = require('../dtrace');\nvar errors = require('../errors');\nvar bunyan = require('../bunyan_helper');\n\n// Use native KeepAlive in Node as of 0.11.6\nvar semver = require('semver');\nvar nodeVersion = process.version;\nvar nativeKeepAlive = semver.satisfies(nodeVersion, '>=0.11.6');\nvar KeepAliveAgent;\nvar KeepAliveAgentSecure;\nvar httpMaxSockets = http.globalAgent.maxSockets;\nvar httpsMaxSockets = https.globalAgent.maxSockets;\nif (!nativeKeepAlive) {\n    KeepAliveAgent = require('keep-alive-agent');\n    KeepAliveAgentSecure = KeepAliveAgent.Secure;\n} else {\n    KeepAliveAgent = http.Agent;\n    KeepAliveAgentSecure = https.Agent;\n    // maxSockets defaults to Infinity, but that doesn't\n    // lend itself well to KeepAlive, since sockets will\n    // never be reused.\n    httpMaxSockets = Math.min(httpMaxSockets, 1024);\n    httpsMaxSockets = Math.min(httpsMaxSockets, 1024);\n}\n\n///--- Globals\n\n/* JSSTYLED */\nvar VERSION = JSON.parse(fs.readFileSync(require('path').normalize(__dirname + '/../../package.json'), 'utf8')).version;\n\n\n///--- Helpers\n\nfunction cloneRetryOptions(options, defaults) {\n    if (options === false) {\n        return (false);\n    }\n\n    assert.optionalObject(options, 'options.retry');\n    var r = options || {};\n    assert.optionalNumber(r.minTimeout, 'options.retry.minTimeout');\n    assert.optionalNumber(r.maxTimeout, 'options.retry.maxTimeout');\n    assert.optionalNumber(r.retries, 'options.retry.retries');\n    assert.optionalObject(defaults, 'defaults');\n    defaults = defaults || {};\n\n    return ({\n        minTimeout: r.minTimeout || defaults.minTimeout || 1000,\n        maxTimeout: r.maxTimeout || defaults.maxTimeout || Infinity,\n        retries: r.retries || defaults.retries || 4\n    });\n}\n\n\nfunction defaultUserAgent() {\n    var UA = 'restify/' + VERSION +\n        ' (' + os.arch() + '-' + os.platform() + '; ' +\n        'v8/' + process.versions.v8 + '; ' +\n        'OpenSSL/' + process.versions.openssl + ') ' +\n        'node/' + process.versions.node;\n\n    return (UA);\n}\n\n\nfunction ConnectTimeoutError(ms) {\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(this, ConnectTimeoutError);\n\n    this.message = 'connect timeout after ' + ms + 'ms';\n    this.name = 'ConnectTimeoutError';\n}\nutil.inherits(ConnectTimeoutError, Error);\n\nfunction RequestTimeoutError(ms) {\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(this, RequestTimeoutError);\n\n    this.message = 'request timeout after ' + ms + 'ms';\n    this.name = 'RequestTimeoutError';\n}\nutil.inherits(RequestTimeoutError, Error);\n\nfunction rawRequest(opts, cb) {\n    assert.object(opts, 'options');\n    assert.object(opts.log, 'options.log');\n    assert.func(cb, 'callback');\n\n    cb = once(cb);\n\n    var id = dtrace.nextId();\n    var log = opts.log;\n    var proto = opts.protocol === 'https:' ? https : http;\n    var connectionTimer;\n    var requestTimer;\n\n    if (opts.cert && opts.key)\n        opts.agent = false;\n\n    if (opts.connectTimeout) {\n        connectionTimer = setTimeout(function connectTimeout() {\n            connectionTimer = null;\n            if (req) {\n                req.abort();\n            }\n\n            var err = new ConnectTimeoutError(opts.connectTimeout);\n            dtrace._rstfy_probes['client-error'].fire(function () {\n                return ([id, err.toString()]);\n            });\n            cb(err, req);\n        }, opts.connectTimeout);\n    }\n\n    dtrace._rstfy_probes['client-request'].fire(function () {\n        return ([\n            opts.method,\n            opts.path,\n            opts.headers,\n            id\n        ]);\n    });\n\n    var emit_result = once(function _emit_result(_err, _req, _res) {\n        _req.emit('result', _err, _res);\n    });\n\n    var req = proto.request(opts, function onResponse(res) {\n        clearTimeout(connectionTimer);\n        clearTimeout(requestTimer);\n\n        dtrace._rstfy_probes['client-response'].fire(function () {\n            return ([ id, res.statusCode, res.headers ]);\n        });\n        log.trace({client_res: res}, 'Response received');\n\n        res.log = log;\n\n        var err;\n        if (res.statusCode >= 400)\n            err = errors.codeToHttpError(res.statusCode);\n\n        req.removeAllListeners('socket');\n\n        emit_result((err || null), req, res);\n    });\n    req.log = log;\n\n    req.on('error', function onError(err) {\n        dtrace._rstfy_probes['client-error'].fire(function () {\n            return ([id, (err || {}).toString()]);\n        });\n        log.trace({err: err}, 'Request failed');\n        clearTimeout(connectionTimer);\n        clearTimeout(requestTimer);\n\n        cb(err, req);\n        if (req) {\n            process.nextTick(function () {\n                emit_result(err, req, null);\n            });\n        }\n    });\n\n    req.once('upgrade', function onUpgrade(res, socket, _head) {\n        clearTimeout(connectionTimer);\n        clearTimeout(requestTimer);\n        dtrace._rstfy_probes['client-response'].fire(function () {\n            return ([ id, res.statusCode, res.headers ]);\n        });\n        log.trace({client_res: res}, 'upgrade response received');\n\n        res.log = log;\n\n        var err;\n        if (res.statusCode >= 400)\n            err = errors.codeToHttpError(res.statusCode);\n\n        req.removeAllListeners('error');\n        req.removeAllListeners('socket');\n        req.emit('upgradeResult', (err || null), res, socket, _head);\n    });\n\n    req.once('socket', function onSocket(socket) {\n        var _socket = socket;\n        if (opts.protocol === 'https:' && socket.socket) {\n            _socket = socket.socket;\n        }\n\n        if (_socket.writable && !_socket._connecting) {\n            clearTimeout(connectionTimer);\n            cb(null, req);\n            return;\n        }\n\n        _socket.once('connect', function onConnect() {\n            clearTimeout(connectionTimer);\n            if (opts._keep_alive) {\n                _socket.setKeepAlive(true);\n                socket.setKeepAlive(true);\n            }\n\n            if (opts.requestTimeout) {\n                requestTimer = setTimeout(function requestTimeout() {\n                    requestTimer = null;\n\n                    var err = new RequestTimeoutError(opts.requestTimeout);\n                    dtrace._rstfy_probes['client-error'].fire(function () {\n                        return ([id, err.toString()]);\n                    });\n\n                    cb(err, req);\n\n                    if (req) {\n                        req.abort();\n                        process.nextTick(function () {\n                            req.emit('result', err, null);\n                        });\n                    }\n                }, opts.requestTimeout);\n            }\n\n            cb(null, req);\n        });\n    });\n\n    if (opts.signRequest)\n        opts.signRequest(req);\n\n    if (log.trace())\n        log.trace({client_req: opts}, 'request sent');\n} // end `rawRequest`\n\n\n///--- API\n\nfunction HttpClient(options) {\n    assert.object(options, 'options');\n    assert.optionalObject(options.headers, 'options.headers');\n    assert.object(options.log, 'options.log');\n    assert.optionalFunc(options.signRequest, 'options.signRequest');\n    assert.optionalString(options.socketPath, 'options.socketPath');\n    assert.optionalString(options.url, 'options.url');\n\n    EventEmitter.call(this);\n\n    var self = this;\n\n    this.agent = options.agent;\n    this.ca = options.ca;\n    this.cert = options.cert;\n    this.ciphers = options.ciphers;\n    this.connectTimeout = options.connectTimeout || false;\n    this.requestTimeout = options.requestTimeout || false;\n    this.headers = options.headers || {};\n    this.log = options.log;\n    if (!this.log.serializers) {\n        // Ensure logger has a reasonable serializer for `client_res`\n        // and `client_req` logged in this module.\n        this.log = this.log.child({serializers: bunyan.serializers});\n    }\n    this.key = options.key;\n    this.name = options.name || 'HttpClient';\n    this.passphrase = options.passphrase;\n    this.pfx = options.pfx;\n    if (options.rejectUnauthorized !== undefined) {\n        this.rejectUnauthorized = options.rejectUnauthorized;\n    } else {\n        this.rejectUnauthorized = true;\n    }\n\n    if (process.env.https_proxy) {\n        this.proxy = url.parse(process.env.https_proxy);\n    } else if (process.env.http_proxy) {\n        this.proxy = url.parse(process.env.http_proxy);\n    } else if (options.proxy) {\n        this.proxy = options.proxy;\n    } else {\n        this.proxy = false;\n    }\n\n    this.retry = cloneRetryOptions(options.retry);\n    this.signRequest = options.signRequest || false;\n    this.socketPath = options.socketPath || false;\n    this.url = options.url ? url.parse(options.url) : {};\n\n    if (options.accept) {\n        if (options.accept.indexOf('/') === -1)\n            options.accept = mime.lookup(options.accept);\n\n        this.headers.accept = options.accept;\n    }\n\n    if (options.contentType) {\n        if (options.contentType.indexOf('/') === -1)\n            options.type = mime.lookup(options.contentType);\n\n        this.headers['content-type'] = options.contentType;\n    }\n\n    if (options.userAgent !== false) {\n        this.headers['user-agent'] = options.userAgent ||\n            defaultUserAgent();\n    }\n\n    if (options.version)\n        this.headers['accept-version'] = options.version;\n\n    if (this.agent === undefined) {\n        var Agent;\n        var maxSockets;\n\n        if (this.proxy) {\n            if (this.url.protocol == 'https:') {\n                if (this.proxy.protocol === 'https:') {\n                    Agent = tunnelAgent.httpsOverHttps;\n                } else {\n                    Agent = tunnelAgent.httpsOverHttp;\n                }\n            } else {\n                if (this.proxy.protocol === 'https:') {\n                    Agent = tunnelAgent.httpOverHttps;\n                } else {\n                    Agent = tunnelAgent.httpOverHttp;\n                }\n            }\n        } else if (this.url.protocol === 'https:') {\n            Agent = KeepAliveAgentSecure;\n            maxSockets = httpsMaxSockets;\n        } else {\n            Agent = KeepAliveAgent;\n            maxSockets = httpMaxSockets;\n        }\n\n        if (this.proxy) {\n            this.agent = new Agent({\n                proxy: self.proxy,\n                rejectUnauthorized: self.rejectUnauthorized,\n                ca: self.ca\n            });\n        } else {\n            this.agent = new Agent({\n                cert: self.cert,\n                ca: self.ca,\n                ciphers: self.ciphers,\n                key: self.key,\n                maxSockets: maxSockets,\n\n                // require('keep-alive-agent')\n                maxKeepAliveRequests: 0,\n                maxKeepAliveTime: 0,\n\n                // native keepalive\n                keepAliveMsecs: 1000,\n                keepAlive: true,\n\n                passphrase: self.passphrase,\n                pfx: self.pfx,\n                rejectUnauthorized: self.rejectUnauthorized\n            });\n            this._keep_alive = true;\n        }\n    }\n}\nutil.inherits(HttpClient, EventEmitter);\nmodule.exports = HttpClient;\n\n\nHttpClient.prototype.close = function close() {\n    var sockets = this.agent.sockets;\n    Object.keys((sockets || {})).forEach(function (k) {\n        if (Array.isArray(sockets[k])) {\n            sockets[k].forEach(function (s) {\n                s.end();\n            });\n        }\n    });\n\n    sockets = this.agent.idleSockets || this.agent.freeSockets;\n    Object.keys((sockets || {})).forEach(function (k) {\n        sockets[k].forEach(function (s) {\n            s.end();\n        });\n    });\n};\n\n\nHttpClient.prototype.del = function del(options, callback) {\n    var opts = this._options('DELETE', options);\n\n    return (this.read(opts, callback));\n};\n\n\nHttpClient.prototype.get = function get(options, callback) {\n    var opts = this._options('GET', options);\n\n    return (this.read(opts, callback));\n};\n\n\nHttpClient.prototype.head = function head(options, callback) {\n    var opts = this._options('HEAD', options);\n\n    return (this.read(opts, callback));\n};\n\nHttpClient.prototype.opts = function http_options(options, callback) {\n    var _opts = this._options('OPTIONS', options);\n\n    return (this.read(_opts, callback));\n};\n\n\nHttpClient.prototype.post = function post(options, callback) {\n    var opts = this._options('POST', options);\n\n    return (this.request(opts, callback));\n};\n\n\nHttpClient.prototype.put = function put(options, callback) {\n    var opts = this._options('PUT', options);\n\n    return (this.request(opts, callback));\n};\n\n\nHttpClient.prototype.patch = function patch(options, callback) {\n    var opts = this._options('PATCH', options);\n\n\n    return (this.request(opts, callback));\n};\n\n\nHttpClient.prototype.read = function read(options, callback) {\n    var r = this.request(options, function readRequestCallback(err, req) {\n        if (!err)\n            req.end();\n\n        return (callback(err, req));\n    });\n    return (r);\n};\n\n\nHttpClient.prototype.basicAuth = function basicAuth(username, password) {\n    if (username === false) {\n        delete this.headers.authorization;\n    } else {\n        assert.string(username, 'username');\n        assert.string(password, 'password');\n\n        var buffer = new Buffer(username + ':' + password, 'utf8');\n        this.headers.authorization = 'Basic ' +\n            buffer.toString('base64');\n    }\n\n    return (this);\n};\n\n\nHttpClient.prototype.request = function request(opts, cb) {\n    assert.object(opts, 'options');\n    assert.func(cb, 'callback');\n\n    cb = once(cb);\n\n    if (opts.retry === false) {\n        rawRequest(opts, cb);\n        return;\n    }\n\n    var call;\n    var retry = cloneRetryOptions(opts.retry);\n\n    opts._keep_alive = this._keep_alive;\n    call = backoff.call(rawRequest, opts, cb);\n    call.setStrategy(new backoff.ExponentialStrategy({\n        initialDelay: retry.minTimeout,\n        maxDelay: retry.maxTimeout\n    }));\n    call.failAfter(retry.retries);\n    call.on('backoff', this.emit.bind(this, 'attempt'));\n\n    call.start();\n};\n\n\nHttpClient.prototype._options = function (method, options) {\n    if (typeof (options) !== 'object')\n        options = { path: options };\n\n    var self = this;\n    var opts = {\n        agent: options.agent !== undefined ? options.agent : self.agent,\n        ca: options.ca || self.ca,\n        cert: options.cert || self.cert,\n        ciphers: options.ciphers || self.ciphers,\n        connectTimeout: options.connectTimeout || self.connectTimeout,\n        requestTimeout: options.requestTimeout || self.requestTimeout,\n        headers: options.headers || {},\n        key: options.key || self.key,\n        log: options.log || self.log,\n        method: method,\n        passphrase: options.passphrase || self.passphrase,\n        path: options.path || self.path,\n        pfx: options.pfx || self.pfx,\n        rejectUnauthorized: options.rejectUnauthorized ||\n            self.rejectUnauthorized,\n        retry: options.retry !== false ? options.retry : false,\n        signRequest: options.signRequest || self.signRequest\n    };\n\n    if (!opts.retry && opts.retry !== false)\n        opts.retry = self.retry;\n\n\n    // Backwards compatibility with restify < 1.0\n    if (options.query &&\n        Object.keys(options.query).length &&\n        opts.path.indexOf('?') === -1) {\n        opts.path += '?' + querystring.stringify(options.query);\n    }\n\n    if (this.socketPath)\n        opts.socketPath = this.socketPath;\n\n    Object.keys(this.url).forEach(function (k) {\n        if (!opts[k])\n            opts[k] = self.url[k];\n    });\n\n    Object.keys(self.headers).forEach(function (k) {\n        if (!opts.headers[k])\n            opts.headers[k] = self.headers[k];\n    });\n\n    if (!opts.headers.date)\n        opts.headers.date = new Date().toUTCString();\n\n    if (method === 'GET' || method === 'HEAD' || method === 'DELETE') {\n        if (opts.headers['content-type'])\n            delete opts.headers['content-type'];\n        if (opts.headers['content-md5'])\n            delete opts.headers['content-md5'];\n        if (opts.headers['content-length'] && method !== 'DELETE')\n            delete opts.headers['content-length'];\n        if (opts.headers['transfer-encoding'])\n            delete opts.headers['transfer-encoding'];\n    }\n\n    return (opts);\n};\n// vim: set ts=4 sts=4 sw=4 et:","blocks":{"total":101,"seen":63,"missing":38,"percentage":0.6237623762376238}},"hash":"f795da64da8c298a8024519e095f3719"},"/Users/yunong/workspace/node-restify/lib/clients/json_client.js":{"stats":{"percentage":0.9431818181818182,"lines":[{"lineno":34},{"lineno":61},{"lineno":64},{"lineno":76},{"lineno":77}],"missing":5,"seen":83,"total":88,"coverage":{"34":{"partial":true,"source":"    body = JSON.stringify(body !== null ? body : {});","missing":[{"startCol":49,"endCol":51}]},"61":{"partial":false,"source":"                    (obj.error ? obj.error.code : '') ||","missing":[{"startCol":33,"endCol":47},{"startCol":50,"endCol":52}]},"64":{"partial":true,"source":"                    (obj.error ? obj.error.message : '') ||","missing":[{"startCol":33,"endCol":50}]},"76":{"partial":false,"source":"                err = codeToHttpError(res.statusCode,","missing":[{}]},"77":{"partial":false,"source":"                    obj.message || '', data);","missing":[{},{"startCol":20,"endCol":37}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar crypto = require('crypto');\nvar util = require('util');\n\nvar assert = require('assert-plus');\n\nvar codeToHttpError = require('../errors/http_error').codeToHttpError;\nvar RestError = require('../errors').RestError;\nvar StringClient = require('./string_client');\n\n\n///--- API\n\nfunction JsonClient(options) {\n    assert.object(options, 'options');\n\n    options.accept = 'application/json';\n    options.name = options.name || 'JsonClient';\n    options.contentType = 'application/json';\n\n    StringClient.call(this, options);\n\n    this._super = StringClient.prototype;\n}\nutil.inherits(JsonClient, StringClient);\nmodule.exports = JsonClient;\n\n\nJsonClient.prototype.write = function write(options, body, callback) {\n    assert.ok(body !== undefined, 'body');\n    assert.object(body, 'body');\n\n    body = JSON.stringify(body !== null ? body : {});\n    return (this._super.write.call(this, options, body, callback));\n};\n\n\nJsonClient.prototype.parse = function parse(req, callback) {\n    var log = this.log;\n\n    function parseResponse(err, req2, res, data) {\n        var obj;\n        try {\n            if (data && !/^\\s*$/.test(data))\n                obj = JSON.parse(data);\n        } catch (e) {\n            // Not really sure what else we can do here, besides\n            // make the client just keep going.\n            log.trace(e, 'Invalid JSON in response');\n        }\n        obj = obj || {};\n\n        if (res && res.statusCode >= 400) {\n            // Upcast error to a RestError (if we can)\n            // Be nice and handle errors like\n            // { error: { code: '', message: '' } }\n            // in addition to { code: '', message: '' }.\n            if (obj.code || (obj.error && obj.error.code)) {\n                var _c = obj.code ||\n                    (obj.error ? obj.error.code : '') ||\n                    '';\n                var _m = obj.message ||\n                    (obj.error ? obj.error.message : '') ||\n                    '';\n\n                err = new RestError({\n                    message: _m,\n                    restCode: _c,\n                    statusCode: res.statusCode\n                });\n                err.name = err.restCode;\n                if (!/Error$/.test(err.name))\n                    err.name += 'Error';\n            } else if (!err) {\n                err = codeToHttpError(res.statusCode,\n                    obj.message || '', data);\n            }\n        }\n\n        if (err)\n            err.body = obj;\n\n        callback((err || null), req2, res, obj);\n    }\n\n    return (this._super.parse.call(this, req, parseResponse));\n};","blocks":{"total":12,"seen":11,"missing":1,"percentage":0.9166666666666666}},"hash":"d551ecb1b72ac1462c5951343c54b0a2"},"/Users/yunong/workspace/node-restify/lib/clients/string_client.js":{"stats":{"percentage":0.9105263157894737,"lines":[{"lineno":37},{"lineno":38},{"lineno":48},{"lineno":49},{"lineno":59},{"lineno":60},{"lineno":71},{"lineno":95},{"lineno":96},{"lineno":114},{"lineno":115},{"lineno":140},{"lineno":141},{"lineno":142},{"lineno":143},{"lineno":159},{"lineno":175}],"missing":17,"seen":173,"total":190,"coverage":{"37":{"partial":false,"source":"        callback = body;","missing":[{"startCol":8,"endCol":24}]},"38":{"partial":false,"source":"        body = null;","missing":[{"startCol":8,"endCol":20}]},"48":{"partial":false,"source":"        callback = body;","missing":[{"startCol":8,"endCol":24}]},"49":{"partial":false,"source":"        body = null;","missing":[{"startCol":8,"endCol":20}]},"59":{"partial":false,"source":"        callback = body;","missing":[{"startCol":8,"endCol":24}]},"60":{"partial":false,"source":"        body = null;","missing":[{"startCol":8,"endCol":20}]},"71":{"partial":false,"source":"            return (callback(err, req));","missing":[{"startCol":12,"endCol":40},{"startCol":20,"endCol":38}]},"95":{"partial":false,"source":"                callback(err, req);","missing":[{"startCol":16,"endCol":34}]},"96":{"partial":false,"source":"                return;","missing":[{"startCol":16,"endCol":23}]},"114":{"partial":false,"source":"                    callback(err, null);","missing":[{"startCol":20,"endCol":39}]},"115":{"partial":false,"source":"                    return;","missing":[{"startCol":20,"endCol":27}]},"140":{"partial":true,"source":"                if (hash && md5 !== hash.digest('base64')) {","missing":[{"startCol":28,"endCol":31},{"startCol":36,"endCol":57}]},"141":{"partial":false,"source":"                    err = new Error('BadDigest');","missing":[{"startCol":20,"endCol":49}]},"142":{"partial":false,"source":"                    callback(err, req, res);","missing":[{"startCol":20,"endCol":43}]},"143":{"partial":false,"source":"                    return;","missing":[{"startCol":20,"endCol":27}]},"159":{"partial":false,"source":"                hash = crypto.createHash('md5');","missing":[{"startCol":16,"endCol":48},{"startCol":23,"endCol":47}]},"175":{"partial":false,"source":"                    hash.update(chunk);","missing":[{"startCol":20,"endCol":38}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar crypto = require('crypto');\nvar zlib = require('zlib');\n\nvar assert = require('assert-plus');\nvar qs = require('querystring');\nvar util = require('util');\n\nvar HttpClient = require('./http_client');\n\n\n///--- Helpers\n\n\n///--- API\n\nfunction StringClient(options) {\n    assert.object(options, 'options');\n    assert.optionalObject(options.gzip, 'options.gzip');\n\n    options.accept = options.accept || 'text/plain';\n    options.name = options.name || 'StringClient';\n    options.contentType =\n        options.contentType || 'application/x-www-form-urlencoded';\n\n    HttpClient.call(this, options);\n    this.gzip = options.gzip;\n}\nutil.inherits(StringClient, HttpClient);\nmodule.exports = StringClient;\n\n\nStringClient.prototype.post = function post(options, body, callback) {\n    var opts = this._options('POST', options);\n    if (typeof (body) === 'function') {\n        callback = body;\n        body = null;\n    }\n\n    return (this.write(opts, body, callback));\n};\n\n\nStringClient.prototype.put = function put(options, body, callback) {\n    var opts = this._options('PUT', options);\n    if (typeof (body) === 'function') {\n        callback = body;\n        body = null;\n    }\n\n    return (this.write(opts, body, callback));\n};\n\n\nStringClient.prototype.patch = function patch(options, body, callback) {\n    var opts = this._options('PATCH', options);\n    if (typeof (body) === 'function') {\n        callback = body;\n        body = null;\n    }\n\n    return (this.write(opts, body, callback));\n};\n\n\nStringClient.prototype.read = function read(options, callback) {\n    var self = this;\n    this.request(options, function _parse(err, req) {\n        if (err)\n            return (callback(err, req));\n\n        req.once('result', self.parse(req, callback));\n        return (req.end());\n    });\n    return (this);\n};\n\n\nStringClient.prototype.write = function write(options, body, callback) {\n    if (body !== null && typeof (body) !== 'string')\n        body = qs.stringify(body);\n\n    var self = this;\n\n    function _write(data) {\n        if (data) {\n            var hash = crypto.createHash('md5');\n            hash.update(data, 'utf8');\n            options.headers['content-md5'] = hash.digest('base64');\n        }\n\n        self.request(options, function (err, req) {\n            if (err) {\n                callback(err, req);\n                return;\n            }\n\n            req.once('result', self.parse(req, callback));\n            req.end(data);\n        });\n    }\n\n    options.headers = options.headers || {};\n\n    if (this.gzip)\n        options.headers['accept-encoding'] = 'gzip';\n\n    if (body) {\n        if (this.gzip) {\n            options.headers['content-encoding'] = 'gzip';\n            zlib.gzip(body, function (err, data) {\n                if (err) {\n                    callback(err, null);\n                    return;\n                }\n\n                options.headers['content-length'] = data.length;\n                _write(data);\n            });\n        } else {\n            options.headers['content-length'] =\n                Buffer.byteLength(body);\n            _write(body);\n        }\n    } else {\n        _write();\n    }\n\n    return (this);\n};\n\n\nStringClient.prototype.parse = function parse(req, callback) {\n    function parseResponse(err, res) {\n        if (res) {\n            function done() {\n                res.log.trace('body received:\\n%s', body);\n                res.body = body;\n                if (hash && md5 !== hash.digest('base64')) {\n                    err = new Error('BadDigest');\n                    callback(err, req, res);\n                    return;\n                }\n\n                if (err) {\n                    err.body = body;\n                    err.message = body;\n                }\n\n                callback(err, req, res, body);\n            }\n\n            var body = '';\n            var gz;\n            var hash;\n            var md5 = res.headers['content-md5'];\n            if (md5 && req.method !== 'HEAD' && res.statusCode !== 206)\n                hash = crypto.createHash('md5');\n\n            if (res.headers['content-encoding'] === 'gzip') {\n                gz = zlib.createGunzip();\n                gz.on('data', function (chunk) {\n                    body += chunk.toString('utf8');\n                });\n                gz.once('end', done);\n                res.once('end', gz.end.bind(gz));\n            } else {\n                res.setEncoding('utf8');\n                res.once('end', done);\n            }\n\n            res.on('data', function onData(chunk) {\n                if (hash)\n                    hash.update(chunk);\n\n                if (gz) {\n                    gz.write(chunk);\n                } else {\n                    body += chunk;\n                }\n            });\n\n        } else {\n            callback(err, req, null, null);\n        }\n    }\n\n    return (parseResponse);\n};","blocks":{"total":38,"seen":29,"missing":9,"percentage":0.7631578947368421}},"hash":"196c96bc2f9483924bb5ff1eed43b080"},"/Users/yunong/workspace/node-restify/test/fieldedTextParser.test.js":{"stats":{"percentage":0.9699248120300752,"lines":[{"lineno":62},{"lineno":63},{"lineno":72},{"lineno":73}],"missing":4,"seen":129,"total":133,"coverage":{"62":{"partial":false,"source":"        console.error(e.stack);","missing":[{"startCol":8,"endCol":30}]},"63":{"partial":false,"source":"        process.exit(1);","missing":[{"startCol":8,"endCol":23}]},"72":{"partial":false,"source":"        console.error(e.stack);","missing":[{"startCol":8,"endCol":30}]},"73":{"partial":false,"source":"        process.exit(1);","missing":[{"startCol":8,"endCol":23}]}},"source":"/**\n * Module dependencies\n */\n\nif (require.cache[__dirname + '/lib/helper.js']) {\n    delete require.cache[__dirname + '/lib/helper.js'];\n}\n\nvar restify = require('../lib');\nvar fs = require('fs');\nvar helper = require('./lib/helper.js');\nvar before = helper.before;\nvar after = helper.after;\nvar test = helper.test;\n\n/**\n * Globals\n */\n\nvar fsOptions = { encoding: 'utf8' };\n\nvar PORT = process.env.UNIT_TEST_PORT || 3333;\nvar CLIENT;\nvar SERVER;\nvar DATA_CSV = fs.readFileSync(__dirname + '/files/data-csv.txt', fsOptions);\nvar DATA_TSV = fs.readFileSync(__dirname + '/files/data-tsv.txt', fsOptions);\nvar OBJECT_CSV = require(__dirname + '/files/object-csv.json');\nvar OBJECT_TSV = require(__dirname + '/files/object-tsv.json');\n\n/**\n * Tests\n */\n\nbefore(function (callback) {\n    try {\n        SERVER = restify.createServer({\n            dtrace: helper.dtrace,\n            log: helper.getLog('server')\n        });\n        SERVER.use(restify.acceptParser(SERVER.acceptable));\n        SERVER.use(restify.authorizationParser());\n        SERVER.use(restify.dateParser());\n        SERVER.use(restify.queryParser());\n        SERVER.use(restify.bodyParser());\n        SERVER.post('/data', function respond(req, res, next) {\n            res.send({\n                status: 'okay',\n                parsedReq: req.body\n            });\n            return (next());\n        });\n        SERVER.listen(PORT, '127.0.0.1', function () {\n            CLIENT = restify.createClient({\n                url: 'http://127.0.0.1:' + PORT,\n                dtrace: helper.dtrace,\n                retry: false,\n                agent: false\n            });\n            callback();\n        });\n    } catch (e) {\n        console.error(e.stack);\n        process.exit(1);\n    }\n});\n\nafter(function (callback) {\n    try {\n        CLIENT.close();\n        SERVER.close(callback);\n    } catch (e) {\n        console.error(e.stack);\n        process.exit(1);\n    }\n});\n\ntest('Parse CSV body', function (t) {\n    var options = {\n        path: '/data',\n        headers: {\n            'Content-Type': 'text/csv'\n        }\n    };\n    CLIENT.post(options, function (err, req) {\n        t.ifError(err);\n        req.on('result', function (errReq, res) {\n            t.ifError(errReq);\n            res.body = '';\n            res.setEncoding('utf8');\n            res.on('data', function (chunk) {\n                res.body += chunk;\n            });\n            res.on('end', function () {\n                res.body = JSON.parse(res.body);\n                var parsedReqStr = JSON.stringify(res.body.parsedReq);\n                var objectStr = JSON.stringify(OBJECT_CSV);\n                t.equal(parsedReqStr, objectStr);\n                t.end();\n            });\n        });\n        req.write(DATA_CSV);\n        req.end();\n    });\n});\n\ntest('Parse TSV body', function (t) {\n    var options = {\n        path: '/data',\n        headers: {\n            'Content-Type': 'text/tsv'\n        }\n    };\n    CLIENT.post(options, function (err, req) {\n        t.ifError(err);\n        req.on('result', function (errReq, res) {\n            t.ifError(errReq);\n            res.body = '';\n            res.setEncoding('utf8');\n            res.on('data', function (chunk) {\n                res.body += chunk;\n            });\n            res.on('end', function () {\n                res.body = JSON.parse(res.body);\n                var parsedReqStr = JSON.stringify(res.body.parsedReq);\n                var objectStr = JSON.stringify(OBJECT_TSV);\n                t.equal(parsedReqStr, objectStr);\n                t.end();\n            });\n        });\n        req.write(DATA_TSV);\n        req.end();\n    });\n});","blocks":{"total":19,"seen":17,"missing":2,"percentage":0.8947368421052632}},"hash":"9784078d514a614a47318db8a0dc8f5c"},"/Users/yunong/workspace/node-restify/test/formatter.test.js":{"stats":{"percentage":0.9652173913043478,"lines":[{"lineno":64},{"lineno":65},{"lineno":74},{"lineno":75}],"missing":4,"seen":111,"total":115,"coverage":{"64":{"partial":false,"source":"        console.error(e.stack);","missing":[{"startCol":8,"endCol":30}]},"65":{"partial":false,"source":"        process.exit(1);","missing":[{"startCol":8,"endCol":23}]},"74":{"partial":false,"source":"        console.error(e.stack);","missing":[{"startCol":8,"endCol":30}]},"75":{"partial":false,"source":"        process.exit(1);","missing":[{"startCol":8,"endCol":23}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\n\nvar restify = require('../lib');\n\nif (require.cache[__dirname + '/lib/helper.js'])\n    delete require.cache[__dirname + '/lib/helper.js'];\nvar helper = require('./lib/helper.js');\n\n\n///--- Globals\n\nvar after = helper.after;\nvar before = helper.before;\nvar test = helper.test;\n\nvar PORT = process.env.UNIT_TEST_PORT || 0;\nvar CLIENT;\nvar SERVER;\n\nvar isFirstRequest = true;\n\n\n///--- Tests\n\nbefore(function (callback) {\n    try {\n        SERVER = restify.createServer({\n            formatters: {\n                'text/plain': function (req, res, body, cb) {\n                    if (isFirstRequest) {\n                        process.nextTick(function () {\n                            isFirstRequest = false;\n                            cb(null, 'async fmt');\n                        });\n                        return (this);\n                    }\n\n                    return ('sync fmt');\n                },\n                'application/foo; q=0.9': function () {\n                    return ('foo!');\n                }\n            },\n            dtrace: helper.dtrace,\n            log: helper.getLog('server'),\n            version: ['2.0.0', '0.5.4', '1.4.3']\n        });\n        SERVER.listen(PORT, '127.0.0.1', function () {\n            PORT = SERVER.address().port;\n            CLIENT = restify.createStringClient({\n                url: 'http://127.0.0.1:' + PORT,\n                dtrace: helper.dtrace,\n                retry: false,\n                agent: false\n            });\n            SERVER.get('/tmp', function (req, res) {\n                res.send('dummy response');\n            });\n            process.nextTick(callback);\n        });\n    } catch (e) {\n        console.error(e.stack);\n        process.exit(1);\n    }\n});\n\n\nafter(function (callback) {\n    try {\n        SERVER.close(callback);\n    } catch (e) {\n        console.error(e.stack);\n        process.exit(1);\n    }\n});\n\n\ntest('async formatter', function (t) {\n    CLIENT.get('/tmp', function (err, req, res, data) {\n        t.ifError(err);\n        t.ok(req);\n        t.ok(res);\n        t.equal(data, 'async fmt');\n        t.end();\n    });\n});\n\ntest('sync formatter', function (t) {\n    CLIENT.get('/tmp', function (err, req, res, data) {\n        t.ifError(err);\n        t.ok(req);\n        t.ok(res);\n        t.equal(data, 'sync fmt');\n        t.end();\n    });\n});\n\n\ntest('q-val priority', function (t) {\n    var opts = {\n        path: '/tmp',\n        headers: {\n            accept: 'application/*'\n        }\n    };\n    CLIENT.get(opts, function (err, req, res, data) {\n        t.ifError(err);\n        t.ok(req);\n        t.ok(res);\n        t.equal(data, 'foo!');\n        t.end();\n    });\n});","blocks":{"total":19,"seen":17,"missing":2,"percentage":0.8947368421052632}},"hash":"920c80011401763b39ac700c8fd41155"},"/Users/yunong/workspace/node-restify/test/index.test.js":{"stats":{"percentage":1,"lines":[],"missing":0,"seen":37,"total":37,"coverage":{},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar restify = require('../lib/index');\n\nif (require.cache[__dirname + '/lib/helper.js'])\n    delete require.cache[__dirname + '/lib/helper.js'];\nvar helper = require('./lib/helper.js');\n\n\n///--- Globals\n\nvar realizeUrl = restify.realizeUrl;\nvar test = helper.test;\n\n\n///--- Tests\n\ntest('realize', function (t) {\n    var pattern = '/foo/:bar/:baz';\n\n    t.equal(realizeUrl(pattern, {}), '/foo/:bar/:baz');\n    t.equal(realizeUrl(pattern, {bar: 'BAR'}), '/foo/BAR/:baz');\n    t.equal(realizeUrl(pattern, {bar: 'BAR', baz: 'BAZ'}), '/foo/BAR/BAZ');\n    t.equal(realizeUrl(pattern, {bar: 'BAR', baz: 'BAZ', quux: 'QUUX'}),\n        '/foo/BAR/BAZ');\n    t.equal(realizeUrl('/foo////bar///:baz', {baz: 'BAZ'}),\n        '/foo/bar/BAZ');\n\n    t.end();\n});\n\ntest('httpDate', function (t) {\n    var d = restify.httpDate();\n    var regex = /\\w{3}, \\d{1,2} \\w{3} \\d{4} \\d{2}:\\d{2}:\\d{2} GMT/;\n    t.ok(regex.test(d));\n    t.end();\n});","blocks":{"total":3,"seen":3,"missing":0,"percentage":1}},"hash":"8e773f8608bea8da011d95c018eb01e5"},"/Users/yunong/workspace/node-restify/test/plugins.test.js":{"stats":{"percentage":0.983669548511047,"lines":[{"lineno":64},{"lineno":65},{"lineno":89},{"lineno":90},{"lineno":558},{"lineno":559},{"lineno":560},{"lineno":585},{"lineno":586},{"lineno":612},{"lineno":613},{"lineno":639},{"lineno":640},{"lineno":666},{"lineno":667},{"lineno":719},{"lineno":720}],"missing":17,"seen":1024,"total":1041,"coverage":{"64":{"partial":false,"source":"        console.error(e.stack);","missing":[{"startCol":8,"endCol":30}]},"65":{"partial":false,"source":"        process.exit(1);","missing":[{"startCol":8,"endCol":23}]},"89":{"partial":false,"source":"        console.error(e.stack);","missing":[{"startCol":8,"endCol":30}]},"90":{"partial":false,"source":"        process.exit(1);","missing":[{"startCol":8,"endCol":23}]},"558":{"partial":false,"source":"            res.body = 'testing 304';","missing":[{"startCol":12,"endCol":37}]},"559":{"partial":false,"source":"            res.send();","missing":[{"startCol":12,"endCol":22}]},"560":{"partial":false,"source":"            next();","missing":[{"startCol":12,"endCol":18}]},"585":{"partial":false,"source":"            res.send();","missing":[{"startCol":12,"endCol":22}]},"586":{"partial":false,"source":"            next();","missing":[{"startCol":12,"endCol":18}]},"612":{"partial":false,"source":"            res.send('testing 304');","missing":[{"startCol":12,"endCol":35}]},"613":{"partial":false,"source":"            next();","missing":[{"startCol":12,"endCol":18}]},"639":{"partial":false,"source":"            res.send('testing 412');","missing":[{"startCol":12,"endCol":35}]},"640":{"partial":false,"source":"            next();","missing":[{"startCol":12,"endCol":18}]},"666":{"partial":false,"source":"            res.send();","missing":[{"startCol":12,"endCol":22}]},"667":{"partial":false,"source":"            next();","missing":[{"startCol":12,"endCol":18}]},"719":{"partial":false,"source":"            res.send();","missing":[{"startCol":12,"endCol":22}]},"720":{"partial":false,"source":"            next();","missing":[{"startCol":12,"endCol":18}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar fs = require('fs');\nvar http = require('http');\nvar net = require('net');\nvar path = require('path');\nvar stream = require('stream');\nvar util = require('util');\n\nvar bunyan = require('bunyan');\n\nvar restify = require('../lib');\n\n\nif (require.cache[__dirname + '/lib/helper.js'])\n    delete require.cache[__dirname + '/lib/helper.js'];\nvar helper = require('./lib/helper.js');\n\n\n///--- Globals\n\nvar after = helper.after;\nvar before = helper.before;\nvar test = helper.test;\n\nvar PORT = process.env.UNIT_TEST_PORT || 0;\nvar CLIENT;\nvar SERVER;\n\nvar FILES_TO_DELETE = [];\nvar DIRS_TO_DELETE = [];\n\n///--- Tests\n\nbefore(function (callback) {\n    try {\n        SERVER = restify.createServer({\n            dtrace: helper.dtrace,\n            log: helper.getLog('server')\n        });\n\n        SERVER.use(restify.acceptParser(SERVER.acceptable));\n        SERVER.use(restify.authorizationParser());\n        SERVER.use(restify.dateParser());\n        SERVER.use(restify.queryParser());\n\n        SERVER.get('/foo/:id', function respond(req, res, next) {\n            res.send();\n            next();\n        });\n\n        SERVER.listen(PORT, '127.0.0.1', function () {\n            PORT = SERVER.address().port;\n            CLIENT = restify.createJsonClient({\n                url: 'http://127.0.0.1:' + PORT,\n                dtrace: helper.dtrace,\n                retry: false,\n                agent: false\n            });\n\n            process.nextTick(callback);\n        });\n    } catch (e) {\n        console.error(e.stack);\n        process.exit(1);\n    }\n});\n\n\nafter(function (callback) {\n    var i;\n    try {\n        for (i = 0; i < FILES_TO_DELETE.length; ++i) {\n            try {\n                fs.unlinkSync(FILES_TO_DELETE[i]);\n            }\n            catch (err) { /* normal */\n            }\n        }\n        for (i = 0; i < DIRS_TO_DELETE.length; ++i) {\n            try {\n                fs.rmdirSync(DIRS_TO_DELETE[i]);\n            }\n            catch (err) { /* normal */\n            }\n        }\n        SERVER.close(callback);\n    } catch (e) {\n        console.error(e.stack);\n        process.exit(1);\n    }\n});\n\n\ntest('accept ok', function (t) {\n    CLIENT.get('/foo/bar', function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.end();\n    });\n});\n\n\ntest('406', function (t) {\n    var opts = {\n        path: '/foo/bar',\n        headers: {\n            accept: 'foo/bar'\n        }\n    };\n    CLIENT.get(opts, function (err, _, res) {\n        t.equal(res.statusCode, 406);\n        t.end();\n    });\n});\n\n\ntest('authorization basic ok', function (t) {\n    var authz = 'Basic ' + new Buffer('user:secret').toString('base64');\n    var opts = {\n        path: '/foo/bar',\n        headers: {\n            authorization: authz\n        }\n    };\n    CLIENT.get(opts, function (err, _, res) {\n        t.equal(res.statusCode, 200);\n        t.end();\n    });\n});\n\n\ntest('authorization basic invalid', function (t) {\n    var opts = {\n        path: '/foo/bar',\n        headers: {\n            authorization: 'Basic '\n        }\n    };\n    CLIENT.get(opts, function (err, _, res) {\n        t.equal(res.statusCode, 400);\n        t.end();\n    });\n});\n\n\ntest('query ok', function (t) {\n    SERVER.get('/query/:id', function (req, res, next) {\n        t.equal(req.params.id, 'foo');\n        t.equal(req.params.name, 'markc');\n        t.equal(req.params.name, 'markc');\n        res.send();\n        next();\n    });\n\n    CLIENT.get('/query/foo?id=bar&name=markc', function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.end();\n    });\n});\n\n\ntest('GH-124 query ok no query string', function (t) {\n    SERVER.get('/query/:id', function (req, res, next) {\n        t.ok(req.getQuery());\n        t.equal(typeof (req.getQuery()), 'object');\n        res.send();\n        next();\n    });\n\n    CLIENT.get('/query/foo', function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.end();\n    });\n});\n\n\ntest('query object', function (t) {\n    SERVER.get('/query/:id', function (req, res, next) {\n        t.equal(req.params.id, 'foo');\n        t.ok(req.params.name);\n        t.equal(req.params.name.first, 'mark');\n        t.equal(req.query.name.last, 'cavage');\n        res.send();\n        next();\n    });\n\n    var p = '/query/foo?name[first]=mark&name[last]=cavage';\n    CLIENT.get(p, function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.end();\n    });\n});\n\n\ntest('body url-encoded ok', function (t) {\n    SERVER.post('/bodyurl/:id',\n        restify.bodyParser(),\n        function (req, res, next) {\n            t.equal(req.params.id, 'foo');\n            t.equal(req.params.name, 'markc');\n            t.equal(req.params.phone, '(206) 555-1212');\n            res.send();\n            next();\n        });\n\n    var opts = {\n        hostname: '127.0.0.1',\n        port: PORT,\n        path: '/bodyurl/foo?name=markc',\n        agent: false,\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n        }\n    };\n    var client = http.request(opts, function (res) {\n        t.equal(res.statusCode, 200);\n        t.end();\n    });\n\n    client.write('phone=(206)%20555-1212&name=somethingelse');\n    client.end();\n});\n\n\ntest('body url-encoded ok (no params)', function (t) {\n    SERVER.post('/bodyurl2/:id',\n        restify.bodyParser({ mapParams: false }),\n        function (req, res, next) {\n            t.equal(req.params.id, 'foo');\n            t.equal(req.params.name, 'markc');\n            t.notOk(req.params.phone);\n            t.equal(req.body.phone, '(206) 555-1212');\n            res.send();\n            next();\n        });\n\n    var opts = {\n        hostname: '127.0.0.1',\n        port: PORT,\n        path: '/bodyurl2/foo?name=markc',\n        agent: false,\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n        }\n    };\n    var client = http.request(opts, function (res) {\n        t.equal(res.statusCode, 200);\n        t.end();\n    });\n    client.write('phone=(206)%20555-1212&name=somethingelse');\n    client.end();\n});\n\ntest('body multipart ok', function (t) {\n    SERVER.post('/multipart/:id',\n        restify.bodyParser(),\n        function (req, res, next) {\n            t.equal(req.params.id, 'foo');\n            t.equal(req.params.mood, 'happy');\n            t.equal(req.params.endorphins, '9000');\n            res.send();\n            next();\n        });\n\n    var opts = {\n        hostname: '127.0.0.1',\n        port: PORT,\n        path: '/multipart/foo?mood=happy',\n        agent: false,\n        method: 'POST',\n        headers: {\n            'Content-Type': 'multipart/form-data; boundary=huff'\n        }\n    };\n\n    var client = http.request(opts, function (res) {\n        t.equal(res.statusCode, 200);\n        t.end();\n    });\n\n    /* JSSTYLED */\n    client.write('--huff\\r\\nContent-Disposition: form-data; name=\"endorphins\"\\r\\n\\r\\n9000\\r\\n--huff--');\n    client.end();\n});\n\ntest('body multipart ok custom handling', function (t) {\n    var detailsString = 'High endorphin levels make you happy. ' +\n        'Mostly... I guess. Whatever.';\n    SERVER.post('/multipart/:id',\n        restify.bodyParser({\n            multipartHandler: function (part) {\n                var buffer = new Buffer(0);\n                part.on('data', function (data) {\n                    buffer = Buffer.concat([ data ]);\n                });\n\n                part.on('end', function () {\n                    t.equal(part.name, 'endorphins');\n                    t.equal(buffer.toString('ascii'), '12');\n                });\n            },\n            multipartFileHandler: function (part) {\n                var buffer = new Buffer(0);\n                part.on('data', function (data) {\n                    buffer = Buffer.concat([ data ]);\n                });\n\n                part.on('end', function () {\n                    t.equal(part.name, 'details');\n                    t.equal(part.filename, 'mood_details.txt');\n                    t.equal(buffer.toString('ascii'), detailsString);\n                });\n            },\n            mapParams: false\n        }),\n        function (req, res, next) {\n            res.send();\n            next();\n        });\n\n    var opts = {\n        hostname: '127.0.0.1',\n        port: PORT,\n        path: '/multipart/foo?mood=sad',\n        agent: false,\n        method: 'POST',\n        headers: {\n            'Content-Type': 'multipart/form-data; boundary=huff'\n        }\n    };\n\n    var client = http.request(opts, function (res) {\n        t.equal(res.statusCode, 200);\n        t.end();\n    });\n\n    client.write('--huff\\r\\n');\n    client.write('Content-Disposition: form-data; name=\"endorphins\"\\r\\n\\r\\n');\n    client.write('12\\r\\n');\n\n    client.write('--huff\\r\\n');\n    /* JSSTYLED */\n    client.write('Content-Disposition: form-data; name=\"details\"; filename=\"mood_details.txt\"\\r\\n');\n    client.write('Content-Type: text/plain\\r\\n\\r\\n');\n    client.write(detailsString + '\\r\\n');\n    client.write('--huff--');\n\n    client.end();\n});\n\ntest('body json ok', function (t) {\n    SERVER.post('/body/:id',\n        restify.bodyParser(),\n        function (req, res, next) {\n            t.equal(req.params.id, 'foo');\n            t.equal(req.params.name, 'markc');\n            t.equal(req.params.phone, '(206) 555-1212');\n            res.send();\n            next();\n        });\n\n    var obj = {\n        phone: '(206) 555-1212',\n        name: 'somethingelse'\n    };\n    CLIENT.post('/body/foo?name=markc', obj, function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.end();\n    });\n\n});\n\ntest('body json ok (no params)', function (t) {\n    SERVER.post('/body/:id',\n        restify.bodyParser({ mapParams: false }),\n        function (req, res, next) {\n            t.equal(req.params.id, 'foo');\n            t.equal(req.params.name, 'markc');\n            t.notOk(req.params.phone);\n            t.equal(req.body.phone, '(206) 555-1212');\n            res.send();\n            next();\n        });\n\n    var obj = {\n        phone: '(206) 555-1212',\n        name: 'somethingelse'\n    };\n    CLIENT.post('/body/foo?name=markc', obj, function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.end();\n    });\n});\n\ntest('body json ok (null params)', function (t) {\n    var STRING_CLIENT = restify.createStringClient({\n        url: 'http://127.0.0.1:' + PORT,\n        dtrace: helper.dtrace,\n        retry: false,\n        agent: false,\n        contentType: 'application/json',\n        accept: 'application/json'\n    });\n\n    SERVER.post('/body/:id',\n        restify.bodyParser(),\n        function (req, res, next) {\n            t.equal(req.params.id, 'foo');\n            t.equal(req.params.name, 'markc');\n            res.send();\n            next();\n        });\n\n    STRING_CLIENT.post('/body/foo?name=markc', 'null', function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.end();\n    });\n});\n\ntest('GH-318 get request with body (default)', function (t) {\n    SERVER.get('/getWithoutBody',\n        restify.bodyParser({ mapParams: true }),\n        function (req, res, next) {\n            t.notEqual(req.params.foo, 'bar');\n            res.send();\n            next();\n        });\n\n    var request = 'GET /getWithoutBody HTTP/1.1\\r\\n' +\n        'Content-Type: application/json\\r\\n' +\n        'Content-Length: 13\\r\\n' +\n        '\\r\\n' +\n        '{\"foo\":\"bar\"}';\n\n    var client = net.connect({host: '127.0.0.1', port: PORT}, function () {\n        client.write(request);\n    });\n    client.once('data', function (data) {\n        client.end();\n    });\n    client.once('end', function () {\n        t.end();\n    });\n});\n\ntest('GH-318 get request with body (requestBodyOnGet=true)', function (t) {\n    SERVER.get('/getWithBody',\n        restify.bodyParser({\n            mapParams: true,\n            requestBodyOnGet: true\n        }), function (req, res, next) {\n            t.equal(req.params.foo, 'bar');\n            res.send();\n            next();\n        });\n\n    var request = 'GET /getWithBody HTTP/1.1\\r\\n' +\n        'Content-Type: application/json\\r\\n' +\n        'Content-Length: 13\\r\\n' +\n        '\\r\\n' +\n        '{\"foo\":\"bar\"}';\n    var client = net.connect({host: '127.0.0.1', port: PORT}, function () {\n        client.write(request);\n    });\n\n    client.once('data', function (data) {\n        client.end();\n    });\n\n    client.once('end', function () {\n        t.end();\n    });\n});\n\ntest('GH-111 JSON Parser not right for arrays', function (t) {\n    SERVER.post('/gh111',\n        restify.bodyParser(),\n        function (req, res, next) {\n            t.ok(Array.isArray(req.params));\n            t.equal(req.params[0], 'foo');\n            t.equal(req.params[1], 'bar');\n            res.send();\n            next();\n        });\n\n    var obj = ['foo', 'bar'];\n    CLIENT.post('/gh111', obj, function (err, _, res) {\n        t.ifError(err);\n        t.end();\n        t.equal(res.statusCode, 200);\n    });\n});\n\n\ntest('GH-279 more JSON Arrays', function (t) {\n    function respond(req, res, next) {\n        t.ok(Array.isArray(req.params));\n        t.equal(req.params[0].id, '123654');\n        t.ok(req.params[0].name, 'mimi');\n        t.ok(req.params[1].id, '987654');\n        t.ok(req.params[1].name, 'pijama');\n        res.send(200);\n        next();\n    }\n\n    SERVER.post('/gh279', restify.jsonBodyParser(), respond);\n\n    var obj = [\n        {\n            'id': '123654',\n            'name': 'mimi'\n        },\n        {\n            id: '987654',\n            name: 'pijama'\n        }\n    ];\n    CLIENT.post('/gh279', obj, function (err, _, res) {\n        t.ifError(err);\n        t.end();\n        t.equal(res.statusCode, 200);\n    });\n});\n\ntest('date expired', function (t) {\n    var opts = {\n        path: '/foo/bar',\n        headers: {\n            date: 'Tue, 15 Nov 1994 08:12:31 GMT'\n        }\n    };\n    CLIENT.get(opts, function (err, _, res) {\n        t.ok(err);\n        t.ok(/Date header .+ is too old/.test(err.message));\n        t.equal(res.statusCode, 400);\n        t.end();\n    });\n});\n\n\ntest('Conditional Request with correct Etag and headers', function (t) {\n    SERVER.get('/etag/:id',\n        function (req, res, next) {\n            res.etag = 'testETag';\n            next();\n        },\n        restify.conditionalRequest(),\n        function (req, res, next) {\n            res.body = 'testing 304';\n            res.send();\n            next();\n        });\n\n    var opts = {\n        path: '/etag/foo',\n        headers: {\n            'If-Match': 'testETag',\n            'If-None-Match': 'testETag'\n        }\n    };\n    CLIENT.get(opts, function (err, _, res) {\n        t.equal(res.statusCode, 304);\n        t.end();\n    });\n});\n\n\ntest('Conditional Request with mismatched Etag and If-Match', function (t) {\n    SERVER.get('/etag/:id',\n        function setEtag(req, res, next) {\n            res.etag = 'testEtag';\n            next();\n        },\n        restify.conditionalRequest(),\n        function respond(req, res, next) {\n            res.send();\n            next();\n        });\n\n    var opts = {\n        path: '/etag/foo',\n        headers: {\n            'If-Match': 'testETag2'\n        }\n    };\n    CLIENT.get(opts, function (err, _, res) {\n        t.equal(res.statusCode, 412);\n        t.end();\n    });\n});\n\n\ntest('cdntl req If-Modified header & !modified content', function (t) {\n    var now = new Date();\n    var yesterday = new Date(now.setDate(now.getDate() - 1));\n    SERVER.get('/etag/:id',\n        function (req, res, next) {\n            res.header('Last-Modified', yesterday);\n            next();\n        },\n        restify.conditionalRequest(),\n        function (req, res, next) {\n            res.send('testing 304');\n            next();\n        });\n\n    var opts = {\n        path: '/etag/foo',\n        headers: {\n            'If-Modified-Since': new Date()\n        }\n    };\n    CLIENT.get(opts, function (err, _, res) {\n        t.equal(res.statusCode, 304);\n        t.end();\n    });\n});\n\n\ntest('cdtl req  If-Unmodified-Since header,modified content', function (t) {\n    var now = new Date();\n    var yesterday = new Date(now.setDate(now.getDate() - 1));\n    SERVER.get('/etag/:id',\n        function (req, res, next) {\n            res.header('Last-Modified', new Date());\n            next();\n        },\n        restify.conditionalRequest(),\n        function (req, res, next) {\n            res.send('testing 412');\n            next();\n        });\n\n    var opts = {\n        path: '/etag/foo',\n        headers: {\n            'If-Unmodified-Since': yesterday\n        }\n    };\n    CLIENT.get(opts, function (err, _, res) {\n        t.equal(res.statusCode, 412);\n        t.end();\n    });\n});\n\n\ntest('cdtl req valid headers, ahead time, unmodified OK', function (t) {\n    var now = new Date();\n    var ahead = new Date(now.getTime() + 1000);\n    SERVER.get('/etag/:id',\n        function (req, res, next) {\n            res.header('Last-Modified', now);\n            next();\n        },\n        restify.conditionalRequest(),\n        function (req, res, next) {\n            res.send();\n            next();\n        });\n\n    var opts = {\n        path: '/etag/foo',\n        headers: {\n            'If-Modified-Since': ahead\n        }\n    };\n\n    CLIENT.get(opts, function (err, _, res) {\n        t.equal(res.statusCode, 304);\n        t.end();\n    });\n});\n\n\ntest('cdtl req valid headers, ahead Timezone, modified content', function (t) {\n    var now = new Date();\n    var ahead = new Date(now.setHours(now.getHours() + 5));\n    SERVER.get('/etag/:id',\n        function (req, res, next) {\n            res.header('Last-Modified', now);\n            next();\n        },\n        restify.conditionalRequest(),\n        function (req, res, next) {\n            res.send();\n            next();\n        });\n\n    var opts = {\n        path: '/etag/foo',\n        headers: {\n            'If-Unmodified-Since': ahead\n        }\n    };\n    CLIENT.get(opts, function (err, _, res) {\n        t.equal(res.statusCode, 200);\n        t.end();\n    });\n});\n\n\ntest('Conditional PUT with matched Etag and headers', function (t) {\n    SERVER.put('/etag/:id',\n        function (req, res, next) {\n            res.etag = 'testETag';\n            next();\n        },\n        restify.conditionalRequest(),\n        function (req, res, next) {\n            res.send();\n            next();\n        });\n\n    var opts = {\n        path: '/etag/foo',\n        headers: {\n            'If-Match': 'testETag',\n            'If-None-Match': 'testETag'\n        }\n    };\n    CLIENT.put(opts, {}, function (err, _, res) {\n        t.equal(res.statusCode, 412);\n        t.end();\n    });\n});\n\n\ntest('gzip response', function (t) {\n    SERVER.get('/gzip/:id',\n        restify.gzipResponse(),\n        function (req, res, next) {\n            res.send({\n                hello: 'world'\n            });\n            next();\n        });\n\n    var opts = {\n        path: '/gzip/foo',\n        headers: {\n            'Accept-Encoding': 'gzip'\n        }\n    };\n    CLIENT.get(opts, function (err, _, res, obj) {\n        t.ifError(err);\n        t.deepEqual({hello: 'world'}, obj);\n        t.end();\n    });\n});\n\n\ntest('gzip large response', function (t) {\n    var testResponseSize = 65536 * 3;\n    var TestStream = function () {\n        this.readable = true;\n        this.sentSize = 0;\n        this.totalSize = testResponseSize;\n        this.interval = null;\n    };\n    require('util').inherits(TestStream, require('stream'));\n    TestStream.prototype.resume = function () {\n        var self = this;\n        if (!this.interval) {\n            this.interval = setInterval(function () {\n                var chunkSize = Math.min(self.totalSize -\n                    self.sentSize, 65536);\n                if (chunkSize > 0) {\n                    var chunk = new Array(chunkSize + 1);\n                    chunk = chunk.join('a');\n                    self.emit('data', chunk);\n                    self.sentSize += chunkSize;\n                } else {\n                    self.emit('data', '\"}');\n                    self.emit('end');\n                    self.pause();\n                }\n            }, 1);\n        }\n    };\n\n    TestStream.prototype.pause = function () {\n        clearInterval(this.interval);\n        this.interval = null;\n    };\n\n    var bodyStream = new TestStream();\n\n    SERVER.get('/gzip/:id',\n        restify.gzipResponse(),\n        function (req, res, next) {\n            bodyStream.resume();\n            res.write('{\"foo\":\"');\n            bodyStream.pipe(res);\n            next();\n        });\n\n    var opts = {\n        path: '/gzip/foo',\n        headers: {\n            'Accept-Encoding': 'gzip'\n        }\n    };\n    CLIENT.get(opts, function (err, _, res, obj) {\n        t.ifError(err);\n        var expectedResponse = {\n            foo: new Array(testResponseSize + 1).join('a')\n        };\n        t.deepEqual(expectedResponse, obj);\n        t.end();\n    });\n});\n\n\ntest('gzip body json ok', function (t) {\n    SERVER.post('/body/:id',\n        restify.bodyParser(),\n        function (req, res, next) {\n            t.equal(req.params.id, 'foo');\n            t.equal(req.params.name, 'markc');\n            t.equal(req.params.phone, '(206) 555-1212');\n            res.send();\n            next();\n        });\n\n    var obj = {\n        phone: '(206) 555-1212',\n        name: 'somethingelse'\n    };\n    CLIENT.gzip = {};\n    CLIENT.post('/body/foo?name=markc', obj, function (err, _, res) {\n        t.ifError(err);\n        t.ok(res);\n        if (res)\n            t.equal(res.statusCode, 200);\n        t.end();\n    });\n});\n\n\ntest('static serves static files', function (t) {\n    serveStaticTest(t, false, '.tmp');\n});\n\n\ntest('static serves static files in nested folders', function (t) {\n    serveStaticTest(t, false, '.tmp/folder');\n});\n\n\ntest('static serves static files in with a root regex', function (t) {\n    serveStaticTest(t, false, '.tmp', new RegExp('/.*'));\n});\n\n\ntest('static serves static files with a root, !greedy, regex', function (t) {\n    serveStaticTest(t, false, '.tmp', new RegExp('/?.*'));\n});\n\n\ntest('static serves default file', function (t) {\n    serveStaticTest(t, true, '.tmp');\n});\n\n\ntest('GH-379 static serves file with parentheses in path', function (t) {\n    serveStaticTest(t, false, '.(tmp)');\n});\n\n\ntest('audit logger timer test', function (t) {\n    // Dirty hack to capture the log record using a ring buffer.\n    var ringbuffer = new bunyan.RingBuffer({ limit: 1 });\n\n    SERVER.once('after', restify.auditLogger({\n        log: bunyan.createLogger({\n            name: 'audit',\n            streams:[ {\n                level: 'info',\n                type: 'raw',\n                stream: ringbuffer\n            }]\n        })\n    }));\n\n    SERVER.get('/audit', function aTestHandler(req, res, next) {\n        req.startHandlerTimer('audit-sub');\n\n        setTimeout(function () {\n            req.endHandlerTimer('audit-sub');\n            res.send('');\n            return (next());\n        }, 1000);\n    });\n\n    CLIENT.get('/audit', function (err, req, res) {\n        t.ifError(err);\n        // check timers\n        t.ok(ringbuffer.records[0], 'no log records');\n        t.equal(ringbuffer.records.length, 1, 'should only have 1 log record');\n        t.ok(ringbuffer.records[0].req.timers.aTestHandler > 1000000,\n             'atestHandler should be > 1000000');\n        t.ok(ringbuffer.records[0].req.timers['aTestHandler-audit-sub'] >\n             1000000, 'aTestHandler-audit-sub should be > 1000000');\n        var handlers = Object.keys(ringbuffer.records[0].req.timers);\n        t.equal(handlers[handlers.length - 2], 'aTestHandler-audit-sub',\n                'sub handler timer not in order');\n        t.equal(handlers[handlers.length - 1], 'aTestHandler',\n                'aTestHandler not last');\n        t.end();\n    });\n});\n\n\ntest('audit logger anonymous timer test', function (t) {\n    // Dirty hack to capture the log record using a ring buffer.\n    var ringbuffer = new bunyan.RingBuffer({ limit: 1 });\n\n    SERVER.once('after', restify.auditLogger({\n        log: bunyan.createLogger({\n            name: 'audit',\n            streams:[ {\n                level: 'info',\n                type: 'raw',\n                stream: ringbuffer\n            }]\n        })\n    }));\n\n    SERVER.get('/audit', function (req, res, next) {\n        setTimeout(function () {\n            return (next());\n        }, 1000);\n    }, function (req, res, next) {\n        req.startHandlerTimer('audit-sub');\n\n        setTimeout(function () {\n            req.endHandlerTimer('audit-sub');\n            res.send('');\n            return (next());\n        }, 1000);\n    });\n\n    CLIENT.get('/audit', function (err, req, res) {\n        t.ifError(err);\n        // check timers\n        t.ok(ringbuffer.records[0], 'no log records');\n        t.equal(ringbuffer.records.length, 1, 'should only have 1 log record');\n        t.ok(ringbuffer.records[0].req.timers['handler-0'] > 1000000,\n             'handler-0 should be > 1000000');\n        t.ok(ringbuffer.records[0].req.timers['handler-1'] > 1000000,\n             'handler-1 should be > 1000000');\n        t.ok(ringbuffer.records[0].req.timers['handler-1-audit-sub'] >\n             1000000, 'handler-0-audit-sub should be > 1000000');\n        var handlers = Object.keys(ringbuffer.records[0].req.timers);\n        t.equal(handlers[handlers.length - 2], 'handler-1-audit-sub',\n                'sub handler timer not in order');\n        t.equal(handlers[handlers.length - 1], 'handler-1',\n                'handler-1 not last');\n        t.end();\n    });\n});\n\ntest('GH-774 utf8 corruption in body parser', function (t) {\n    var slen = 100000;\n\n    SERVER.post('/utf8',\n        restify.bodyParser({ mapParams: false }),\n        function (req, res, next) {\n            t.notOk(/\\ufffd/.test(req.body.text));\n            t.equal(req.body.text.length, slen);\n            res.send({ len: req.body.text.length });\n            next();\n        });\n\n    // create a long string of unicode characters\n    var tx = '';\n    for (var i = 0; i < slen; ++i) tx += '\\u2661';\n\n    CLIENT.post('/utf8', { text: tx }, function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.end();\n    });\n});\n\n\n///--- Privates\nfunction serveStaticTest(t, testDefault, tmpDir, regex) {\n    var staticContent = '{\"content\": \"abcdefg\"}';\n    var staticObj = JSON.parse(staticContent);\n    var testDir = 'public';\n    var testFileName = 'index.json';\n    var routeName = 'GET wildcard';\n    var tmpPath = path.join(process.cwd(), tmpDir);\n    fs.mkdir(tmpPath, function (err) {\n        DIRS_TO_DELETE.push(tmpPath);\n        var folderPath = path.join(tmpPath, testDir);\n\n        fs.mkdir(folderPath, function (err2) {\n            t.ifError(err2);\n\n            DIRS_TO_DELETE.push(folderPath);\n            var file = path.join(folderPath, testFileName);\n\n            fs.writeFile(file, staticContent, function (err3) {\n                t.ifError(err3);\n                FILES_TO_DELETE.push(file);\n                var opts = { directory: tmpPath };\n                if (testDefault) {\n                    opts.defaultFile = testFileName;\n                    routeName += ' with default';\n                }\n                var re = regex ||\n                    new RegExp('/' + testDir + '/?.*');\n\n                SERVER.get({\n                    path: re,\n                    name: routeName\n                }, restify.serveStatic(opts));\n\n                var p = '/' + testDir + '/' + testFileName;\n                CLIENT.get(p, function (err4, req, res, obj) {\n                    t.ifError(err4);\n                    t.equal(res.headers['cache-control'],\n                        'public, max-age=3600');\n                    t.deepEqual(obj, staticObj);\n                    t.end();\n                });\n            });\n        });\n    });\n}","blocks":{"total":148,"seen":140,"missing":8,"percentage":0.9459459459459459}},"hash":"e9b8cb213a7a97df36cf8e11a2654402"},"/Users/yunong/workspace/node-restify/test/router.test.js":{"stats":{"percentage":0.9928571428571429,"lines":[{"lineno":15}],"missing":1,"seen":139,"total":140,"coverage":{"15":{"partial":false,"source":"    res.send(200);","missing":[{"startCol":4,"endCol":17}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar restify = require('../lib');\nif (require.cache[__dirname + '/lib/helper.js'])\n    delete require.cache[__dirname + '/lib/helper.js'];\nvar helper = require('./lib/helper.js');\n\n\n///--- Globals\n\nvar realizeUrl = restify.realizeUrl;\nvar test = helper.test;\nvar mockResponse = function respond(req, res, next) {\n    res.send(200);\n};\n\n\n///--- Tests\n\ntest('render route', function (t) {\n\n    var server = restify.createServer();\n    server.get({name: 'countries', path: '/countries'}, mockResponse);\n    server.get({name: 'country', path: '/countries/:name'}, mockResponse);\n    server.get({name: 'cities', path: '/countries/:name/states/:state/cities'},\n               mockResponse);\n\n    var countries = server.router.render('countries', {});\n    t.equal(countries, '/countries');\n\n    var country = server.router.render('country', {name: 'Australia'});\n    t.equal(country, '/countries/Australia');\n\n    var cities = server.router.render('cities', {\n        name: 'Australia',\n        state: 'New South Wales'\n    });\n    t.equal(cities, '/countries/Australia/states/New%20South%20Wales/cities');\n\n    t.end();\n});\n\n\ntest('render route (missing params)', function (t) {\n\n    var server = restify.createServer();\n    server.get({name: 'cities', path: '/countries/:name/states/:state/cities'},\n               mockResponse);\n\n    try {\n        server.router.render('cities', {name: 'Australia'});\n    } catch (ex) {\n        t.equal(ex, 'Error: Route <cities> is missing parameter <state>');\n    }\n\n    t.end();\n});\n\n\ntest('GH #704: render route (special charaters)', function (t) {\n\n    var server = restify.createServer();\n    server.get({name: 'my-route', path: '/countries/:name'}, mockResponse);\n\n    var link = server.router.render('my-route', {name: 'Australia'});\n    t.equal(link, '/countries/Australia');\n\n    t.end();\n});\n\n\ntest('GH #704: render route (with sub-regex param)', function (t) {\n\n    var server = restify.createServer();\n    server.get({\n        name: 'my-route',\n        path: '/countries/:code([A-Z]{2,3})'\n    }, mockResponse);\n\n    var link = server.router.render('my-route', {code: 'FR'});\n    t.equal(link, '/countries/FR');\n\n    link = server.router.render('my-route', {code: '111'});\n    t.equal(link, '/countries/111');\n    t.end();\n});\n\ntest('GH-796: render route (with multiple sub-regex param)', function (t) {\n\n    var server = restify.createServer();\n    server.get({\n        name: 'my-route',\n        path: '/countries/:code([A-Z]{2,3})/:area([0-9]+)'\n    }, mockResponse);\n\n    var link = server.router.render('my-route', {code: '111', area: 42});\n    t.equal(link, '/countries/111/42');\n    t.end();\n});\n\ntest('render route (with encode)', function (t) {\n\n    var server = restify.createServer();\n    server.get({name: 'my-route', path: '/countries/:name'}, mockResponse);\n\n    var link = server.router.render('my-route', {name: 'Trinidad & Tobago'});\n    t.equal(link, '/countries/Trinidad%20%26%20Tobago');\n\n    t.end();\n});\n\n\ntest('render route (query string)', function (t) {\n\n    var server = restify.createServer();\n    server.get({name: 'country', path: '/countries/:name'}, mockResponse);\n\n    var country1 = server.router.render('country', {\n        name: 'Australia'\n    }, {\n        state: 'New South Wales',\n        'cities/towns': 5\n    });\n\n    /* JSSTYLED */\n    t.equal(country1, '/countries/Australia?state=New%20South%20Wales&cities%2Ftowns=5');\n\n    var country2 = server.router.render('country', {\n        name: 'Australia'\n    }, {\n        state: 'NSW & VIC',\n        'cities&towns': 5\n    });\n\n    /* JSSTYLED */\n    t.equal(country2, '/countries/Australia?state=NSW%20%26%20VIC&cities%26towns=5');\n\n    t.end();\n});","blocks":{"total":11,"seen":10,"missing":1,"percentage":0.9090909090909091}},"hash":"85c767036c62d9f6339c937741a8d484"},"/Users/yunong/workspace/node-restify/test/server.test.js":{"stats":{"percentage":0.9697297297297297,"lines":[{"lineno":50},{"lineno":51},{"lineno":65},{"lineno":66},{"lineno":130},{"lineno":163},{"lineno":201},{"lineno":215},{"lineno":216},{"lineno":217},{"lineno":218},{"lineno":292},{"lineno":320},{"lineno":330},{"lineno":331},{"lineno":332},{"lineno":333},{"lineno":475},{"lineno":476},{"lineno":561},{"lineno":617},{"lineno":618},{"lineno":680},{"lineno":681},{"lineno":731},{"lineno":732},{"lineno":746},{"lineno":747},{"lineno":780},{"lineno":781},{"lineno":810},{"lineno":811},{"lineno":1000},{"lineno":1001},{"lineno":1022},{"lineno":1023},{"lineno":1050},{"lineno":1051},{"lineno":1080},{"lineno":1081},{"lineno":1082},{"lineno":1142},{"lineno":1143},{"lineno":1162},{"lineno":1163},{"lineno":1245},{"lineno":1246},{"lineno":1247},{"lineno":1365},{"lineno":1441},{"lineno":1442},{"lineno":1511},{"lineno":1512},{"lineno":1604},{"lineno":1605},{"lineno":1772}],"missing":56,"seen":1794,"total":1850,"coverage":{"50":{"partial":false,"source":"        console.error(e.stack);","missing":[{"startCol":8,"endCol":30}]},"51":{"partial":false,"source":"        process.exit(1);","missing":[{"startCol":8,"endCol":23}]},"65":{"partial":false,"source":"        console.error(e.stack);","missing":[{"startCol":8,"endCol":30}]},"66":{"partial":false,"source":"        process.exit(1);","missing":[{"startCol":8,"endCol":23}]},"130":{"partial":false,"source":"            t.end();","missing":[{"startCol":12,"endCol":19}]},"163":{"partial":false,"source":"        next();","missing":[{"startCol":8,"endCol":14}]},"201":{"partial":false,"source":"                next();","missing":[{"startCol":16,"endCol":22}]},"215":{"partial":false,"source":"        t.ok(req.params);","missing":[{"startCol":8,"endCol":24}]},"216":{"partial":false,"source":"        t.equal(req.params.id, 'bar');","missing":[{"startCol":8,"endCol":37}]},"217":{"partial":false,"source":"        res.send();","missing":[{"startCol":8,"endCol":18}]},"218":{"partial":false,"source":"        next();","missing":[{"startCol":8,"endCol":14}]},"292":{"partial":false,"source":"            t.fail('Data was sent on HEAD');","missing":[{"startCol":12,"endCol":43}]},"320":{"partial":false,"source":"            t.fail('Data was sent on 204');","missing":[{"startCol":12,"endCol":42}]},"330":{"partial":false,"source":"            t.ok(req.params);","missing":[{"startCol":12,"endCol":28}]},"331":{"partial":false,"source":"            t.equal(req.params.id, 'bar');","missing":[{"startCol":12,"endCol":41}]},"332":{"partial":false,"source":"            res.send();","missing":[{"startCol":12,"endCol":22}]},"333":{"partial":false,"source":"            next();","missing":[{"startCol":12,"endCol":18}]},"475":{"partial":false,"source":"        res.send();","missing":[{"startCol":8,"endCol":18}]},"476":{"partial":false,"source":"        next();","missing":[{"startCol":8,"endCol":14}]},"561":{"partial":false,"source":"            body += chunk;","missing":[{"startCol":12,"endCol":26}]},"617":{"partial":false,"source":"        res.send(req.params.name);","missing":[{"startCol":8,"endCol":33}]},"618":{"partial":false,"source":"        next();","missing":[{"startCol":8,"endCol":14}]},"680":{"partial":false,"source":"        res.send(200);","missing":[{"startCol":8,"endCol":21}]},"681":{"partial":false,"source":"        next();","missing":[{"startCol":8,"endCol":14}]},"731":{"partial":false,"source":"        res.send(204);","missing":[{"startCol":8,"endCol":21}]},"732":{"partial":false,"source":"        next();","missing":[{"startCol":8,"endCol":14}]},"746":{"partial":false,"source":"        res.send();","missing":[{"startCol":8,"endCol":18}]},"747":{"partial":false,"source":"        next();","missing":[{"startCol":8,"endCol":14}]},"780":{"partial":false,"source":"        res.send(200, {length: req.body.length});","missing":[{"startCol":8,"endCol":48}]},"781":{"partial":false,"source":"        next();","missing":[{"startCol":8,"endCol":14}]},"810":{"partial":false,"source":"        res.send(200, {length: req.body.length});","missing":[{"startCol":8,"endCol":48}]},"811":{"partial":false,"source":"        next();","missing":[{"startCol":8,"endCol":14}]},"1000":{"partial":false,"source":"        res.send(201);","missing":[{"startCol":8,"endCol":21}]},"1001":{"partial":false,"source":"        next();","missing":[{"startCol":8,"endCol":14}]},"1022":{"partial":false,"source":"        res.send(200);","missing":[{"startCol":8,"endCol":21}]},"1023":{"partial":false,"source":"        next();","missing":[{"startCol":8,"endCol":14}]},"1050":{"partial":false,"source":"        res.send(200);","missing":[{"startCol":8,"endCol":21}]},"1051":{"partial":false,"source":"        next();","missing":[{"startCol":8,"endCol":14}]},"1080":{"partial":false,"source":"            t.notOk(true);","missing":[{"startCol":12,"endCol":25}]},"1081":{"partial":false,"source":"            res.send(200);","missing":[{"startCol":12,"endCol":25}]},"1082":{"partial":false,"source":"            next();","missing":[{"startCol":12,"endCol":18}]},"1142":{"partial":false,"source":"        res.json(200, {route: 'id'});","missing":[{"startCol":8,"endCol":36}]},"1143":{"partial":false,"source":"        next();","missing":[{"startCol":8,"endCol":14}]},"1162":{"partial":false,"source":"        res.send(200);","missing":[{"startCol":8,"endCol":21}]},"1163":{"partial":false,"source":"        next();","missing":[{"startCol":8,"endCol":14}]},"1245":{"partial":false,"source":"        t.equal(req.params.id, 'A__M');","missing":[{"startCol":8,"endCol":38}]},"1246":{"partial":false,"source":"        res.send();","missing":[{"startCol":8,"endCol":18}]},"1247":{"partial":false,"source":"        next();","missing":[{"startCol":8,"endCol":14}]},"1365":{"partial":false,"source":"        res.send(201);","missing":[{"startCol":8,"endCol":21}]},"1441":{"partial":false,"source":"        res.send(200);","missing":[{"startCol":8,"endCol":21}]},"1442":{"partial":false,"source":"        next();","missing":[{"startCol":8,"endCol":14}]},"1511":{"partial":false,"source":"        res.send(200);","missing":[{"startCol":8,"endCol":21}]},"1512":{"partial":false,"source":"        next();","missing":[{"startCol":8,"endCol":14}]},"1604":{"partial":false,"source":"        res.send(500);","missing":[{"startCol":8,"endCol":21}]},"1605":{"partial":false,"source":"        next();","missing":[{"startCol":8,"endCol":14}]},"1772":{"partial":false,"source":"        t.notOk(true);","missing":[{"startCol":8,"endCol":21}]}},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar fs = require('fs');\nvar http = require('http');\n\nvar filed = require('filed');\nvar uuid = require('node-uuid');\n\nvar HttpError = require('../lib/errors').HttpError;\nvar RestError = require('../lib/errors').RestError;\nvar restify = require('../lib');\n\nif (require.cache[__dirname + '/lib/helper.js'])\n    delete require.cache[__dirname + '/lib/helper.js'];\nvar helper = require('./lib/helper.js');\n\n\n///--- Globals\n\nvar after = helper.after;\nvar before = helper.before;\nvar test = helper.test;\n\nvar PORT = process.env.UNIT_TEST_PORT || 0;\nvar CLIENT;\nvar SERVER;\n\n\n///--- Tests\n\nbefore(function (cb) {\n    try {\n        SERVER = restify.createServer({\n            dtrace: helper.dtrace,\n            log: helper.getLog('server'),\n            version: ['2.0.0', '0.5.4', '1.4.3']\n        });\n        SERVER.listen(PORT, '127.0.0.1', function () {\n            PORT = SERVER.address().port;\n            CLIENT = restify.createJsonClient({\n                url: 'http://127.0.0.1:' + PORT,\n                dtrace: helper.dtrace,\n                retry: false\n            });\n\n            cb();\n        });\n    } catch (e) {\n        console.error(e.stack);\n        process.exit(1);\n    }\n});\n\n\nafter(function (cb) {\n    try {\n        CLIENT.close();\n        SERVER.close(function () {\n            CLIENT = null;\n            SERVER = null;\n            cb();\n        });\n    } catch (e) {\n        console.error(e.stack);\n        process.exit(1);\n    }\n});\n\n\ntest('listen and close (port only)', function (t) {\n    var server = restify.createServer();\n    server.listen(0, function () {\n        server.close(function () {\n            t.end();\n        });\n    });\n});\n\n\ntest('listen and close (port only) w/ port number as string', function (t) {\n    var server = restify.createServer();\n    server.listen(String(0), function () {\n        server.close(function () {\n            t.end();\n        });\n    });\n});\n\n\ntest('listen and close (socketPath)', function (t) {\n    var server = restify.createServer();\n    server.listen('/tmp/.' + uuid(), function () {\n        server.close(function () {\n            t.end();\n        });\n    });\n});\n\n\ntest('gh-751 IPv4/IPv6 server URL', function (t) {\n    t.equal(SERVER.url, 'http://127.0.0.1:' + PORT, 'ipv4 url');\n\n    var server = restify.createServer();\n    server.listen(PORT + 1, '::1', function () {\n        t.equal(server.url, 'http://[::1]:' + (PORT + 1), 'ipv6 url');\n\n        server.close(function () {\n            t.end();\n        });\n    });\n});\n\n\ntest('get (path only)', function (t) {\n    var r = SERVER.get('/foo/:id', function echoId(req, res, next) {\n        t.ok(req.params);\n        t.equal(req.params.id, 'bar');\n        t.equal(req.isUpload(), false);\n        res.send();\n        next();\n    });\n\n    var count = 0;\n    SERVER.once('after', function (req, res, route) {\n        t.ok(req);\n        t.ok(res);\n        t.equal(r, route.name);\n        if (++count === 2)\n            t.end();\n    });\n\n    CLIENT.get('/foo/bar', function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        if (++count === 2)\n            t.end();\n    });\n});\n\n\ntest('use + get (path only)', function (t) {\n    SERVER.use(function (req, res, next) {\n        next();\n    });\n    SERVER.get('/foo/:id', function tester(req, res, next) {\n        t.ok(req.params);\n        t.equal(req.params.id, 'bar');\n        res.send();\n        next();\n    });\n\n    CLIENT.get('/foo/bar', function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.end();\n    });\n});\n\n\ntest('rm', function (t) {\n    var route = SERVER.get('/foo/:id', function foosy(req, res, next) {\n        next();\n    });\n\n    SERVER.get('/bar/:id', function barsy(req, res, next) {\n        t.ok(req.params);\n        t.equal(req.params.id, 'foo');\n        res.send();\n        next();\n    });\n\n    t.ok(SERVER.rm(route));\n\n    CLIENT.get('/foo/bar', function (err, _, res) {\n        t.ok(err);\n        t.equal(res.statusCode, 404);\n        CLIENT.get('/bar/foo', function (err2, __, res2) {\n            t.ifError(err2);\n            t.equal(res2.statusCode, 200);\n            t.end();\n        });\n    });\n});\n\n\ntest('use - throws TypeError on non function as argument', function (t) {\n    var err = assert.AssertionError('handler (function) is required');\n\n    t.throws(function () {\n        SERVER.use('/nonfn');\n    }, err);\n\n    t.throws(function () {\n        SERVER.use({an: 'object'});\n    }, err);\n\n    t.throws(function () {\n        SERVER.use(\n            function good(req, res, next) {\n                next();\n            },\n            '/bad',\n            {\n                really: 'bad'\n            });\n    }, err);\n\n    t.end();\n});\n\n\ntest('405', function (t) {\n    SERVER.post('/foo/:id', function posty(req, res, next) {\n        t.ok(req.params);\n        t.equal(req.params.id, 'bar');\n        res.send();\n        next();\n    });\n\n    CLIENT.get('/foo/bar', function (err, _, res) {\n        t.ok(err);\n        t.equal(res.statusCode, 405);\n        t.equal(res.headers.allow, 'POST');\n        t.end();\n    });\n});\n\n\ntest('PUT ok', function (t) {\n    SERVER.put('/foo/:id', function tester(req, res, next) {\n        t.ok(req.params);\n        t.equal(req.params.id, 'bar');\n        t.equal(req.isUpload(), true);\n        res.send();\n        next();\n    });\n\n    CLIENT.put('/foo/bar', {}, function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.end();\n    });\n});\n\n\ntest('PATCH ok', function (t) {\n    SERVER.patch('/foo/:id', function tester(req, res, next) {\n        t.ok(req.params);\n        t.equal(req.params.id, 'bar');\n        t.equal(req.isUpload(), true);\n        res.send();\n        next();\n    });\n\n    var opts = {\n        hostname: 'localhost',\n        port: PORT,\n        path: '/foo/bar',\n        method: 'PATCH',\n        agent: false\n    };\n    http.request(opts, function (res) {\n        t.equal(res.statusCode, 200);\n        res.on('end', function () {\n            t.end();\n        });\n        res.resume();\n    }).end();\n});\n\n\ntest('HEAD ok', function (t) {\n    SERVER.head('/foo/:id', function tester(req, res, next) {\n        t.ok(req.params);\n        t.equal(req.params.id, 'bar');\n        t.equal(req.isUpload(), false);\n        res.send('hi there');\n        next();\n    });\n\n    var opts = {\n        hostname: 'localhost',\n        port: PORT,\n        path: '/foo/bar',\n        method: 'HEAD',\n        agent: false\n    };\n    http.request(opts, function (res) {\n        t.equal(res.statusCode, 200);\n        res.on('data', function (chunk) {\n            t.fail('Data was sent on HEAD');\n        });\n        res.on('end', function () {\n            t.end();\n        });\n    }).end();\n});\n\n\ntest('DELETE ok', function (t) {\n    SERVER.del('/foo/:id', function tester(req, res, next) {\n        t.ok(req.params);\n        t.equal(req.params.id, 'bar');\n        t.equal(req.isUpload(), false);\n        res.send(204, 'hi there');\n        next();\n    });\n\n    var opts = {\n        hostname: 'localhost',\n        port: PORT,\n        path: '/foo/bar',\n        method: 'DELETE',\n        agent: false\n    };\n    http.request(opts, function (res) {\n        t.equal(res.statusCode, 204);\n        res.on('data', function (chunk) {\n            t.fail('Data was sent on 204');\n        });\n        t.end();\n    }).end();\n});\n\n\ntest('OPTIONS', function (t) {\n    ['get', 'post', 'put', 'del'].forEach(function (method) {\n        SERVER[method]('/foo/:id', function tester(req, res, next) {\n            t.ok(req.params);\n            t.equal(req.params.id, 'bar');\n            res.send();\n            next();\n        });\n    });\n\n    var opts = {\n        hostname: 'localhost',\n        port: PORT,\n        path: '*',\n        method: 'OPTIONS',\n        agent: false\n    };\n    http.request(opts, function (res) {\n        t.equal(res.statusCode, 200);\n        t.end();\n    }).end();\n});\n\ntest('CORS Preflight - valid origin', function (t) {\n    SERVER.use(restify.CORS({\n        credentials: true,\n        origins: [ 'http://somesite.local' ]\n    }));\n    SERVER.post('/foo/:id', function tester(req, res, next) {});\n\n    var opts = {\n        hostname: 'localhost',\n        port: PORT,\n        path: '/foo/bar',\n        method: 'OPTIONS',\n        agent: false,\n        headers: {\n            'Access-Control-Request-Headers': 'accept, content-type',\n            'Access-Control-Request-Method': 'POST',\n            'Origin': 'http://somesite.local'\n        }\n    };\n    http.request(opts, function (res) {\n        t.equal(res.headers['access-control-allow-origin'],\n                'http://somesite.local');\n        t.equal(res.headers['access-control-allow-credentials'], 'true');\n        t.equal(res.statusCode, 200);\n        t.end();\n    }).end();\n});\n\ntest('CORS Preflight - invalid origin', function (t) {\n    SERVER.use(restify.CORS({\n        credentials: true,\n        origins: [ 'http://somesite.local' ]\n    }));\n    SERVER.post('/foo/:id', function tester(req, res, next) {});\n\n    var opts = {\n        hostname: 'localhost',\n        port: PORT,\n        path: '/foo/bar',\n        method: 'OPTIONS',\n        agent: false,\n        headers: {\n            'Access-Control-Request-Headers': 'accept, content-type',\n            'Access-Control-Request-Method': 'POST',\n            'Origin': 'http://othersite.local'\n        }\n    };\n    http.request(opts, function (res) {\n        t.equal(res.headers['access-control-allow-origin'], '*');\n        t.equal(res.headers['access-control-allow-credentials'], undefined);\n        t.equal(res.statusCode, 200);\n        t.end();\n    }).end();\n});\n\ntest('CORS Preflight - any origin', function (t) {\n    SERVER.use(restify.CORS({\n        credentials: true,\n        origins: [ 'http://somesite.local', '*' ]\n    }));\n    SERVER.post('/foo/:id', function tester(req, res, next) {});\n\n    var opts = {\n        hostname: 'localhost',\n        port: PORT,\n        path: '/foo/bar',\n        method: 'OPTIONS',\n        agent: false,\n        headers: {\n            'Access-Control-Request-Headers': 'accept, content-type',\n            'Access-Control-Request-Method': 'POST',\n            'Origin': 'http://anysite.local'\n        }\n    };\n    http.request(opts, function (res) {\n        t.equal(res.headers['access-control-allow-origin'],\n            'http://anysite.local');\n        t.equal(res.headers['access-control-allow-credentials'], 'true');\n        t.equal(res.statusCode, 200);\n        t.end();\n    }).end();\n});\n\ntest('RegExp ok', function (t) {\n    SERVER.get(/\\/foo/, function tester(req, res, next) {\n        res.send('hi there');\n        next();\n    });\n\n    CLIENT.get('/foo', function (err, _, res, obj) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.equal(obj, 'hi there');\n        t.end();\n    });\n});\n\n\ntest('get (path and version ok)', function (t) {\n    SERVER.get({\n        url: '/foo/:id',\n        version: '1.2.3'\n    }, function tester(req, res, next) {\n        t.ok(req.params);\n        t.equal(req.params.id, 'bar');\n        res.send();\n        next();\n    });\n\n    var opts = {\n        path: '/foo/bar',\n        headers: {\n            'accept-version': '~1.2'\n        }\n    };\n    CLIENT.get(opts, function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.end();\n    });\n});\n\n\ntest('get (path and version not ok)', function (t) {\n    function respond(req, res, next) {\n        res.send();\n        next();\n    }\n\n    SERVER.get({ url: '/foo/:id', version: '1.2.3' }, respond);\n    SERVER.get({ url: '/foo/:id', version: '3.2.1' }, respond);\n\n    var opts = {\n        path: '/foo/bar',\n        headers: {\n            'accept-version': '~2.1'\n        }\n    };\n    CLIENT.get(opts, function (err, _, res) {\n        t.ok(err);\n        t.equal(err.message, '~2.1 is not supported by GET /foo/bar');\n        t.equal(res.statusCode, 400);\n        t.end();\n    });\n});\n\n\ntest('GH-56 streaming with filed (download)', function (t) {\n    SERVER.get('/', function tester(req, res, next) {\n        filed(__filename).pipe(res);\n    });\n\n    var opts = {\n        hostname: 'localhost',\n        port: PORT,\n        path: '/',\n        method: 'GET',\n        agent: false\n    };\n    http.request(opts, function (res) {\n        t.equal(res.statusCode, 200);\n        var body = '';\n        res.setEncoding('utf8');\n        res.on('data', function (chunk) {\n            body += chunk;\n        });\n        res.on('end', function () {\n            t.ok(body.length > 0);\n            t.end();\n        });\n    }).end();\n});\n\n\ntest('GH-59 Query params with / result in a 404', function (t) {\n    SERVER.get('/', function tester(req, res, next) {\n        res.send('hello world');\n        next();\n    });\n\n    CLIENT.get('/?foo=bar/foo', function (err, _, res, obj) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.equal(obj, 'hello world');\n        t.end();\n    });\n});\n\n\ntest('GH-63 res.send 204 is sending a body', function (t) {\n    SERVER.del('/hello/:name', function tester(req, res, next) {\n        res.send(204);\n        next();\n    });\n\n    var opts = {\n        hostname: 'localhost',\n        port: PORT,\n        path: '/hello/mark',\n        method: 'DELETE',\n        agent: false,\n        headers: {\n            accept: 'text/plain'\n        }\n    };\n\n    http.request(opts, function (res) {\n        t.equal(res.statusCode, 204);\n        var body = '';\n        res.setEncoding('utf8');\n        res.on('data', function (chunk) {\n            body += chunk;\n        });\n        res.on('end', function () {\n            t.notOk(body);\n            t.end();\n        });\n    }).end();\n});\n\n\ntest('GH-64 prerouting chain', function (t) {\n    SERVER.pre(function (req, res, next) {\n        req.log.debug('testing log is set');\n        req.headers.accept = 'application/json';\n        next();\n    });\n\n    SERVER.get('/hello/:name', function tester(req, res, next) {\n        res.send(req.params.name);\n        next();\n    });\n\n    var opts = {\n        hostname: 'localhost',\n        port: PORT,\n        path: '/hello/mark',\n        method: 'GET',\n        agent: false,\n        headers: {\n            accept: 'text/plain'\n        }\n    };\n    http.request(opts, function (res) {\n        t.equal(res.statusCode, 200);\n        var body = '';\n        res.setEncoding('utf8');\n        res.on('data', function (chunk) {\n            body += chunk;\n        });\n        res.on('end', function () {\n            t.equal(body, '\\\"mark\\\"');\n            t.end();\n        });\n    }).end();\n});\n\n\ntest('GH-64 prerouting chain with error', function (t) {\n    SERVER.pre(function (req, res, next) {\n        next(new RestError({\n            statusCode: 400,\n            restCode: 'BadRequest'\n        }, 'screw you client'));\n    });\n\n    SERVER.get('/hello/:name', function tester(req, res, next) {\n        res.send(req.params.name);\n        next();\n    });\n\n    CLIENT.get('/hello/mark', function (err, _, res) {\n        t.ok(err);\n        t.equal(res.statusCode, 400);\n        t.end();\n    });\n});\n\n\ntest('GH-67 extend access-control headers', function (t) {\n    SERVER.get('/hello/:name', function tester(req, res, next) {\n        res.header('Access-Control-Allow-Headers',\n            (res.header('Access-Control-Allow-Headers') +\n                ', If-Match, If-None-Match'));\n\n        res.send(req.params.name);\n        next();\n    });\n\n    CLIENT.get('/hello/mark', function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.ok(res.headers['access-control-allow-headers']\n            .indexOf('If-Match'));\n        t.end();\n    });\n});\n\n\ntest('GH-77 uncaughtException (default behavior)', function (t) {\n    SERVER.get('/', function (req, res, next) {\n        throw new Error('Catch me!');\n    });\n\n    CLIENT.get('/', function (err, _, res) {\n        t.ok(err);\n        t.equal(res.statusCode, 500);\n        t.end();\n    });\n});\n\n\ntest('GH-77 uncaughtException (with custom handler)', function (t) {\n    SERVER.on('uncaughtException', function (req, res, route, err) {\n        res.send(204);\n    });\n    SERVER.get('/', function (req, res, next) {\n        throw new Error('Catch me!');\n    });\n\n    CLIENT.get('/', function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 204);\n        t.end();\n    });\n});\n\n\ntest('GH-97 malformed URI breaks server', function (t) {\n    SERVER.get('/echo/:name', function (req, res, next) {\n        res.send(200);\n        next();\n    });\n\n    CLIENT.get('/echo/mark%', function (err, _, res) {\n        t.ok(err);\n        t.equal(res.statusCode, 400);\n        t.end();\n    });\n});\n\n\ntest('GH-109 RegExp flags not honored', function (t) {\n    SERVER.get(/\\/echo\\/(\\w+)/i, function (req, res, next) {\n        res.send(200, req.params[0]);\n        next();\n    });\n\n    CLIENT.get('/ECHO/mark', function (err, _, res, obj) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.equal(obj, 'mark');\n        t.end();\n    });\n});\n\n\ntest('upload routing based on content-type ok', function (t) {\n    var opts = {\n        path: '/',\n        contentType: '*/json'\n    };\n    SERVER.put(opts, function (req, res, next) {\n        res.send(204);\n        next();\n    });\n\n    CLIENT.put('/', {foo: 'foo'}, function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 204);\n        t.end();\n    });\n});\n\n\ntest('upload routing based on content-type fail', function (t) {\n    var opts = {\n        path: '/',\n        contentType: 'text/*'\n    };\n    SERVER.put(opts, function (req, res, next) {\n        res.send(204);\n        next();\n    });\n\n    CLIENT.put('/', {foo: 'foo'}, function (err, _, res) {\n        t.ok(err);\n        t.equal(res.statusCode, 415);\n        t.end();\n    });\n});\n\n\ntest('full response', function (t) {\n    SERVER.use(restify.fullResponse());\n    SERVER.del('/bar/:id', function tester(req, res, next) {\n        res.send();\n        next();\n    });\n    SERVER.get('/bar/:id', function tester2(req, res, next) {\n        t.ok(req.params);\n        t.equal(req.params.id, 'bar');\n        res.send();\n        next();\n    });\n\n    CLIENT.get('/bar/bar', function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        var headers = res.headers;\n        t.ok(headers, 'headers ok');\n        t.ok(headers['access-control-allow-origin']);\n        t.ok(headers['access-control-allow-headers']);\n        t.ok(headers['access-control-expose-headers']);\n        t.ok(headers['access-control-allow-methods']);\n        t.ok(headers.date);\n        t.ok(headers['request-id']);\n        t.ok(headers['response-time'] >= 0);\n        t.equal(headers.server, 'restify');\n        t.equal(headers.connection, 'Keep-Alive');\n        t.equal(headers['api-version'], '2.0.0');\n        t.end();\n    });\n});\n\n\ntest('GH-149 limit request body size', function (t) {\n    SERVER.use(restify.bodyParser({maxBodySize: 1024}));\n\n    SERVER.post('/', function (req, res, next) {\n        res.send(200, {length: req.body.length});\n        next();\n    });\n\n    var opts = {\n        hostname: '127.0.0.1',\n        port: PORT,\n        path: '/',\n        method: 'POST',\n        agent: false,\n        headers: {\n            'accept': 'application/json',\n            'content-type': 'application/x-www-form-urlencoded',\n            'transfer-encoding': 'chunked'\n        }\n    };\n    var client = http.request(opts, function (res) {\n        t.equal(res.statusCode, 413);\n        res.once('end', t.end.bind(t));\n        res.resume();\n    });\n    client.write(new Array(1028).join('x'));\n    client.end();\n});\n\n\ntest('GH-149 limit request body size (json)', function (t) {\n    SERVER.use(restify.bodyParser({maxBodySize: 1024}));\n\n    SERVER.post('/', function (req, res, next) {\n        res.send(200, {length: req.body.length});\n        next();\n    });\n\n    var opts = {\n        hostname: '127.0.0.1',\n        port: PORT,\n        path: '/',\n        method: 'POST',\n        agent: false,\n        headers: {\n            'accept': 'application/json',\n            'content-type': 'application/json',\n            'transfer-encoding': 'chunked'\n        }\n    };\n    var client = http.request(opts, function (res) {\n        t.equal(res.statusCode, 413);\n        res.once('end', t.end.bind(t));\n        res.resume();\n    });\n    client.write('{\"a\":[' + new Array(512).join('1,') + '0]}');\n    client.end();\n});\n\n\ntest('path+flags ok', function (t) {\n    SERVER.get({path: '/foo', flags: 'i'}, function (req, res, next) {\n        res.send('hi');\n        next();\n    });\n\n    CLIENT.get('/FoO', function (err, _, res, obj) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.equal(obj, 'hi');\n        t.end();\n    });\n});\n\n\ntest('test matches params with custom regex', function (t) {\n    var Router = require('../lib/router');\n    var router = new Router({\n        log: helper.getLog()\n    });\n    t.ok(router);\n    router.mount({\n        method: 'GET',\n        name: 'test',\n        url: '/foo/:bar',\n        urlParamPattern: '[a-zA-Z0-9-_~%!;@=+\\\\$\\\\*\\\\.]+'\n    });\n\n    var count = 0;\n    var done = 0;\n\n    function find(p, exp) {\n        count++;\n        var obj = {\n            headers: {},\n            method: 'GET',\n            contentType: function () {\n            },\n            path: function () {\n                return (p);\n            },\n            version: function () {\n                return ('*');\n            },\n            url: p\n        };\n\n        process.nextTick(function () {\n            router.find(obj, {}, function (err, r, ctx) {\n                if (exp) {\n                    t.ifError(err);\n                    t.ok(r);\n                    t.ok(ctx);\n                    t.deepEqual(ctx, {bar: exp});\n                } else {\n                    t.ok(err);\n                }\n                if (++done === count)\n                    t.end();\n            });\n        });\n\n    }\n\n    find('/foo/a%40b.com', 'a@b.com');\n    find('/foo/a@b.com', 'a@b.com');\n    find('/foo/a*b.com', 'a*b.com');\n    find('/foo/a%40b.com/bar', false);\n});\n\n\ntest('GH-180 can parse DELETE body', function (t) {\n    SERVER.use(restify.bodyParser({mapParams: false}));\n\n    SERVER.del('/', function (req, res, next) {\n        res.send(200, req.body);\n        next();\n    });\n\n    var opts = {\n        hostname: 'localhost',\n        port: PORT,\n        path: '/',\n        method: 'DELETE',\n        agent: false,\n        headers: {\n            'accept': 'application/json',\n            'content-type': 'application/json',\n            'transfer-encoding': 'chunked'\n        }\n    };\n    http.request(opts, function (res) {\n        t.equal(res.statusCode, 200);\n        res.setEncoding('utf8');\n        res.body = '';\n        res.on('data', function (chunk) {\n            res.body += chunk;\n        });\n        res.on('end', function () {\n            t.equal(res.body, '{\"param1\":1234}');\n            t.end();\n        });\n    }).end('{\"param1\": 1234}');\n});\n\n\ntest('returning error from a handler (with domains)', function (t) {\n    SERVER.get('/', function (req, res, next) {\n        next(new Error('bah!'));\n    });\n\n    CLIENT.get('/', function (err, _, res) {\n        t.ok(err);\n        t.equal(res.statusCode, 500);\n        t.end();\n    });\n});\n\n\ntest('emitting error from a handler (with domains)', function (t) {\n    SERVER.get('/', function (req, res, next) {\n        req.emit('error', new Error('bah!'));\n    });\n\n    CLIENT.get('/', function (err, _, res) {\n        t.ok(err);\n        t.equal(res.statusCode, 500);\n        t.end();\n    });\n});\n\n\ntest('throwing error from a handler (with domains)', function (t) {\n    SERVER.get('/', function (req, res, next) {\n        process.nextTick(function () {\n            throw new Error('bah!');\n        });\n    });\n\n    CLIENT.get('/', function (err, _, res) {\n        t.ok(err);\n        t.equal(res.statusCode, 500);\n        t.end();\n    });\n});\n\n\ntest('gh-278 missing router error events (404)', function (t) {\n    SERVER.once('NotFound', function (req, res) {\n        res.send(404, 'foo');\n    });\n\n    CLIENT.get('/' + uuid.v4(), function (err, _, res) {\n        t.ok(err);\n        t.equal(err.message, '\"foo\"');\n        t.equal(res.statusCode, 404);\n        t.end();\n    });\n});\n\n\ntest('gh-278 missing router error events (405)', function (t) {\n    var p = '/' + uuid.v4();\n    SERVER.post(p, function (req, res, next) {\n        res.send(201);\n        next();\n    });\n    SERVER.once('MethodNotAllowed', function (req, res) {\n        res.send(405, 'foo');\n    });\n\n    CLIENT.get(p, function (err, _, res) {\n        t.ok(err);\n        t.equal(err.message, '\"foo\"');\n        t.equal(res.statusCode, 405);\n        t.end();\n    });\n});\n\n\ntest('gh-278 missing router error events invalid version', function (t) {\n    var p = '/' + uuid.v4();\n    SERVER.get({\n        path: p,\n        version: '1.2.3'\n    }, function (req, res, next) {\n        res.send(200);\n        next();\n    });\n    SERVER.once('VersionNotAllowed', function (req, res) {\n        res.send(449, 'foo');\n    });\n\n    var opts = {\n        path: p,\n        headers: {\n            'accept-version': '3.2.1'\n        }\n    };\n    CLIENT.get(opts, function (err, _, res) {\n        t.ok(err);\n        t.equal(err.message, '\"foo\"');\n        t.equal(res.statusCode, 449);\n        t.end();\n    });\n});\n\n\ntest('gh-278 missing router error events (415)', function (t) {\n    var p = '/' + uuid.v4();\n    SERVER.post({\n        path: p,\n        contentType: 'text/xml'\n    }, function (req, res, next) {\n        res.send(200);\n        next();\n    });\n\n    SERVER.once('UnsupportedMediaType', function (req, res) {\n        res.send(415, 'foo');\n    });\n\n    CLIENT.post(p, {}, function (err, _, res) {\n        t.ok(err);\n        t.equal(err.message, '\"foo\"');\n        t.equal(res.statusCode, 415);\n        t.end();\n    });\n});\n\n\ntest('next.ifError', function (t) {\n    SERVER.use(function (req, res, next) {\n        next.ifError(null);\n        next();\n    });\n\n    SERVER.get('/foo/:id', function tester(req, res, next) {\n        process.nextTick(function () {\n            var e = new RestError({\n                statusCode: 400,\n                restCode: 'Foo'\n            }, 'screw you client');\n            next.ifError(e);\n            t.notOk(true);\n            res.send(200);\n            next();\n        });\n    });\n\n    CLIENT.get('/foo/bar', function (err) {\n        t.ok(err);\n        t.equal(err.statusCode, 400);\n        t.equal(err.message, 'screw you client');\n        t.end();\n    });\n});\n\n\ntest('gh-283 maximum available versioned route matching', function (t) {\n    var p = '/' + uuid.v4();\n    var versions = ['1.0.0', '1.1.0'];\n    var i;\n\n    function mnt(v) {\n        SERVER.get({\n            path: p,\n            version: v\n        }, function (req, res, next) {\n            res.json(200, {version: v});\n            next();\n        });\n    }\n\n    for (i = 0; i < versions.length; i++)\n        mnt(versions[i]);\n\n    var opts = {\n        path: p,\n        headers: {\n            'accept-version': '~1'\n        }\n    };\n\n    CLIENT.get(opts, function (err, _, res, obj) {\n        t.equal(obj.version, '1.1.0');\n        t.end();\n    });\n});\n\n/* JSSTYLED */\ntest('versioned route matching should prefer first match if equal versions', function (t) {\n    var p = '/' + uuid.v4();\n\n    SERVER.get({\n        path: p,\n        version: ['1.1.0', '1.2.0']\n    }, function (req, res, next) {\n        res.json(200, {route: p});\n        next();\n    });\n\n    SERVER.get({\n        path: '/:id',\n        version: ['1.1.0', '1.2.0']\n    }, function (req, res, next) {\n        res.json(200, {route: 'id'});\n        next();\n    });\n\n    var opts = {\n        path: p,\n        headers: {\n            'accept-version': '~1'\n        }\n    };\n\n    CLIENT.get(opts, function (err, _, res, obj) {\n        t.equal(obj.route, p);\n        t.end();\n    });\n});\n\n\ntest('gh-329 wrong values in res.methods', function (t) {\n    function route(req, res, next) {\n        res.send(200);\n        next();\n    }\n\n    SERVER.get('/stuff', route);\n    SERVER.post('/stuff', route);\n    SERVER.get('/stuff/:id', route);\n    SERVER.put('/stuff/:id', route);\n    SERVER.del('/stuff/:id', route);\n\n    SERVER.once('MethodNotAllowed', function (req, res, cb) {\n        t.ok(res.methods);\n        t.deepEqual(res.methods, ['GET', 'PUT', 'DELETE']);\n        res.send(405);\n    });\n\n    CLIENT.post('/stuff/foo', {}, function (err, _, res) {\n        t.ok(err);\n        t.end();\n    });\n});\n\n\ntest('GH-323: <url>/<path>/?<queryString> broken', function (t) {\n    SERVER.pre(restify.pre.sanitizePath());\n    SERVER.use(restify.queryParser());\n    SERVER.get('/hello/:name', function (req, res, next) {\n        res.send(req.params);\n    });\n\n    SERVER.listen(8080, function () {\n        CLIENT.get('/hello/foo/?bar=baz', function (err, _, __, obj) {\n            t.ifError(err);\n            t.deepEqual(obj, {name: 'foo', bar: 'baz'});\n            t.end();\n        });\n    });\n});\n\n\ntest('<url>/?<queryString> broken', function (t) {\n    SERVER.pre(restify.pre.sanitizePath());\n    SERVER.use(restify.queryParser());\n    /* JSSTYLED */\n    SERVER.get(/\\/.*/, function (req, res, next) {\n        res.send(req.params);\n    });\n\n    SERVER.listen(8080, function () {\n        CLIENT.get('/?bar=baz', function (err, _, __, obj) {\n            t.ifError(err);\n            t.deepEqual(obj, {bar: 'baz'});\n            t.end();\n        });\n    });\n});\n\n\ntest('GH #704: Route with a valid RegExp params', function (t) {\n\n    SERVER.get({\n        name: 'regexp_param1',\n        path: '/foo/:id([0-9]+)'\n    }, function (req, res, next) {\n        t.equal(req.params.id, '0123456789');\n        res.send();\n        next();\n    });\n\n    CLIENT.get('/foo/0123456789', function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.end();\n    });\n});\n\n\ntest('GH #704: Route with an unvalid RegExp params', function (t) {\n\n    SERVER.get({\n        name: 'regexp_param2',\n        path: '/foo/:id([0-9]+)'\n    }, function (req, res, next) {\n        t.equal(req.params.id, 'A__M');\n        res.send();\n        next();\n    });\n\n    CLIENT.get('/foo/A__M', function (err, _, res) {\n        t.ok(err);\n        t.equal(res.statusCode, 404);\n        t.end();\n    });\n});\n\n\ntest('content-type routing vendor', function (t) {\n    SERVER.post({\n        name: 'foo',\n        path: '/',\n        contentType: 'application/vnd.joyent.com.foo+json'\n    }, function (req, res, next) {\n        res.send(201);\n    });\n\n    SERVER.post({\n        name: 'bar',\n        path: '/',\n        contentType: 'application/vnd.joyent.com.bar+json'\n    }, function (req, res, next) {\n        res.send(202);\n    });\n\n    SERVER.listen(8080, function () {\n        var _done = 0;\n\n        function done() {\n            if (++_done === 2)\n                t.end();\n        }\n\n        var opts = {\n            path: '/',\n            headers: {\n                'content-type': 'application/vnd.joyent.com.foo+json'\n            }\n        };\n        CLIENT.post(opts, {}, function (err, _, res) {\n            t.ifError(err);\n            t.equal(res.statusCode, 201);\n            done();\n        });\n\n        var opts2 = {\n            path: '/',\n            headers: {\n                'content-type': 'application/vnd.joyent.com.bar+json'\n            }\n        };\n        CLIENT.post(opts2, {}, function (err, _, res) {\n            t.ifError(err);\n            t.equal(res.statusCode, 202);\n            done();\n        });\n    });\n});\n\n\ntest('content-type routing params only', function (t) {\n    SERVER.post({\n        name: 'foo',\n        path: '/',\n        contentType: 'application/json; type=foo'\n    }, function (req, res, next) {\n        res.send(201);\n    });\n\n    SERVER.post({\n        name: 'bar',\n        path: '/',\n        contentType: 'application/json; type=bar'\n    }, function (req, res, next) {\n        res.send(202);\n    });\n\n    var _done = 0;\n\n    function done() {\n        if (++_done === 2)\n            t.end();\n    }\n\n    var opts = {\n        path: '/',\n        headers: {\n            'content-type': 'application/json; type=foo'\n        }\n    };\n    CLIENT.post(opts, {}, function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 201);\n        done();\n    });\n\n    var opts2 = {\n        path: '/',\n        headers: {\n            'content-type': 'application/json; type=bar'\n        }\n    };\n    CLIENT.post(opts2, {}, function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 202);\n        done();\n    });\n});\n\ntest('malformed content type', function (t) {\n    SERVER.post({\n        name: 'foo',\n        path: '/',\n        contentType: 'application/json'\n    }, function (req, res, next) {\n        res.send(201);\n    });\n\n    var opts = {\n        path: '/',\n        headers: {\n            'content-type': 'boom'\n        }\n    };\n\n    CLIENT.post(opts, {}, function (err, _, res) {\n        t.ok(err);\n        t.equal(res.statusCode, 415);\n        t.end();\n    });\n});\n\ntest('gh-193 basic', function (t) {\n    SERVER.get({\n        name: 'foo',\n        path: '/foo'\n    }, function (req, res, next) {\n        next('bar');\n    });\n\n    SERVER.get({\n        name: 'bar',\n        path: '/bar'\n    }, function (req, res, next) {\n        res.send(200);\n        next();\n    });\n\n    CLIENT.get('/foo', function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.end();\n    });\n});\n\ntest('gh-193 route name normalization', function (t) {\n    SERVER.get({\n        name: 'foo',\n        path: '/foo'\n    }, function (req, res, next) {\n        next('b-a-r');\n    });\n\n    SERVER.get({\n        name: 'b-a-r',\n        path: '/bar'\n    }, function (req, res, next) {\n        res.send(200);\n        next();\n    });\n\n    CLIENT.get('/foo', function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.end();\n    });\n});\n\n\ntest('gh-193 route ENOEXIST', function (t) {\n    SERVER.get({\n        name: 'foo',\n        path: '/foo'\n    }, function (req, res, next) {\n        next('baz');\n    });\n\n    SERVER.get({\n        name: 'bar',\n        path: '/bar'\n    }, function (req, res, next) {\n        res.send(200);\n        next();\n    });\n\n    CLIENT.get('/foo', function (err, _, res) {\n        t.ok(err);\n        t.equal(res.statusCode, 500);\n        t.end();\n    });\n});\n\n\ntest('gh-193 route only run use once', function (t) {\n    var count = 0;\n\n    SERVER.use(function (req, res, next) {\n        count++;\n        next();\n    });\n\n    SERVER.get({\n        name: 'foo',\n        path: '/foo'\n    }, function (req, res, next) {\n        next('bar');\n    });\n\n    SERVER.get({\n        name: 'bar',\n        path: '/bar'\n    }, function (req, res, next) {\n        res.send(200);\n        next();\n    });\n\n    CLIENT.get('/foo', function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.equal(count, 1);\n        t.end();\n    });\n});\n\n\ntest('gh-193 route chained', function (t) {\n    var count = 0;\n\n    SERVER.use(function addCounter(req, res, next) {\n        count++;\n        next();\n    });\n\n    SERVER.get({\n        name: 'foo',\n        path: '/foo'\n    }, function getFoo(req, res, next) {\n        next('bar');\n    });\n\n    SERVER.get({\n        name: 'bar',\n        path: '/bar'\n    }, function getBar(req, res, next) {\n        next('baz');\n    });\n\n    SERVER.get({\n        name: 'baz',\n        path: '/baz'\n    }, function getBaz(req, res, next) {\n        res.send(200);\n        next();\n    });\n\n    CLIENT.get('/foo', function (err, _, res) {\n        t.ok(err);\n        t.equal(res.statusCode, 500);\n        t.equal(count, 1);\n        t.end();\n    });\n});\n\n\ntest('gh-193 route params basic', function (t) {\n    var count = 0;\n\n    SERVER.use(function (req, res, next) {\n        count++;\n        next();\n    });\n\n    SERVER.get({\n        name: 'foo',\n        path: '/foo/:id'\n    }, function (req, res, next) {\n        t.equal(req.params.id, 'blah');\n        next('bar');\n    });\n\n    SERVER.get({\n        name: 'bar',\n        path: '/bar/:baz'\n    }, function (req, res, next) {\n        t.notOk(req.params.baz);\n        res.send(200);\n        next();\n    });\n\n    CLIENT.get('/foo/blah', function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.equal(count, 1);\n        t.end();\n    });\n});\n\n\ntest('gh-193 same url w/params', function (t) {\n    var count = 0;\n\n    SERVER.use(function (req, res, next) {\n        count++;\n        next();\n    });\n\n    SERVER.get({\n        name: 'foo',\n        path: '/foo/:id'\n    }, function (req, res, next) {\n        t.equal(req.params.id, 'blah');\n        next('foo2');\n    });\n\n    SERVER.get({\n        name: 'foo2',\n        path: '/foo/:baz'\n    }, function (req, res, next) {\n        t.equal(req.params.baz, 'blah');\n        res.send(200);\n        next();\n    });\n\n    CLIENT.get('/foo/blah', function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.equal(count, 1);\n        t.end();\n    });\n});\n\n\ntest('gh-193 next(\"route\") from a use plugin', function (t) {\n    var count = 0;\n\n    SERVER.use(function plugin(req, res, next) {\n        count++;\n        next('bar');\n    });\n\n    SERVER.get({\n        name: 'foo',\n        path: '/foo'\n    }, function getFoo(req, res, next) {\n        res.send(500);\n        next();\n    });\n\n    SERVER.get({\n        name: 'bar',\n        path: '/bar'\n    }, function getBar(req, res, next) {\n        res.send(200);\n        next();\n    });\n\n    CLIENT.get('/foo', function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.equal(count, 1);\n        t.end();\n    });\n});\n\n\ntest('res.charSet', function (t) {\n    SERVER.get('/foo', function getFoo(req, res, next) {\n        res.charSet('ISO-8859-1');\n        res.set('Content-Type', 'text/plain');\n        res.send(200, {foo: 'bar'});\n        next();\n    });\n\n    CLIENT.get('/foo', function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.equal(res.headers['content-type'],\n            'text/plain; charset=ISO-8859-1');\n        t.end();\n    });\n});\n\n\ntest('res.charSet override', function (t) {\n    SERVER.get('/foo', function getFoo(req, res, next) {\n        res.charSet('ISO-8859-1');\n        res.set('Content-Type', 'text/plain;charset=utf-8');\n        res.send(200, {foo: 'bar'});\n        next();\n    });\n\n    CLIENT.get('/foo', function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.equal(res.headers['content-type'],\n            'text/plain; charset=ISO-8859-1');\n        t.end();\n    });\n});\n\n\ntest('GH-384 res.json(200, {}) broken', function (t) {\n    SERVER.get('/foo', function (req, res, next) {\n        res.json(200, {foo: 'bar'});\n        next();\n    });\n\n    CLIENT.get('/foo', function (err, _, res, obj) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.ok(obj);\n        t.equal((obj || {}).foo, 'bar');\n        t.end();\n    });\n});\n\n\ntest('GH-401 regex routing broken', function (t) {\n    function handle(req, res, next) {\n        res.send(204);\n        next();\n    }\n\n    var done = 0;\n\n    function client_cb(err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 204);\n        if (++done === 2)\n            t.end();\n    }\n\n    SERVER.get('/image', handle);\n    SERVER.get(/^(\\/image\\/)(.*)/, handle);\n\n    CLIENT.get('/image', client_cb);\n    CLIENT.get('/image/1.jpg', client_cb);\n});\n\ntest('explicitly sending a 403 with custom error', function (t) {\n    function MyCustomError() {\n    }\n\n    MyCustomError.prototype = Object.create(Error.prototype);\n\n    SERVER.get('/', function (req, res, next) {\n        res.send(403, new MyCustomError('bah!'));\n    });\n\n    CLIENT.get('/', function (err, _, res) {\n        t.ok(err);\n        t.equal(res.statusCode, 403);\n        t.end();\n    });\n});\n\ntest('explicitly sending a 403 on error', function (t) {\n    SERVER.get('/', function (req, res, next) {\n        res.send(403, new Error('bah!'));\n    });\n\n    CLIENT.get('/', function (err, _, res) {\n        t.ok(err);\n        t.equal(res.statusCode, 403);\n        t.end();\n    });\n});\n\n\ntest('fire event on error', function (t) {\n    SERVER.once('InternalServer', function (req, res, err, cb) {\n        t.ok(req);\n        t.ok(res);\n        t.ok(err);\n        t.ok(cb);\n        t.equal(typeof (cb), 'function');\n        return (cb());\n    });\n\n    SERVER.get('/', function (req, res, next) {\n        return (next(new restify.errors.InternalServerError('bah!')));\n    });\n\n    CLIENT.get('/', function (err, _, res) {\n        t.ok(err);\n        t.equal(res.statusCode, 500);\n        t.expect(7);\n        t.end();\n    });\n});\n\n\ntest('error handler defers \"after\" event', function (t) {\n    t.expect(9);\n    SERVER.once('NotFound', function (req, res, err, cb) {\n        t.ok(req);\n        t.ok(res);\n        t.ok(cb);\n        t.equal(typeof (cb), 'function');\n        t.ok(err);\n\n        SERVER.removeAllListeners('after');\n        SERVER.once('after', function (req2, res2) {\n            t.ok(req2);\n            t.ok(res2);\n            t.end();\n        });\n        res.send(404, 'foo');\n        return (cb());\n    });\n    SERVER.once('after', function () {\n        // do not fire prematurely\n        t.notOk(true);\n    });\n    CLIENT.get('/' + uuid(), function (err, _, res) {\n        t.ok(err);\n        t.equal(res.statusCode, 404);\n        t.end();\n    });\n});\n\n\ntest('gh-757 req.absoluteUri() defaults path segment to req.path()',\n     function (t) {\n    SERVER.get('/the-original-path', function (req, res, next) {\n        var prefix = 'http://127.0.0.1:' + PORT;\n        t.equal(req.absoluteUri('?key=value'),\n                prefix + '/the-original-path/?key=value');\n        t.equal(req.absoluteUri('#fragment'),\n                prefix + '/the-original-path/#fragment');\n        t.equal(req.absoluteUri('?key=value#fragment'),\n                prefix + '/the-original-path/?key=value#fragment');\n        res.send();\n        next();\n    });\n\n    CLIENT.get('/the-original-path', function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.end();\n    });\n});\n\n\ntest('GH-693 sending multiple response header values', function (t) {\n    SERVER.get('/', function (req, res, next) {\n        res.link('/', 'self');\n        res.link('/foo', 'foo');\n        res.link('/bar', 'bar');\n        res.send(200, 'root');\n    });\n\n    CLIENT.get('/', function (err, _, res) {\n        t.equal(res.statusCode, 200);\n        t.equal(res.headers.link.split(',').length, 3);\n        t.end();\n    });\n});\n\n\ntest('gh-762 res.noCache()', function (t) {\n    SERVER.get('/some-path', function (req, res, next) {\n        res.noCache();\n        res.send('data');\n    });\n\n    CLIENT.get('/some-path', function (err, _, res) {\n        t.equal(res.headers['cache-control'],\n          'no-cache, no-store, must-revalidate');\n        t.equal(res.headers.pragma, 'no-cache');\n        t.equal(res.headers.expires, '0');\n        t.end();\n    });\n});\n\n\ntest('gh-779 set-cookie fields should never have commas', function (t) {\n    SERVER.get('/set-cookie', function (req, res, next) {\n        res.header('set-cookie', 'foo');\n        res.header('set-cookie', 'bar');\n        res.send(200);\n    });\n\n    CLIENT.get('/set-cookie', function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.headers['set-cookie'].length, 1,\n                'set-cookie header should only have 1 element');\n        t.equal(res.headers['set-cookie'], 'bar');\n        t.end();\n    });\n});","blocks":{"total":309,"seen":277,"missing":32,"percentage":0.8964401294498382}},"hash":"1805569792bde79bdd90ce2d8883f8ff"},"/Users/yunong/workspace/node-restify/test/throttle.test.js":{"stats":{"percentage":1,"lines":[],"missing":0,"seen":175,"total":175,"coverage":{},"source":"// Copyright 2012 Mark Cavage, Inc.  All rights reserved.\n\nvar http = require('http');\n\nvar uuid = require('node-uuid');\n\nvar restify = require('../lib');\n\nif (require.cache[__dirname + '/lib/helper.js'])\n    delete require.cache[__dirname + '/lib/helper.js'];\nvar helper = require('./lib/helper.js');\n\n\n///--- Globals\n\nvar after = helper.after;\nvar before = helper.before;\nvar test = helper.test;\n\nvar PORT = process.env.UNIT_TEST_PORT || 0;\nvar CLIENT;\nvar SERVER;\nvar USERNAME = uuid();\nvar PASSWORD = uuid();\n\nvar errorMessage = 'Error message should include rate 0.5 r/s. Received: ';\n///--- Tests\n\n\n//--- Tests\n\ntest('setup', function (t) {\n    SERVER = restify.createServer({\n        dtrace: helper.dtrace,\n        log: helper.getLog('server')\n    });\n\n    SERVER.use(function ghettoAuthenticate(req, res, next) {\n        if (req.params.name)\n            req.username = req.params.name;\n\n        next();\n    });\n\n    SERVER.use(restify.throttle({\n        burst: 1,\n        rate: 0.5,\n        username: true,\n        overrides: {\n            'admin': {\n                burst: 0,\n                rate: 0\n            },\n            'special': {\n                burst: 3,\n                rate: 1\n            }\n        }\n    }));\n\n    SERVER.get('/test/:name', function (req, res, next) {\n        res.send();\n        next();\n    });\n\n    SERVER.listen(PORT, '127.0.0.1', function () {\n        PORT = SERVER.address().port;\n        CLIENT = restify.createJsonClient({\n            url: 'http://127.0.0.1:' + PORT,\n            dtrace: helper.dtrace,\n            retry: false,\n            agent: false\n        });\n\n        t.end();\n    });\n});\n\n\ntest('ok', function (t) {\n    CLIENT.get('/test/throttleMe', function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.end();\n    });\n});\n\n\ntest('throttled', function (t) {\n    CLIENT.get('/test/throttleMe', function (err, _, res) {\n        t.ok(err);\n        t.equal(err.statusCode, 429);\n        t.ok(err && err.message && err.message.indexOf('0.5 r/s') !== -1,\n            errorMessage + (err && err.message));\n        t.equal(res.statusCode, 429);\n        setTimeout(function () {\n            t.end();\n        }, 2100);\n    });\n});\n\n\ntest('ok after tokens', function (t) {\n    CLIENT.get('/test/throttleMe', function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.end();\n    });\n});\n\n\ntest('override limited', function (t) {\n    CLIENT.get('/test/special', function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.end();\n    });\n});\n\n\ntest('override limited (not throttled)', function (t) {\n    CLIENT.get('/test/special', function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.end();\n    });\n});\n\ntest('throttled after limited override', function (t) {\n    CLIENT.get('/test/throttleMe', function () {\n    CLIENT.get('/test/throttleMe', function (err, _, res) {\n        t.ok(err);\n        t.equal(res.statusCode, 429);\n        t.ok(err && err.message && err.message.indexOf('0.5 r/s') !== -1,\n            errorMessage + (err && err.message));\n        t.end();\n    });\n    });\n});\n\n\ntest('override unlimited', function (t) {\n    CLIENT.get('/test/admin', function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.end();\n    });\n});\n\n\ntest('override unlimited (not throttled)', function (t) {\n    CLIENT.get('/test/admin', function (err, _, res) {\n        t.ifError(err);\n        t.equal(res.statusCode, 200);\n        t.end();\n    });\n});\n\ntest('throttled after unlimited override', function (t) {\n    CLIENT.get('/test/throttleMe', function () {\n    CLIENT.get('/test/throttleMe', function (err, _, res) {\n        t.ok(err);\n        t.equal(res.statusCode, 429);\n        t.ok(err && err.message && err.message.indexOf('0.5 r/s') !== -1,\n            errorMessage + (err && err.message));\n        t.end();\n    });\n    });\n});\n\ntest('shutdown', function (t) {\n    SERVER.close(function () {\n        t.end();\n    });\n});","blocks":{"total":29,"seen":29,"missing":0,"percentage":1}},"hash":"5f35894a3d497f6934c2715d360fdbf0"},"/Users/yunong/workspace/node-restify/test/upgrade.test.js":{"stats":{"percentage":0.8837772397094431,"lines":[{"lineno":41},{"lineno":42},{"lineno":44},{"lineno":45},{"lineno":46},{"lineno":47},{"lineno":48},{"lineno":52},{"lineno":55},{"lineno":56},{"lineno":58},{"lineno":59},{"lineno":60},{"lineno":61},{"lineno":102},{"lineno":103},{"lineno":120},{"lineno":121},{"lineno":148},{"lineno":149},{"lineno":153},{"lineno":161},{"lineno":177},{"lineno":178},{"lineno":179},{"lineno":184},{"lineno":203},{"lineno":204},{"lineno":208},{"lineno":216},{"lineno":233},{"lineno":234},{"lineno":241},{"lineno":246},{"lineno":281},{"lineno":282},{"lineno":303},{"lineno":304},{"lineno":305},{"lineno":319},{"lineno":320},{"lineno":347},{"lineno":348},{"lineno":376},{"lineno":377},{"lineno":378},{"lineno":391},{"lineno":392}],"missing":48,"seen":365,"total":413,"coverage":{"41":{"partial":false,"source":"        if (complete)","missing":[{"startCol":12,"endCol":20}]},"42":{"partial":false,"source":"            return;","missing":[{"startCol":12,"endCol":19}]},"44":{"partial":false,"source":"        complete = true;","missing":[{"startCol":8,"endCol":24}]},"45":{"partial":false,"source":"        t.ok(false, 'timeout after ' + TIMEOUT + 'ms');","missing":[{"startCol":8,"endCol":54},{"startCol":20,"endCol":46},{"startCol":39,"endCol":46}]},"46":{"partial":false,"source":"        t.ok(false, 'remaining latches: ' +","missing":[{}]},"47":{"partial":false,"source":"            Object.keys(names).join(', '));","missing":[{"startCol":12,"endCol":30},{}]},"48":{"partial":false,"source":"        t.done();","missing":[{"startCol":8,"endCol":16}]},"52":{"partial":false,"source":"            return;","missing":[{"startCol":12,"endCol":19}]},"55":{"partial":false,"source":"            complete = true;","missing":[{"startCol":12,"endCol":28}]},"56":{"partial":false,"source":"            t.ok(false, 'latch name \"' + name +","missing":[{"startCol":24,"endCol":45},{"startCol":41,"endCol":45},{}]},"57":{"partial":false,"source":"                '\" not expected');","missing":[{}]},"58":{"partial":false,"source":"            t.ok(false, 'remaining latches: ' +","missing":[{}]},"59":{"partial":false,"source":"                Object.keys(names).join(', '));","missing":[{},{"startCol":16,"endCol":34}]},"60":{"partial":false,"source":"            t.done();","missing":[{"startCol":12,"endCol":20}]},"61":{"partial":false,"source":"            return;","missing":[{"startCol":12,"endCol":19}]},"102":{"partial":false,"source":"        console.error(e.stack);","missing":[{"startCol":8,"endCol":30}]},"103":{"partial":false,"source":"        process.exit(1);","missing":[{"startCol":8,"endCol":23}]},"120":{"partial":false,"source":"        console.error(e.stack);","missing":[{"startCol":8,"endCol":30}]},"121":{"partial":false,"source":"        process.exit(1);","missing":[{"startCol":8,"endCol":23}]},"148":{"partial":false,"source":"            t.ifError(err2);","missing":[{"startCol":12,"endCol":27}]},"149":{"partial":false,"source":"            done('client error');","missing":[{"startCol":12,"endCol":32}]},"153":{"partial":false,"source":"                t.ifError(err2);","missing":[{"startCol":16,"endCol":31}]},"161":{"partial":false,"source":"            done('server upgraded unexpectedly');","missing":[{"startCol":12,"endCol":48}]},"177":{"partial":false,"source":"            t.ifError(ex);","missing":[{"startCol":12,"endCol":25}]},"178":{"partial":false,"source":"            done('unxpected res.send error');","missing":[{"startCol":12,"endCol":44}]},"179":{"partial":false,"source":"            return;","missing":[{"startCol":12,"endCol":19}]},"184":{"partial":false,"source":"            upg.socket.destroy();","missing":[{"startCol":12,"endCol":32}]},"203":{"partial":false,"source":"            t.ifError(err2);","missing":[{"startCol":12,"endCol":27}]},"204":{"partial":false,"source":"            done('client error');","missing":[{"startCol":12,"endCol":32}]},"208":{"partial":false,"source":"                t.ifError(err2);","missing":[{"startCol":16,"endCol":31}]},"216":{"partial":false,"source":"            done('server upgraded unexpectedly');","missing":[{"startCol":12,"endCol":48}]},"233":{"partial":false,"source":"            t.ifError(ex);","missing":[{"startCol":12,"endCol":25}]},"234":{"partial":false,"source":"            done('unexpected requestUpgrade error');","missing":[{"startCol":12,"endCol":51}]},"241":{"partial":false,"source":"                t.ifError(ex);","missing":[{"startCol":16,"endCol":29}]},"246":{"partial":false,"source":"        next(false);","missing":[{"startCol":8,"endCol":19}]},"281":{"partial":false,"source":"                t.ifError(err);","missing":[{"startCol":16,"endCol":30}]},"282":{"partial":false,"source":"                done('server shed error');","missing":[{"startCol":16,"endCol":41}]},"303":{"partial":false,"source":"            t.ifError(err2);","missing":[{"startCol":12,"endCol":27}]},"304":{"partial":false,"source":"            t.ok(false, 'server did not upgrade');","missing":[{"startCol":12,"endCol":49}]},"305":{"partial":false,"source":"            done(true);","missing":[{"startCol":12,"endCol":22}]},"319":{"partial":false,"source":"                    t.ifError(err3);","missing":[{"startCol":20,"endCol":35}]},"320":{"partial":false,"source":"                    done('client shed error');","missing":[{"startCol":20,"endCol":45}]},"347":{"partial":false,"source":"                t.ifError(err);","missing":[{"startCol":16,"endCol":30}]},"348":{"partial":false,"source":"                done('server shed error');","missing":[{"startCol":16,"endCol":41}]},"376":{"partial":false,"source":"            t.ifError(err2);","missing":[{"startCol":12,"endCol":27}]},"377":{"partial":false,"source":"            t.ok(false, 'server did not upgrade');","missing":[{"startCol":12,"endCol":49}]},"378":{"partial":false,"source":"            done(true);","missing":[{"startCol":12,"endCol":22}]},"391":{"partial":false,"source":"                    t.ifError(err3);","missing":[{"startCol":20,"endCol":35}]},"392":{"partial":false,"source":"                    done('client shed error');","missing":[{"startCol":20,"endCol":45}]}},"source":"// Copyright (c) 2013, Joyent, Inc. All rights reserved.\n// vim: set ts=8 sts=8 sw=8 et:\n\nvar http = require('http');\n\nvar Watershed = require('watershed').Watershed;\n\nvar HttpError = require('../lib/errors').HttpError;\nvar RestError = require('../lib/errors').RestError;\nvar InvalidUpgradeStateError =\n    require('../lib/upgrade').InvalidUpgradeStateError;\nvar restify = require('../lib');\n\nif (require.cache[__dirname + '/lib/helper.js'])\n    delete require.cache[__dirname + '/lib/helper.js'];\nvar helper = require('./lib/helper.js');\n\n\n///--- Globals\n\nvar after = helper.after;\nvar before = helper.before;\nvar test = helper.test;\n\nvar PORT = process.env.UNIT_TEST_PORT || 0;\nvar CLIENT;\nvar SERVER;\nvar WATERSHED = new Watershed();\nvar SHEDLIST = [];\n\nvar TIMEOUT = 15000;\n\n///--- Test Helper\n\nfunction\n    finish_latch(_test, _names) {\n    var complete = false;\n    var t = _test;\n    var names = _names;\n    var iv = setTimeout(function () {\n        if (complete)\n            return;\n\n        complete = true;\n        t.ok(false, 'timeout after ' + TIMEOUT + 'ms');\n        t.ok(false, 'remaining latches: ' +\n            Object.keys(names).join(', '));\n        t.done();\n    }, TIMEOUT);\n    return (function (name, err) {\n        if (complete)\n            return;\n\n        if (names[name] === undefined) {\n            complete = true;\n            t.ok(false, 'latch name \"' + name +\n                '\" not expected');\n            t.ok(false, 'remaining latches: ' +\n                Object.keys(names).join(', '));\n            t.done();\n            return;\n        }\n\n        if (--names[name] === 0)\n            delete names[name];\n\n        /*\n         * Check that all latch names are done, and if so,\n         * end the test:\n         */\n        if (Object.keys(names).length === 0) {\n            complete = true;\n            clearTimeout(iv);\n            iv = null;\n            t.done();\n        }\n    });\n}\n\n\n///--- Tests\n\nbefore(function (cb) {\n    try {\n        SERVER = restify.createServer({\n            dtrace: helper.dtrace,\n            log: helper.getLog('server'),\n            version: ['2.0.0', '0.5.4', '1.4.3'],\n            handleUpgrades: true\n        });\n        SERVER.listen(PORT, '127.0.0.1', function () {\n            PORT = SERVER.address().port;\n            CLIENT = restify.createHttpClient({\n                url: 'http://127.0.0.1:' + PORT,\n                dtrace: helper.dtrace,\n                retry: false\n            });\n\n            cb();\n        });\n    } catch (e) {\n        console.error(e.stack);\n        process.exit(1);\n    }\n});\n\n\nafter(function (cb) {\n    try {\n        CLIENT.close();\n        SERVER.close(function () {\n            CLIENT = null;\n            SERVER = null;\n            cb();\n        });\n        while (SHEDLIST.length > 0) {\n            SHEDLIST.pop().destroy();\n        }\n    } catch (e) {\n        console.error(e.stack);\n        process.exit(1);\n    }\n});\n\n\ntest('GET without upgrade headers', function (t) {\n    var done = finish_latch(t, {\n        'client response': 1,\n        'server response': 1\n    });\n\n    SERVER.get('/attach', function (req, res, next) {\n        t.ok(!res.claimUpgrade, 'res.claimUpgrade not present');\n        res.send(400);\n        next();\n        done('server response');\n    });\n\n    var options = {\n        headers: {\n            'uprgade': 'ebfrockets'\n        },\n        path: '/attach'\n    };\n    CLIENT.get(options, function (err, req) {\n        t.ifError(err);\n        req.on('error', function (err2) {\n            t.ifError(err2);\n            done('client error');\n        });\n        req.on('result', function (err2, res) {\n            if (err2 && err2.name !== 'BadRequestError')\n                t.ifError(err2);\n            t.equal(res.statusCode, 400);\n            res.on('end', function () {\n                done('client response');\n            });\n            res.resume();\n        });\n        req.on('upgradeResult', function (err2, res) {\n            done('server upgraded unexpectedly');\n        });\n    });\n});\n\n\ntest('Dueling upgrade and response handling 1', function (t) {\n    var done = finish_latch(t, {\n        'expected requestUpgrade error': 1,\n        'client response': 1\n    });\n\n    SERVER.get('/attach', function (req, res, next) {\n        try {\n            res.send(400);\n        } catch (ex) {\n            t.ifError(ex);\n            done('unxpected res.send error');\n            return;\n        }\n\n        try {\n            var upg = res.claimUpgrade();\n            upg.socket.destroy();\n        } catch (ex) {\n            done('expected requestUpgrade error');\n        }\n        next(false);\n    });\n\n    var wskey = WATERSHED.generateKey();\n    var options = {\n        headers: {\n            'connection': 'upgrade',\n            'upgrade': 'websocket',\n            'sec-websocket-key': wskey\n        },\n        path: '/attach'\n    };\n    CLIENT.get(options, function (err, req) {\n        t.ifError(err);\n        req.on('error', function (err2) {\n            t.ifError(err2);\n            done('client error');\n        });\n        req.on('result', function (err2, res) {\n            if (err2 && err2.name !== 'BadRequestError')\n                t.ifError(err2);\n            t.equal(res.statusCode, 400);\n            res.on('end', function () {\n                done('client response');\n            });\n            res.resume();\n        });\n        req.on('upgradeResult', function (err2, res) {\n            done('server upgraded unexpectedly');\n        });\n    });\n});\n\n\ntest('Dueling upgrade and response handling 2', function (t) {\n    var done = finish_latch(t, {\n        'expected res.send error': 1,\n        'expected server to reset': 1\n    });\n\n    SERVER.get('/attach', function (req, res, next) {\n        try {\n            var upg = res.claimUpgrade();\n            upg.socket.destroy();\n        } catch (ex) {\n            t.ifError(ex);\n            done('unexpected requestUpgrade error');\n        }\n\n        try {\n            res.send(400);\n        } catch (ex) {\n            if (ex.name !== 'InvalidUpgradeStateError')\n                t.ifError(ex);\n            done('expected res.send error');\n            return;\n        }\n\n        next(false);\n    });\n\n    var wskey = WATERSHED.generateKey();\n    var options = {\n        headers: {\n            'connection': 'upgrade',\n            'upgrade': 'websocket',\n            'sec-websocket-key': wskey\n        },\n        path: '/attach'\n    };\n    CLIENT.get(options, function (err, req) {\n        t.ifError(err);\n        done('expected server to reset');\n        return;\n    });\n});\n\n\ntest('GET with upgrade headers', function (t) {\n    var done = finish_latch(t, {\n        'client shed end': 1,\n        'server shed end': 1\n    });\n\n    SERVER.get('/attach', function (req, res, next) {\n        t.ok(res.claimUpgrade, 'res.claimUpgrade present');\n        t.doesNotThrow(function () {\n            var upgrade = res.claimUpgrade();\n            var shed = WATERSHED.accept(req, upgrade.socket,\n                upgrade.head);\n            SHEDLIST.push(shed);\n            shed.end('ok we\\'re done here');\n            shed.on('error', function (err) {\n                t.ifError(err);\n                done('server shed error');\n            });\n            shed.on('end', function () {\n                done('server shed end');\n            });\n            next(false);\n        });\n    });\n\n    var wskey = WATERSHED.generateKey();\n    var options = {\n        headers: {\n            'connection': 'upgrade',\n            'upgrade': 'websocket',\n            'sec-websocket-key': wskey\n        },\n        path: '/attach'\n    };\n    CLIENT.get(options, function (err, req) {\n        t.ifError(err);\n        req.on('result', function (err2, res) {\n            t.ifError(err2);\n            t.ok(false, 'server did not upgrade');\n            done(true);\n        });\n        req.on('upgradeResult', function (err2, res, socket, head) {\n            t.ifError(err2);\n            t.ok(true, 'server upgraded');\n            t.equal(res.statusCode, 101);\n            t.equal(typeof (socket), 'object');\n            t.ok(Buffer.isBuffer(head), 'head is Buffer');\n            t.doesNotThrow(function () {\n                var shed = WATERSHED.connect(res, socket, head,\n                    wskey);\n                SHEDLIST.push(shed);\n                shed.end('ok, done');\n                shed.on('error', function (err3) {\n                    t.ifError(err3);\n                    done('client shed error');\n                });\n                shed.on('end', function () {\n                    done('client shed end');\n                });\n            });\n        });\n    });\n});\n\n\ntest('GET with some websocket traffic', function (t) {\n    var done = finish_latch(t, {\n        'client shed end': 1,\n        'server shed end': 1,\n        'server receive message': 5,\n        'client receive message': 3\n    });\n\n    SERVER.get('/attach', function (req, res, next) {\n        t.ok(res.claimUpgrade, 'res.claimUpgrade present');\n        t.doesNotThrow(function () {\n            var upgrade = res.claimUpgrade();\n            var shed = WATERSHED.accept(req, upgrade.socket,\n                upgrade.head);\n            SHEDLIST.push(shed);\n            shed.on('error', function (err) {\n                t.ifError(err);\n                done('server shed error');\n            });\n            shed.on('text', function (msg) {\n                if (msg === 'to server')\n                    done('server receive message');\n            });\n            shed.on('end', function () {\n                done('server shed end');\n            });\n            shed.send('to client');\n            shed.send('to client');\n            shed.send('to client');\n            next(false);\n        });\n    });\n\n    var wskey = WATERSHED.generateKey();\n    var options = {\n        headers: {\n            'connection': 'upgrade',\n            'upgrade': 'websocket',\n            'sec-websocket-key': wskey\n        },\n        path: '/attach'\n    };\n    CLIENT.get(options, function (err, req) {\n        t.ifError(err);\n        req.on('result', function (err2, res) {\n            t.ifError(err2);\n            t.ok(false, 'server did not upgrade');\n            done(true);\n        });\n        req.on('upgradeResult', function (err2, res, socket, head) {\n            t.ifError(err2);\n            t.ok(true, 'server upgraded');\n            t.equal(res.statusCode, 101);\n            t.equal(typeof (socket), 'object');\n            t.ok(Buffer.isBuffer(head), 'head is Buffer');\n            t.doesNotThrow(function () {\n                var shed = WATERSHED.connect(res, socket, head,\n                    wskey);\n                SHEDLIST.push(shed);\n                shed.on('error', function (err3) {\n                    t.ifError(err3);\n                    done('client shed error');\n                });\n                shed.on('end', function () {\n                    done('client shed end');\n                });\n                shed.on('text', function (msg) {\n                    if (msg === 'to client')\n                        done('client receive message');\n                });\n                var count = 5;\n                var iv = setInterval(function () {\n                    if (--count < 0) {\n                        clearInterval(iv);\n                        shed.end();\n                    } else {\n                        shed.send('to server');\n                    }\n                }, 100);\n            });\n        });\n    });\n});","blocks":{"total":75,"seen":54,"missing":21,"percentage":0.72}},"hash":"ef07dc88f317ae313b5cf6fc46b95e93"}}}